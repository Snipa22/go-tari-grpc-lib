// Copyright 2020. The Tari Project
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
// following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
// disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
// following disclaimer in the documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
// products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: base_node.proto

package tari_generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BaseNodeState int32

const (
	BaseNodeState_START_UP     BaseNodeState = 0
	BaseNodeState_HEADER_SYNC  BaseNodeState = 1
	BaseNodeState_HORIZON_SYNC BaseNodeState = 2
	BaseNodeState_CONNECTING   BaseNodeState = 3
	BaseNodeState_BLOCK_SYNC   BaseNodeState = 4
	BaseNodeState_LISTENING    BaseNodeState = 5
	BaseNodeState_SYNC_FAILED  BaseNodeState = 6
)

// Enum value maps for BaseNodeState.
var (
	BaseNodeState_name = map[int32]string{
		0: "START_UP",
		1: "HEADER_SYNC",
		2: "HORIZON_SYNC",
		3: "CONNECTING",
		4: "BLOCK_SYNC",
		5: "LISTENING",
		6: "SYNC_FAILED",
	}
	BaseNodeState_value = map[string]int32{
		"START_UP":     0,
		"HEADER_SYNC":  1,
		"HORIZON_SYNC": 2,
		"CONNECTING":   3,
		"BLOCK_SYNC":   4,
		"LISTENING":    5,
		"SYNC_FAILED":  6,
	}
)

func (x BaseNodeState) Enum() *BaseNodeState {
	p := new(BaseNodeState)
	*p = x
	return p
}

func (x BaseNodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaseNodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_base_node_proto_enumTypes[0].Descriptor()
}

func (BaseNodeState) Type() protoreflect.EnumType {
	return &file_base_node_proto_enumTypes[0]
}

func (x BaseNodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaseNodeState.Descriptor instead.
func (BaseNodeState) EnumDescriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{0}
}

type CalcType int32

const (
	CalcType_MEAN     CalcType = 0
	CalcType_MEDIAN   CalcType = 1
	CalcType_QUANTILE CalcType = 2
	CalcType_QUARTILE CalcType = 3
)

// Enum value maps for CalcType.
var (
	CalcType_name = map[int32]string{
		0: "MEAN",
		1: "MEDIAN",
		2: "QUANTILE",
		3: "QUARTILE",
	}
	CalcType_value = map[string]int32{
		"MEAN":     0,
		"MEDIAN":   1,
		"QUANTILE": 2,
		"QUARTILE": 3,
	}
)

func (x CalcType) Enum() *CalcType {
	p := new(CalcType)
	*p = x
	return p
}

func (x CalcType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CalcType) Descriptor() protoreflect.EnumDescriptor {
	return file_base_node_proto_enumTypes[1].Descriptor()
}

func (CalcType) Type() protoreflect.EnumType {
	return &file_base_node_proto_enumTypes[1]
}

func (x CalcType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CalcType.Descriptor instead.
func (CalcType) EnumDescriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{1}
}

type Sorting int32

const (
	Sorting_SORTING_DESC Sorting = 0
	Sorting_SORTING_ASC  Sorting = 1
)

// Enum value maps for Sorting.
var (
	Sorting_name = map[int32]string{
		0: "SORTING_DESC",
		1: "SORTING_ASC",
	}
	Sorting_value = map[string]int32{
		"SORTING_DESC": 0,
		"SORTING_ASC":  1,
	}
)

func (x Sorting) Enum() *Sorting {
	p := new(Sorting)
	*p = x
	return p
}

func (x Sorting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sorting) Descriptor() protoreflect.EnumDescriptor {
	return file_base_node_proto_enumTypes[2].Descriptor()
}

func (Sorting) Type() protoreflect.EnumType {
	return &file_base_node_proto_enumTypes[2]
}

func (x Sorting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sorting.Descriptor instead.
func (Sorting) EnumDescriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{2}
}

type SyncState int32

const (
	SyncState_STARTUP         SyncState = 0
	SyncState_HEADER_STARTING SyncState = 1
	SyncState_HEADER          SyncState = 2
	SyncState_BLOCK_STARTING  SyncState = 3
	SyncState_BLOCK           SyncState = 4
	SyncState_DONE            SyncState = 5
)

// Enum value maps for SyncState.
var (
	SyncState_name = map[int32]string{
		0: "STARTUP",
		1: "HEADER_STARTING",
		2: "HEADER",
		3: "BLOCK_STARTING",
		4: "BLOCK",
		5: "DONE",
	}
	SyncState_value = map[string]int32{
		"STARTUP":         0,
		"HEADER_STARTING": 1,
		"HEADER":          2,
		"BLOCK_STARTING":  3,
		"BLOCK":           4,
		"DONE":            5,
	}
)

func (x SyncState) Enum() *SyncState {
	p := new(SyncState)
	*p = x
	return p
}

func (x SyncState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncState) Descriptor() protoreflect.EnumDescriptor {
	return file_base_node_proto_enumTypes[3].Descriptor()
}

func (SyncState) Type() protoreflect.EnumType {
	return &file_base_node_proto_enumTypes[3]
}

func (x SyncState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncState.Descriptor instead.
func (SyncState) EnumDescriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{3}
}

type SubmitTransactionResult int32

const (
	SubmitTransactionResult_NONE                         SubmitTransactionResult = 0
	SubmitTransactionResult_ACCEPTED                     SubmitTransactionResult = 1
	SubmitTransactionResult_NOT_PROCESSABLE_AT_THIS_TIME SubmitTransactionResult = 2
	SubmitTransactionResult_ALREADY_MINED                SubmitTransactionResult = 3
	SubmitTransactionResult_REJECTED                     SubmitTransactionResult = 4
)

// Enum value maps for SubmitTransactionResult.
var (
	SubmitTransactionResult_name = map[int32]string{
		0: "NONE",
		1: "ACCEPTED",
		2: "NOT_PROCESSABLE_AT_THIS_TIME",
		3: "ALREADY_MINED",
		4: "REJECTED",
	}
	SubmitTransactionResult_value = map[string]int32{
		"NONE":                         0,
		"ACCEPTED":                     1,
		"NOT_PROCESSABLE_AT_THIS_TIME": 2,
		"ALREADY_MINED":                3,
		"REJECTED":                     4,
	}
)

func (x SubmitTransactionResult) Enum() *SubmitTransactionResult {
	p := new(SubmitTransactionResult)
	*p = x
	return p
}

func (x SubmitTransactionResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitTransactionResult) Descriptor() protoreflect.EnumDescriptor {
	return file_base_node_proto_enumTypes[4].Descriptor()
}

func (SubmitTransactionResult) Type() protoreflect.EnumType {
	return &file_base_node_proto_enumTypes[4]
}

func (x SubmitTransactionResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitTransactionResult.Descriptor instead.
func (SubmitTransactionResult) EnumDescriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{4}
}

type TransactionLocation int32

const (
	TransactionLocation_UNKNOWN    TransactionLocation = 0
	TransactionLocation_MEMPOOL    TransactionLocation = 1
	TransactionLocation_MINED      TransactionLocation = 2
	TransactionLocation_NOT_STORED TransactionLocation = 3
)

// Enum value maps for TransactionLocation.
var (
	TransactionLocation_name = map[int32]string{
		0: "UNKNOWN",
		1: "MEMPOOL",
		2: "MINED",
		3: "NOT_STORED",
	}
	TransactionLocation_value = map[string]int32{
		"UNKNOWN":    0,
		"MEMPOOL":    1,
		"MINED":      2,
		"NOT_STORED": 3,
	}
)

func (x TransactionLocation) Enum() *TransactionLocation {
	p := new(TransactionLocation)
	*p = x
	return p
}

func (x TransactionLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_base_node_proto_enumTypes[5].Descriptor()
}

func (TransactionLocation) Type() protoreflect.EnumType {
	return &file_base_node_proto_enumTypes[5]
}

func (x TransactionLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionLocation.Descriptor instead.
func (TransactionLocation) EnumDescriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{5}
}

type GetAssetMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetPublicKey []byte `protobuf:"bytes,1,opt,name=asset_public_key,json=assetPublicKey,proto3" json:"asset_public_key,omitempty"`
}

func (x *GetAssetMetadataRequest) Reset() {
	*x = GetAssetMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetMetadataRequest) ProtoMessage() {}

func (x *GetAssetMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetAssetMetadataRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{0}
}

func (x *GetAssetMetadataRequest) GetAssetPublicKey() []byte {
	if x != nil {
		return x.AssetPublicKey
	}
	return nil
}

type GetAssetMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Image           string          `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	OwnerCommitment []byte          `protobuf:"bytes,5,opt,name=owner_commitment,json=ownerCommitment,proto3" json:"owner_commitment,omitempty"`
	Features        *OutputFeatures `protobuf:"bytes,6,opt,name=features,proto3" json:"features,omitempty"`
	MinedHeight     uint64          `protobuf:"varint,7,opt,name=mined_height,json=minedHeight,proto3" json:"mined_height,omitempty"`
	MinedInBlock    []byte          `protobuf:"bytes,8,opt,name=mined_in_block,json=minedInBlock,proto3" json:"mined_in_block,omitempty"`
}

func (x *GetAssetMetadataResponse) Reset() {
	*x = GetAssetMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetMetadataResponse) ProtoMessage() {}

func (x *GetAssetMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetAssetMetadataResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{1}
}

func (x *GetAssetMetadataResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAssetMetadataResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetAssetMetadataResponse) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *GetAssetMetadataResponse) GetOwnerCommitment() []byte {
	if x != nil {
		return x.OwnerCommitment
	}
	return nil
}

func (x *GetAssetMetadataResponse) GetFeatures() *OutputFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *GetAssetMetadataResponse) GetMinedHeight() uint64 {
	if x != nil {
		return x.MinedHeight
	}
	return 0
}

func (x *GetAssetMetadataResponse) GetMinedInBlock() []byte {
	if x != nil {
		return x.MinedInBlock
	}
	return nil
}

type ListAssetRegistrationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Count  uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ListAssetRegistrationsRequest) Reset() {
	*x = ListAssetRegistrationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetRegistrationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetRegistrationsRequest) ProtoMessage() {}

func (x *ListAssetRegistrationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetRegistrationsRequest.ProtoReflect.Descriptor instead.
func (*ListAssetRegistrationsRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{2}
}

func (x *ListAssetRegistrationsRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListAssetRegistrationsRequest) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ListAssetRegistrationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetPublicKey  []byte          `protobuf:"bytes,1,opt,name=asset_public_key,json=assetPublicKey,proto3" json:"asset_public_key,omitempty"`
	UniqueId        []byte          `protobuf:"bytes,2,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	OwnerCommitment []byte          `protobuf:"bytes,3,opt,name=owner_commitment,json=ownerCommitment,proto3" json:"owner_commitment,omitempty"`
	MinedHeight     uint64          `protobuf:"varint,4,opt,name=mined_height,json=minedHeight,proto3" json:"mined_height,omitempty"`
	MinedInBlock    []byte          `protobuf:"bytes,5,opt,name=mined_in_block,json=minedInBlock,proto3" json:"mined_in_block,omitempty"`
	Features        *OutputFeatures `protobuf:"bytes,6,opt,name=features,proto3" json:"features,omitempty"`
	Script          []byte          `protobuf:"bytes,7,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *ListAssetRegistrationsResponse) Reset() {
	*x = ListAssetRegistrationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetRegistrationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetRegistrationsResponse) ProtoMessage() {}

func (x *ListAssetRegistrationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetRegistrationsResponse.ProtoReflect.Descriptor instead.
func (*ListAssetRegistrationsResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{3}
}

func (x *ListAssetRegistrationsResponse) GetAssetPublicKey() []byte {
	if x != nil {
		return x.AssetPublicKey
	}
	return nil
}

func (x *ListAssetRegistrationsResponse) GetUniqueId() []byte {
	if x != nil {
		return x.UniqueId
	}
	return nil
}

func (x *ListAssetRegistrationsResponse) GetOwnerCommitment() []byte {
	if x != nil {
		return x.OwnerCommitment
	}
	return nil
}

func (x *ListAssetRegistrationsResponse) GetMinedHeight() uint64 {
	if x != nil {
		return x.MinedHeight
	}
	return 0
}

func (x *ListAssetRegistrationsResponse) GetMinedInBlock() []byte {
	if x != nil {
		return x.MinedInBlock
	}
	return nil
}

func (x *ListAssetRegistrationsResponse) GetFeatures() *OutputFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *ListAssetRegistrationsResponse) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

type GetTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetPublicKey []byte `protobuf:"bytes,1,opt,name=asset_public_key,json=assetPublicKey,proto3" json:"asset_public_key,omitempty"`
	// Optionally get a set of specific unique_ids
	UniqueIds [][]byte `protobuf:"bytes,2,rep,name=unique_ids,json=uniqueIds,proto3" json:"unique_ids,omitempty"`
}

func (x *GetTokensRequest) Reset() {
	*x = GetTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokensRequest) ProtoMessage() {}

func (x *GetTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokensRequest.ProtoReflect.Descriptor instead.
func (*GetTokensRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{4}
}

func (x *GetTokensRequest) GetAssetPublicKey() []byte {
	if x != nil {
		return x.AssetPublicKey
	}
	return nil
}

func (x *GetTokensRequest) GetUniqueIds() [][]byte {
	if x != nil {
		return x.UniqueIds
	}
	return nil
}

type GetTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId        []byte          `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	AssetPublicKey  []byte          `protobuf:"bytes,2,opt,name=asset_public_key,json=assetPublicKey,proto3" json:"asset_public_key,omitempty"`
	OwnerCommitment []byte          `protobuf:"bytes,3,opt,name=owner_commitment,json=ownerCommitment,proto3" json:"owner_commitment,omitempty"`
	MinedInBlock    []byte          `protobuf:"bytes,4,opt,name=mined_in_block,json=minedInBlock,proto3" json:"mined_in_block,omitempty"`
	MinedHeight     uint64          `protobuf:"varint,5,opt,name=mined_height,json=minedHeight,proto3" json:"mined_height,omitempty"`
	Features        *OutputFeatures `protobuf:"bytes,6,opt,name=features,proto3" json:"features,omitempty"`
	Script          []byte          `protobuf:"bytes,7,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *GetTokensResponse) Reset() {
	*x = GetTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokensResponse) ProtoMessage() {}

func (x *GetTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokensResponse.ProtoReflect.Descriptor instead.
func (*GetTokensResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{5}
}

func (x *GetTokensResponse) GetUniqueId() []byte {
	if x != nil {
		return x.UniqueId
	}
	return nil
}

func (x *GetTokensResponse) GetAssetPublicKey() []byte {
	if x != nil {
		return x.AssetPublicKey
	}
	return nil
}

func (x *GetTokensResponse) GetOwnerCommitment() []byte {
	if x != nil {
		return x.OwnerCommitment
	}
	return nil
}

func (x *GetTokensResponse) GetMinedInBlock() []byte {
	if x != nil {
		return x.MinedInBlock
	}
	return nil
}

func (x *GetTokensResponse) GetMinedHeight() uint64 {
	if x != nil {
		return x.MinedHeight
	}
	return 0
}

func (x *GetTokensResponse) GetFeatures() *OutputFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *GetTokensResponse) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

type SubmitBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *SubmitBlockResponse) Reset() {
	*x = SubmitBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBlockResponse) ProtoMessage() {}

func (x *SubmitBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBlockResponse.ProtoReflect.Descriptor instead.
func (*SubmitBlockResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{6}
}

func (x *SubmitBlockResponse) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type BlockBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderBlob []byte `protobuf:"bytes,1,opt,name=header_blob,json=headerBlob,proto3" json:"header_blob,omitempty"`
	BodyBlob   []byte `protobuf:"bytes,2,opt,name=body_blob,json=bodyBlob,proto3" json:"body_blob,omitempty"`
}

func (x *BlockBlobRequest) Reset() {
	*x = BlockBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBlobRequest) ProtoMessage() {}

func (x *BlockBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBlobRequest.ProtoReflect.Descriptor instead.
func (*BlockBlobRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{7}
}

func (x *BlockBlobRequest) GetHeaderBlob() []byte {
	if x != nil {
		return x.HeaderBlob
	}
	return nil
}

func (x *BlockBlobRequest) GetBodyBlob() []byte {
	if x != nil {
		return x.BodyBlob
	}
	return nil
}

// / return type of GetTipInfo
type TipInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata            *MetaData     `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	InitialSyncAchieved bool          `protobuf:"varint,2,opt,name=initial_sync_achieved,json=initialSyncAchieved,proto3" json:"initial_sync_achieved,omitempty"`
	BaseNodeState       BaseNodeState `protobuf:"varint,3,opt,name=base_node_state,json=baseNodeState,proto3,enum=tari.rpc.BaseNodeState" json:"base_node_state,omitempty"`
	FailedCheckpoints   bool          `protobuf:"varint,4,opt,name=failed_checkpoints,json=failedCheckpoints,proto3" json:"failed_checkpoints,omitempty"`
}

func (x *TipInfoResponse) Reset() {
	*x = TipInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipInfoResponse) ProtoMessage() {}

func (x *TipInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipInfoResponse.ProtoReflect.Descriptor instead.
func (*TipInfoResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{8}
}

func (x *TipInfoResponse) GetMetadata() *MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TipInfoResponse) GetInitialSyncAchieved() bool {
	if x != nil {
		return x.InitialSyncAchieved
	}
	return false
}

func (x *TipInfoResponse) GetBaseNodeState() BaseNodeState {
	if x != nil {
		return x.BaseNodeState
	}
	return BaseNodeState_START_UP
}

func (x *TipInfoResponse) GetFailedCheckpoints() bool {
	if x != nil {
		return x.FailedCheckpoints
	}
	return false
}

// / return type of GetNewBlockTemplate
type NewBlockTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewBlockTemplate    *NewBlockTemplate `protobuf:"bytes,1,opt,name=new_block_template,json=newBlockTemplate,proto3" json:"new_block_template,omitempty"`
	InitialSyncAchieved bool              `protobuf:"varint,3,opt,name=initial_sync_achieved,json=initialSyncAchieved,proto3" json:"initial_sync_achieved,omitempty"`
	MinerData           *MinerData        `protobuf:"bytes,4,opt,name=miner_data,json=minerData,proto3" json:"miner_data,omitempty"`
}

func (x *NewBlockTemplateResponse) Reset() {
	*x = NewBlockTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBlockTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBlockTemplateResponse) ProtoMessage() {}

func (x *NewBlockTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBlockTemplateResponse.ProtoReflect.Descriptor instead.
func (*NewBlockTemplateResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{9}
}

func (x *NewBlockTemplateResponse) GetNewBlockTemplate() *NewBlockTemplate {
	if x != nil {
		return x.NewBlockTemplate
	}
	return nil
}

func (x *NewBlockTemplateResponse) GetInitialSyncAchieved() bool {
	if x != nil {
		return x.InitialSyncAchieved
	}
	return false
}

func (x *NewBlockTemplateResponse) GetMinerData() *MinerData {
	if x != nil {
		return x.MinerData
	}
	return nil
}

// / return type of NewBlockTemplateRequest
type NewBlockTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algo *PowAlgo `protobuf:"bytes,1,opt,name=algo,proto3" json:"algo,omitempty"`
	// This field should be moved to optional once optional keyword is standard
	MaxWeight uint64 `protobuf:"varint,2,opt,name=max_weight,json=maxWeight,proto3" json:"max_weight,omitempty"`
}

func (x *NewBlockTemplateRequest) Reset() {
	*x = NewBlockTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBlockTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBlockTemplateRequest) ProtoMessage() {}

func (x *NewBlockTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBlockTemplateRequest.ProtoReflect.Descriptor instead.
func (*NewBlockTemplateRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{10}
}

func (x *NewBlockTemplateRequest) GetAlgo() *PowAlgo {
	if x != nil {
		return x.Algo
	}
	return nil
}

func (x *NewBlockTemplateRequest) GetMaxWeight() uint64 {
	if x != nil {
		return x.MaxWeight
	}
	return 0
}

// / return type of NewBlockTemplateRequest
type GetNewBlockTemplateWithCoinbasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algo *PowAlgo `protobuf:"bytes,1,opt,name=algo,proto3" json:"algo,omitempty"`
	// This field should be moved to optional once optional keyword is standard
	MaxWeight uint64              `protobuf:"varint,2,opt,name=max_weight,json=maxWeight,proto3" json:"max_weight,omitempty"`
	Coinbases []*NewBlockCoinbase `protobuf:"bytes,3,rep,name=coinbases,proto3" json:"coinbases,omitempty"`
}

func (x *GetNewBlockTemplateWithCoinbasesRequest) Reset() {
	*x = GetNewBlockTemplateWithCoinbasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewBlockTemplateWithCoinbasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewBlockTemplateWithCoinbasesRequest) ProtoMessage() {}

func (x *GetNewBlockTemplateWithCoinbasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewBlockTemplateWithCoinbasesRequest.ProtoReflect.Descriptor instead.
func (*GetNewBlockTemplateWithCoinbasesRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{11}
}

func (x *GetNewBlockTemplateWithCoinbasesRequest) GetAlgo() *PowAlgo {
	if x != nil {
		return x.Algo
	}
	return nil
}

func (x *GetNewBlockTemplateWithCoinbasesRequest) GetMaxWeight() uint64 {
	if x != nil {
		return x.MaxWeight
	}
	return 0
}

func (x *GetNewBlockTemplateWithCoinbasesRequest) GetCoinbases() []*NewBlockCoinbase {
	if x != nil {
		return x.Coinbases
	}
	return nil
}

// / request  type of GetNewBlockWithCoinbasesRequest
type GetNewBlockWithCoinbasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewTemplate *NewBlockTemplate   `protobuf:"bytes,1,opt,name=new_template,json=newTemplate,proto3" json:"new_template,omitempty"`
	Coinbases   []*NewBlockCoinbase `protobuf:"bytes,2,rep,name=coinbases,proto3" json:"coinbases,omitempty"`
}

func (x *GetNewBlockWithCoinbasesRequest) Reset() {
	*x = GetNewBlockWithCoinbasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewBlockWithCoinbasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewBlockWithCoinbasesRequest) ProtoMessage() {}

func (x *GetNewBlockWithCoinbasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewBlockWithCoinbasesRequest.ProtoReflect.Descriptor instead.
func (*GetNewBlockWithCoinbasesRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{12}
}

func (x *GetNewBlockWithCoinbasesRequest) GetNewTemplate() *NewBlockTemplate {
	if x != nil {
		return x.NewTemplate
	}
	return nil
}

func (x *GetNewBlockWithCoinbasesRequest) GetCoinbases() []*NewBlockCoinbase {
	if x != nil {
		return x.Coinbases
	}
	return nil
}

type NewBlockCoinbase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address            string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Value              uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	StealthPayment     bool   `protobuf:"varint,3,opt,name=stealth_payment,json=stealthPayment,proto3" json:"stealth_payment,omitempty"`
	RevealedValueProof bool   `protobuf:"varint,4,opt,name=revealed_value_proof,json=revealedValueProof,proto3" json:"revealed_value_proof,omitempty"`
	CoinbaseExtra      []byte `protobuf:"bytes,5,opt,name=coinbase_extra,json=coinbaseExtra,proto3" json:"coinbase_extra,omitempty"`
}

func (x *NewBlockCoinbase) Reset() {
	*x = NewBlockCoinbase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBlockCoinbase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBlockCoinbase) ProtoMessage() {}

func (x *NewBlockCoinbase) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBlockCoinbase.ProtoReflect.Descriptor instead.
func (*NewBlockCoinbase) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{13}
}

func (x *NewBlockCoinbase) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NewBlockCoinbase) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *NewBlockCoinbase) GetStealthPayment() bool {
	if x != nil {
		return x.StealthPayment
	}
	return false
}

func (x *NewBlockCoinbase) GetRevealedValueProof() bool {
	if x != nil {
		return x.RevealedValueProof
	}
	return false
}

func (x *NewBlockCoinbase) GetCoinbaseExtra() []byte {
	if x != nil {
		return x.CoinbaseExtra
	}
	return nil
}

// Network difficulty response
type NetworkDifficultyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difficulty                     uint64   `protobuf:"varint,1,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	EstimatedHashRate              uint64   `protobuf:"varint,2,opt,name=estimated_hash_rate,json=estimatedHashRate,proto3" json:"estimated_hash_rate,omitempty"`
	Height                         uint64   `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp                      uint64   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PowAlgo                        uint64   `protobuf:"varint,5,opt,name=pow_algo,json=powAlgo,proto3" json:"pow_algo,omitempty"`
	Sha3XEstimatedHashRate         uint64   `protobuf:"varint,6,opt,name=sha3x_estimated_hash_rate,json=sha3xEstimatedHashRate,proto3" json:"sha3x_estimated_hash_rate,omitempty"`
	MoneroRandomxEstimatedHashRate uint64   `protobuf:"varint,7,opt,name=monero_randomx_estimated_hash_rate,json=moneroRandomxEstimatedHashRate,proto3" json:"monero_randomx_estimated_hash_rate,omitempty"`
	TariRandomxEstimatedHashRate   uint64   `protobuf:"varint,10,opt,name=tari_randomx_estimated_hash_rate,json=tariRandomxEstimatedHashRate,proto3" json:"tari_randomx_estimated_hash_rate,omitempty"`
	NumCoinbases                   uint64   `protobuf:"varint,8,opt,name=num_coinbases,json=numCoinbases,proto3" json:"num_coinbases,omitempty"`
	CoinbaseExtras                 [][]byte `protobuf:"bytes,9,rep,name=coinbase_extras,json=coinbaseExtras,proto3" json:"coinbase_extras,omitempty"`
}

func (x *NetworkDifficultyResponse) Reset() {
	*x = NetworkDifficultyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkDifficultyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkDifficultyResponse) ProtoMessage() {}

func (x *NetworkDifficultyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkDifficultyResponse.ProtoReflect.Descriptor instead.
func (*NetworkDifficultyResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{14}
}

func (x *NetworkDifficultyResponse) GetDifficulty() uint64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *NetworkDifficultyResponse) GetEstimatedHashRate() uint64 {
	if x != nil {
		return x.EstimatedHashRate
	}
	return 0
}

func (x *NetworkDifficultyResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *NetworkDifficultyResponse) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NetworkDifficultyResponse) GetPowAlgo() uint64 {
	if x != nil {
		return x.PowAlgo
	}
	return 0
}

func (x *NetworkDifficultyResponse) GetSha3XEstimatedHashRate() uint64 {
	if x != nil {
		return x.Sha3XEstimatedHashRate
	}
	return 0
}

func (x *NetworkDifficultyResponse) GetMoneroRandomxEstimatedHashRate() uint64 {
	if x != nil {
		return x.MoneroRandomxEstimatedHashRate
	}
	return 0
}

func (x *NetworkDifficultyResponse) GetTariRandomxEstimatedHashRate() uint64 {
	if x != nil {
		return x.TariRandomxEstimatedHashRate
	}
	return 0
}

func (x *NetworkDifficultyResponse) GetNumCoinbases() uint64 {
	if x != nil {
		return x.NumCoinbases
	}
	return 0
}

func (x *NetworkDifficultyResponse) GetCoinbaseExtras() [][]byte {
	if x != nil {
		return x.CoinbaseExtras
	}
	return nil
}

// A generic single value response for a specific height
type ValueAtHeightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CirculatingSupply uint64 `protobuf:"varint,1,opt,name=circulating_supply,json=circulatingSupply,proto3" json:"circulating_supply,omitempty"`
	SpendableSupply   uint64 `protobuf:"varint,2,opt,name=spendable_supply,json=spendableSupply,proto3" json:"spendable_supply,omitempty"`
	Height            uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ValueAtHeightResponse) Reset() {
	*x = ValueAtHeightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueAtHeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueAtHeightResponse) ProtoMessage() {}

func (x *ValueAtHeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueAtHeightResponse.ProtoReflect.Descriptor instead.
func (*ValueAtHeightResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{15}
}

func (x *ValueAtHeightResponse) GetCirculatingSupply() uint64 {
	if x != nil {
		return x.CirculatingSupply
	}
	return 0
}

func (x *ValueAtHeightResponse) GetSpendableSupply() uint64 {
	if x != nil {
		return x.SpendableSupply
	}
	return 0
}

func (x *ValueAtHeightResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

// A generic uint value
type IntegerValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IntegerValue) Reset() {
	*x = IntegerValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerValue) ProtoMessage() {}

func (x *IntegerValue) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerValue.ProtoReflect.Descriptor instead.
func (*IntegerValue) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{16}
}

func (x *IntegerValue) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A generic String value
type StringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringValue) Reset() {
	*x = StringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValue) ProtoMessage() {}

func (x *StringValue) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValue.ProtoReflect.Descriptor instead.
func (*StringValue) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{17}
}

func (x *StringValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// / GetBlockSize / GetBlockFees Request
// / Either the starting and ending heights OR the from_tip param must be specified
type BlockGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height from the chain tip (optional)
	FromTip uint64 `protobuf:"varint,1,opt,name=from_tip,json=fromTip,proto3" json:"from_tip,omitempty"`
	// The starting height (optional)
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// The ending height (optional)
	EndHeight uint64 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	// / The type of calculation required (optional)
	// / Defaults to median
	// / median, mean, quartile, quantile
	CalcType CalcType `protobuf:"varint,4,opt,name=calc_type,json=calcType,proto3,enum=tari.rpc.CalcType" json:"calc_type,omitempty"`
}

func (x *BlockGroupRequest) Reset() {
	*x = BlockGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockGroupRequest) ProtoMessage() {}

func (x *BlockGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockGroupRequest.ProtoReflect.Descriptor instead.
func (*BlockGroupRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{18}
}

func (x *BlockGroupRequest) GetFromTip() uint64 {
	if x != nil {
		return x.FromTip
	}
	return 0
}

func (x *BlockGroupRequest) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *BlockGroupRequest) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

func (x *BlockGroupRequest) GetCalcType() CalcType {
	if x != nil {
		return x.CalcType
	}
	return CalcType_MEAN
}

// / GetBlockSize / GetBlockFees  Response
type BlockGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    []float64 `protobuf:"fixed64,1,rep,packed,name=value,proto3" json:"value,omitempty"`
	CalcType CalcType  `protobuf:"varint,2,opt,name=calc_type,json=calcType,proto3,enum=tari.rpc.CalcType" json:"calc_type,omitempty"`
}

func (x *BlockGroupResponse) Reset() {
	*x = BlockGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockGroupResponse) ProtoMessage() {}

func (x *BlockGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockGroupResponse.ProtoReflect.Descriptor instead.
func (*BlockGroupResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{19}
}

func (x *BlockGroupResponse) GetValue() []float64 {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BlockGroupResponse) GetCalcType() CalcType {
	if x != nil {
		return x.CalcType
	}
	return CalcType_MEAN
}

// The request used for querying a function that requires a height, either between 2 points or from the chain tip
// If start_height and end_height are set and > 0, they take precedence, otherwise from_tip is used
type HeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height from the chain tip (optional)
	FromTip uint64 `protobuf:"varint,1,opt,name=from_tip,json=fromTip,proto3" json:"from_tip,omitempty"`
	// The starting height (optional)
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// The ending height (optional)
	EndHeight uint64 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (x *HeightRequest) Reset() {
	*x = HeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeightRequest) ProtoMessage() {}

func (x *HeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeightRequest.ProtoReflect.Descriptor instead.
func (*HeightRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{20}
}

func (x *HeightRequest) GetFromTip() uint64 {
	if x != nil {
		return x.FromTip
	}
	return 0
}

func (x *HeightRequest) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *HeightRequest) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

// The return type of the rpc GetBlockTiming
type BlockTimingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Max uint64  `protobuf:"varint,1,opt,name=max,proto3" json:"max,omitempty"`
	Min uint64  `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`
	Avg float64 `protobuf:"fixed64,3,opt,name=avg,proto3" json:"avg,omitempty"`
}

func (x *BlockTimingResponse) Reset() {
	*x = BlockTimingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockTimingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockTimingResponse) ProtoMessage() {}

func (x *BlockTimingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockTimingResponse.ProtoReflect.Descriptor instead.
func (*BlockTimingResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{21}
}

func (x *BlockTimingResponse) GetMax() uint64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *BlockTimingResponse) GetMin() uint64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *BlockTimingResponse) GetAvg() float64 {
	if x != nil {
		return x.Avg
	}
	return 0
}

// Request that returns a header based by hash
type GetHeaderByHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the block header
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetHeaderByHashRequest) Reset() {
	*x = GetHeaderByHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeaderByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeaderByHashRequest) ProtoMessage() {}

func (x *GetHeaderByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeaderByHashRequest.ProtoReflect.Descriptor instead.
func (*GetHeaderByHashRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{22}
}

func (x *GetHeaderByHashRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type BlockHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The block header
	Header *BlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The number of blocks from the tip of this block (a.k.a depth)
	Confirmations uint64 `protobuf:"varint,2,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// The block reward i.e mining reward + fees
	Reward uint64 `protobuf:"varint,3,opt,name=reward,proto3" json:"reward,omitempty"`
	// Achieved difficulty
	Difficulty uint64 `protobuf:"varint,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	// The number of transactions contained in the block
	NumTransactions uint32 `protobuf:"varint,5,opt,name=num_transactions,json=numTransactions,proto3" json:"num_transactions,omitempty"`
}

func (x *BlockHeaderResponse) Reset() {
	*x = BlockHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeaderResponse) ProtoMessage() {}

func (x *BlockHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeaderResponse.ProtoReflect.Descriptor instead.
func (*BlockHeaderResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{23}
}

func (x *BlockHeaderResponse) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockHeaderResponse) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *BlockHeaderResponse) GetReward() uint64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *BlockHeaderResponse) GetDifficulty() uint64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *BlockHeaderResponse) GetNumTransactions() uint32 {
	if x != nil {
		return x.NumTransactions
	}
	return 0
}

// The request used for querying headers from the base node. The parameters `from_height` and `num_headers` can be used
// to page through the current best chain.
type ListHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height to start at. Depending on sorting, will either default to use the tip or genesis block, for `SORTING_DESC`
	// and `SORTING_ASC` respectively, if a value is not provided. The first header returned will be at this height
	// followed by `num_headers` - 1 headers in the direction specified by `sorting`. If greater than the current tip,
	// the current tip will be used.
	FromHeight uint64 `protobuf:"varint,1,opt,name=from_height,json=fromHeight,proto3" json:"from_height,omitempty"`
	// The number of headers to return. If not specified, it will default to 10
	NumHeaders uint64 `protobuf:"varint,2,opt,name=num_headers,json=numHeaders,proto3" json:"num_headers,omitempty"`
	// The ordering to return the headers in. If not specified will default to SORTING_DESC. Note that if `from_height`
	// is not specified or is 0, if `sorting` is SORTING_DESC, the tip will be used as `from_height`, otherwise the
	// block at height 0 will be used.
	Sorting Sorting `protobuf:"varint,3,opt,name=sorting,proto3,enum=tari.rpc.Sorting" json:"sorting,omitempty"`
}

func (x *ListHeadersRequest) Reset() {
	*x = ListHeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHeadersRequest) ProtoMessage() {}

func (x *ListHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHeadersRequest.ProtoReflect.Descriptor instead.
func (*ListHeadersRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{24}
}

func (x *ListHeadersRequest) GetFromHeight() uint64 {
	if x != nil {
		return x.FromHeight
	}
	return 0
}

func (x *ListHeadersRequest) GetNumHeaders() uint64 {
	if x != nil {
		return x.NumHeaders
	}
	return 0
}

func (x *ListHeadersRequest) GetSorting() Sorting {
	if x != nil {
		return x.Sorting
	}
	return Sorting_SORTING_DESC
}

// The request used for querying blocks in the base node's current best chain. Currently only querying by height is
// available. Multiple blocks may be queried.e.g. [189092,100023,122424]. The order in which they are returned is not
// guaranteed.
type GetBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heights []uint64 `protobuf:"varint,1,rep,packed,name=heights,proto3" json:"heights,omitempty"`
}

func (x *GetBlocksRequest) Reset() {
	*x = GetBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksRequest) ProtoMessage() {}

func (x *GetBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetBlocksRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{25}
}

func (x *GetBlocksRequest) GetHeights() []uint64 {
	if x != nil {
		return x.Heights
	}
	return nil
}

// The return type of the rpc GetBlocks. Blocks are not guaranteed to be returned in the order requested.
type GetBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*HistoricalBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *GetBlocksResponse) Reset() {
	*x = GetBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksResponse) ProtoMessage() {}

func (x *GetBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksResponse.ProtoReflect.Descriptor instead.
func (*GetBlocksResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{26}
}

func (x *GetBlocksResponse) GetBlocks() []*HistoricalBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current chain height, or the block number of the longest valid chain, or `None` if there is no chain
	BestBlockHeight uint64 `protobuf:"varint,1,opt,name=best_block_height,json=bestBlockHeight,proto3" json:"best_block_height,omitempty"`
	// The block hash of the current tip of the longest valid chain, or `None` for an empty chain
	BestBlockHash []byte `protobuf:"bytes,2,opt,name=best_block_hash,json=bestBlockHash,proto3" json:"best_block_hash,omitempty"`
	// The current geometric mean of the pow of the chain tip, or `None` if there is no chain
	AccumulatedDifficulty []byte `protobuf:"bytes,5,opt,name=accumulated_difficulty,json=accumulatedDifficulty,proto3" json:"accumulated_difficulty,omitempty"`
	// This is the min height this node can provide complete blocks for. A 0 here means this node is archival and can provide complete blocks for every height.
	PrunedHeight uint64 `protobuf:"varint,6,opt,name=pruned_height,json=prunedHeight,proto3" json:"pruned_height,omitempty"`
	Timestamp    uint64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *MetaData) Reset() {
	*x = MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaData) ProtoMessage() {}

func (x *MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaData.ProtoReflect.Descriptor instead.
func (*MetaData) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{27}
}

func (x *MetaData) GetBestBlockHeight() uint64 {
	if x != nil {
		return x.BestBlockHeight
	}
	return 0
}

func (x *MetaData) GetBestBlockHash() []byte {
	if x != nil {
		return x.BestBlockHash
	}
	return nil
}

func (x *MetaData) GetAccumulatedDifficulty() []byte {
	if x != nil {
		return x.AccumulatedDifficulty
	}
	return nil
}

func (x *MetaData) GetPrunedHeight() uint64 {
	if x != nil {
		return x.PrunedHeight
	}
	return 0
}

func (x *MetaData) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type SyncInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TipHeight   uint64   `protobuf:"varint,1,opt,name=tip_height,json=tipHeight,proto3" json:"tip_height,omitempty"`
	LocalHeight uint64   `protobuf:"varint,2,opt,name=local_height,json=localHeight,proto3" json:"local_height,omitempty"`
	PeerNodeId  [][]byte `protobuf:"bytes,3,rep,name=peer_node_id,json=peerNodeId,proto3" json:"peer_node_id,omitempty"`
}

func (x *SyncInfoResponse) Reset() {
	*x = SyncInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncInfoResponse) ProtoMessage() {}

func (x *SyncInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncInfoResponse.ProtoReflect.Descriptor instead.
func (*SyncInfoResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{28}
}

func (x *SyncInfoResponse) GetTipHeight() uint64 {
	if x != nil {
		return x.TipHeight
	}
	return 0
}

func (x *SyncInfoResponse) GetLocalHeight() uint64 {
	if x != nil {
		return x.LocalHeight
	}
	return 0
}

func (x *SyncInfoResponse) GetPeerNodeId() [][]byte {
	if x != nil {
		return x.PeerNodeId
	}
	return nil
}

type SyncProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TipHeight             uint64    `protobuf:"varint,1,opt,name=tip_height,json=tipHeight,proto3" json:"tip_height,omitempty"`
	LocalHeight           uint64    `protobuf:"varint,2,opt,name=local_height,json=localHeight,proto3" json:"local_height,omitempty"`
	State                 SyncState `protobuf:"varint,3,opt,name=state,proto3,enum=tari.rpc.SyncState" json:"state,omitempty"`
	ShortDesc             string    `protobuf:"bytes,4,opt,name=short_desc,json=shortDesc,proto3" json:"short_desc,omitempty"`
	InitialConnectedPeers uint64    `protobuf:"varint,5,opt,name=initial_connected_peers,json=initialConnectedPeers,proto3" json:"initial_connected_peers,omitempty"`
}

func (x *SyncProgressResponse) Reset() {
	*x = SyncProgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncProgressResponse) ProtoMessage() {}

func (x *SyncProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncProgressResponse.ProtoReflect.Descriptor instead.
func (*SyncProgressResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{29}
}

func (x *SyncProgressResponse) GetTipHeight() uint64 {
	if x != nil {
		return x.TipHeight
	}
	return 0
}

func (x *SyncProgressResponse) GetLocalHeight() uint64 {
	if x != nil {
		return x.LocalHeight
	}
	return 0
}

func (x *SyncProgressResponse) GetState() SyncState {
	if x != nil {
		return x.State
	}
	return SyncState_STARTUP
}

func (x *SyncProgressResponse) GetShortDesc() string {
	if x != nil {
		return x.ShortDesc
	}
	return ""
}

func (x *SyncProgressResponse) GetInitialConnectedPeers() uint64 {
	if x != nil {
		return x.InitialConnectedPeers
	}
	return 0
}

// This is the message that is returned for a miner after it asks for a new block.
type GetNewBlockResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the header hash of the completed block
	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// This is the completed block
	Block           *Block     `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	MergeMiningHash []byte     `protobuf:"bytes,3,opt,name=merge_mining_hash,json=mergeMiningHash,proto3" json:"merge_mining_hash,omitempty"`
	TariUniqueId    []byte     `protobuf:"bytes,4,opt,name=tari_unique_id,json=tariUniqueId,proto3" json:"tari_unique_id,omitempty"`
	MinerData       *MinerData `protobuf:"bytes,5,opt,name=miner_data,json=minerData,proto3" json:"miner_data,omitempty"`
	VmKey           []byte     `protobuf:"bytes,6,opt,name=vm_key,json=vmKey,proto3" json:"vm_key,omitempty"`
}

func (x *GetNewBlockResult) Reset() {
	*x = GetNewBlockResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewBlockResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewBlockResult) ProtoMessage() {}

func (x *GetNewBlockResult) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewBlockResult.ProtoReflect.Descriptor instead.
func (*GetNewBlockResult) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{30}
}

func (x *GetNewBlockResult) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *GetNewBlockResult) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *GetNewBlockResult) GetMergeMiningHash() []byte {
	if x != nil {
		return x.MergeMiningHash
	}
	return nil
}

func (x *GetNewBlockResult) GetTariUniqueId() []byte {
	if x != nil {
		return x.TariUniqueId
	}
	return nil
}

func (x *GetNewBlockResult) GetMinerData() *MinerData {
	if x != nil {
		return x.MinerData
	}
	return nil
}

func (x *GetNewBlockResult) GetVmKey() []byte {
	if x != nil {
		return x.VmKey
	}
	return nil
}

// This is the message that is returned for a miner after it asks for a new block.
type GetNewBlockBlobResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the header hash of the completed block
	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// This is the completed block's header
	Header []byte `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// This is the completed block's body
	BlockBody       []byte `protobuf:"bytes,3,opt,name=block_body,json=blockBody,proto3" json:"block_body,omitempty"`
	MergeMiningHash []byte `protobuf:"bytes,4,opt,name=merge_mining_hash,json=mergeMiningHash,proto3" json:"merge_mining_hash,omitempty"`
	UtxoMr          []byte `protobuf:"bytes,5,opt,name=utxo_mr,json=utxoMr,proto3" json:"utxo_mr,omitempty"`
	TariUniqueId    []byte `protobuf:"bytes,6,opt,name=tari_unique_id,json=tariUniqueId,proto3" json:"tari_unique_id,omitempty"`
}

func (x *GetNewBlockBlobResult) Reset() {
	*x = GetNewBlockBlobResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewBlockBlobResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewBlockBlobResult) ProtoMessage() {}

func (x *GetNewBlockBlobResult) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewBlockBlobResult.ProtoReflect.Descriptor instead.
func (*GetNewBlockBlobResult) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{31}
}

func (x *GetNewBlockBlobResult) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *GetNewBlockBlobResult) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetNewBlockBlobResult) GetBlockBody() []byte {
	if x != nil {
		return x.BlockBody
	}
	return nil
}

func (x *GetNewBlockBlobResult) GetMergeMiningHash() []byte {
	if x != nil {
		return x.MergeMiningHash
	}
	return nil
}

func (x *GetNewBlockBlobResult) GetUtxoMr() []byte {
	if x != nil {
		return x.UtxoMr
	}
	return nil
}

func (x *GetNewBlockBlobResult) GetTariUniqueId() []byte {
	if x != nil {
		return x.TariUniqueId
	}
	return nil
}

// This is mining data for the miner asking for a new block
type MinerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algo             *PowAlgo `protobuf:"bytes,1,opt,name=algo,proto3" json:"algo,omitempty"`
	TargetDifficulty uint64   `protobuf:"varint,2,opt,name=target_difficulty,json=targetDifficulty,proto3" json:"target_difficulty,omitempty"`
	Reward           uint64   `protobuf:"varint,3,opt,name=reward,proto3" json:"reward,omitempty"`
	// bytes merge_mining_hash =4;
	TotalFees uint64 `protobuf:"varint,5,opt,name=total_fees,json=totalFees,proto3" json:"total_fees,omitempty"`
}

func (x *MinerData) Reset() {
	*x = MinerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerData) ProtoMessage() {}

func (x *MinerData) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerData.ProtoReflect.Descriptor instead.
func (*MinerData) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{32}
}

func (x *MinerData) GetAlgo() *PowAlgo {
	if x != nil {
		return x.Algo
	}
	return nil
}

func (x *MinerData) GetTargetDifficulty() uint64 {
	if x != nil {
		return x.TargetDifficulty
	}
	return 0
}

func (x *MinerData) GetReward() uint64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *MinerData) GetTotalFees() uint64 {
	if x != nil {
		return x.TotalFees
	}
	return 0
}

// This is the request type for the Search Kernels rpc
type SearchKernelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures []*Signature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SearchKernelsRequest) Reset() {
	*x = SearchKernelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchKernelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchKernelsRequest) ProtoMessage() {}

func (x *SearchKernelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchKernelsRequest.ProtoReflect.Descriptor instead.
func (*SearchKernelsRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{33}
}

func (x *SearchKernelsRequest) GetSignatures() []*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// This is the request type for the Search Utxo rpc
type SearchUtxosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commitments [][]byte `protobuf:"bytes,1,rep,name=commitments,proto3" json:"commitments,omitempty"`
}

func (x *SearchUtxosRequest) Reset() {
	*x = SearchUtxosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUtxosRequest) ProtoMessage() {}

func (x *SearchUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUtxosRequest.ProtoReflect.Descriptor instead.
func (*SearchUtxosRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{34}
}

func (x *SearchUtxosRequest) GetCommitments() [][]byte {
	if x != nil {
		return x.Commitments
	}
	return nil
}

type FetchMatchingUtxosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (x *FetchMatchingUtxosRequest) Reset() {
	*x = FetchMatchingUtxosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMatchingUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMatchingUtxosRequest) ProtoMessage() {}

func (x *FetchMatchingUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMatchingUtxosRequest.ProtoReflect.Descriptor instead.
func (*FetchMatchingUtxosRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{35}
}

func (x *FetchMatchingUtxosRequest) GetHashes() [][]byte {
	if x != nil {
		return x.Hashes
	}
	return nil
}

type FetchMatchingUtxosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *TransactionOutput `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *FetchMatchingUtxosResponse) Reset() {
	*x = FetchMatchingUtxosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMatchingUtxosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMatchingUtxosResponse) ProtoMessage() {}

func (x *FetchMatchingUtxosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMatchingUtxosResponse.ProtoReflect.Descriptor instead.
func (*FetchMatchingUtxosResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{36}
}

func (x *FetchMatchingUtxosResponse) GetOutput() *TransactionOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

// This is the request type of the get all peers rpc call
type GetPeersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *GetPeersResponse) Reset() {
	*x = GetPeersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersResponse) ProtoMessage() {}

func (x *GetPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersResponse.ProtoReflect.Descriptor instead.
func (*GetPeersResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{37}
}

func (x *GetPeersResponse) GetPeer() *Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type GetPeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPeersRequest) Reset() {
	*x = GetPeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersRequest) ProtoMessage() {}

func (x *GetPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersRequest.ProtoReflect.Descriptor instead.
func (*GetPeersRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{38}
}

type SubmitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *SubmitTransactionRequest) Reset() {
	*x = SubmitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionRequest) ProtoMessage() {}

func (x *SubmitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{39}
}

func (x *SubmitTransactionRequest) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type SubmitTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SubmitTransactionResult `protobuf:"varint,1,opt,name=result,proto3,enum=tari.rpc.SubmitTransactionResult" json:"result,omitempty"`
}

func (x *SubmitTransactionResponse) Reset() {
	*x = SubmitTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionResponse) ProtoMessage() {}

func (x *SubmitTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionResponse.ProtoReflect.Descriptor instead.
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{40}
}

func (x *SubmitTransactionResponse) GetResult() SubmitTransactionResult {
	if x != nil {
		return x.Result
	}
	return SubmitTransactionResult_NONE
}

type GetMempoolTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMempoolTransactionsRequest) Reset() {
	*x = GetMempoolTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMempoolTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMempoolTransactionsRequest) ProtoMessage() {}

func (x *GetMempoolTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMempoolTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetMempoolTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{41}
}

type GetMempoolTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *GetMempoolTransactionsResponse) Reset() {
	*x = GetMempoolTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMempoolTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMempoolTransactionsResponse) ProtoMessage() {}

func (x *GetMempoolTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMempoolTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetMempoolTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{42}
}

func (x *GetMempoolTransactionsResponse) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type TransactionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcessSig *Signature `protobuf:"bytes,1,opt,name=excess_sig,json=excessSig,proto3" json:"excess_sig,omitempty"`
}

func (x *TransactionStateRequest) Reset() {
	*x = TransactionStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStateRequest) ProtoMessage() {}

func (x *TransactionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStateRequest.ProtoReflect.Descriptor instead.
func (*TransactionStateRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{43}
}

func (x *TransactionStateRequest) GetExcessSig() *Signature {
	if x != nil {
		return x.ExcessSig
	}
	return nil
}

type TransactionStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result TransactionLocation `protobuf:"varint,1,opt,name=result,proto3,enum=tari.rpc.TransactionLocation" json:"result,omitempty"`
}

func (x *TransactionStateResponse) Reset() {
	*x = TransactionStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStateResponse) ProtoMessage() {}

func (x *TransactionStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStateResponse.ProtoReflect.Descriptor instead.
func (*TransactionStateResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{44}
}

func (x *TransactionStateResponse) GetResult() TransactionLocation {
	if x != nil {
		return x.Result
	}
	return TransactionLocation_UNKNOWN
}

type MempoolStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnconfirmedTxs    uint64 `protobuf:"varint,2,opt,name=unconfirmed_txs,json=unconfirmedTxs,proto3" json:"unconfirmed_txs,omitempty"`
	ReorgTxs          uint64 `protobuf:"varint,3,opt,name=reorg_txs,json=reorgTxs,proto3" json:"reorg_txs,omitempty"`
	UnconfirmedWeight uint64 `protobuf:"varint,4,opt,name=unconfirmed_weight,json=unconfirmedWeight,proto3" json:"unconfirmed_weight,omitempty"`
}

func (x *MempoolStatsResponse) Reset() {
	*x = MempoolStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MempoolStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MempoolStatsResponse) ProtoMessage() {}

func (x *MempoolStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MempoolStatsResponse.ProtoReflect.Descriptor instead.
func (*MempoolStatsResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{45}
}

func (x *MempoolStatsResponse) GetUnconfirmedTxs() uint64 {
	if x != nil {
		return x.UnconfirmedTxs
	}
	return 0
}

func (x *MempoolStatsResponse) GetReorgTxs() uint64 {
	if x != nil {
		return x.ReorgTxs
	}
	return 0
}

func (x *MempoolStatsResponse) GetUnconfirmedWeight() uint64 {
	if x != nil {
		return x.UnconfirmedWeight
	}
	return 0
}

type GetActiveValidatorNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetActiveValidatorNodesRequest) Reset() {
	*x = GetActiveValidatorNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveValidatorNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveValidatorNodesRequest) ProtoMessage() {}

func (x *GetActiveValidatorNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveValidatorNodesRequest.ProtoReflect.Descriptor instead.
func (*GetActiveValidatorNodesRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{46}
}

func (x *GetActiveValidatorNodesRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetActiveValidatorNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardKey  []byte `protobuf:"bytes,1,opt,name=shard_key,json=shardKey,proto3" json:"shard_key,omitempty"`
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *GetActiveValidatorNodesResponse) Reset() {
	*x = GetActiveValidatorNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveValidatorNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveValidatorNodesResponse) ProtoMessage() {}

func (x *GetActiveValidatorNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveValidatorNodesResponse.ProtoReflect.Descriptor instead.
func (*GetActiveValidatorNodesResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{47}
}

func (x *GetActiveValidatorNodesResponse) GetShardKey() []byte {
	if x != nil {
		return x.ShardKey
	}
	return nil
}

func (x *GetActiveValidatorNodesResponse) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type GetShardKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height    uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *GetShardKeyRequest) Reset() {
	*x = GetShardKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShardKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardKeyRequest) ProtoMessage() {}

func (x *GetShardKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardKeyRequest.ProtoReflect.Descriptor instead.
func (*GetShardKeyRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{48}
}

func (x *GetShardKeyRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetShardKeyRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type GetShardKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShardKey []byte `protobuf:"bytes,1,opt,name=shard_key,json=shardKey,proto3" json:"shard_key,omitempty"`
	Found    bool   `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (x *GetShardKeyResponse) Reset() {
	*x = GetShardKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShardKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardKeyResponse) ProtoMessage() {}

func (x *GetShardKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardKeyResponse.ProtoReflect.Descriptor instead.
func (*GetShardKeyResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{49}
}

func (x *GetShardKeyResponse) GetShardKey() []byte {
	if x != nil {
		return x.ShardKey
	}
	return nil
}

func (x *GetShardKeyResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

type GetTemplateRegistrationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHash []byte `protobuf:"bytes,1,opt,name=start_hash,json=startHash,proto3" json:"start_hash,omitempty"`
	Count     uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetTemplateRegistrationsRequest) Reset() {
	*x = GetTemplateRegistrationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTemplateRegistrationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTemplateRegistrationsRequest) ProtoMessage() {}

func (x *GetTemplateRegistrationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTemplateRegistrationsRequest.ProtoReflect.Descriptor instead.
func (*GetTemplateRegistrationsRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{50}
}

func (x *GetTemplateRegistrationsRequest) GetStartHash() []byte {
	if x != nil {
		return x.StartHash
	}
	return nil
}

func (x *GetTemplateRegistrationsRequest) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetTemplateRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UtxoHash     []byte                `protobuf:"bytes,1,opt,name=utxo_hash,json=utxoHash,proto3" json:"utxo_hash,omitempty"`
	Registration *TemplateRegistration `protobuf:"bytes,2,opt,name=registration,proto3" json:"registration,omitempty"`
}

func (x *GetTemplateRegistrationResponse) Reset() {
	*x = GetTemplateRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTemplateRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTemplateRegistrationResponse) ProtoMessage() {}

func (x *GetTemplateRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTemplateRegistrationResponse.ProtoReflect.Descriptor instead.
func (*GetTemplateRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{51}
}

func (x *GetTemplateRegistrationResponse) GetUtxoHash() []byte {
	if x != nil {
		return x.UtxoHash
	}
	return nil
}

func (x *GetTemplateRegistrationResponse) GetRegistration() *TemplateRegistration {
	if x != nil {
		return x.Registration
	}
	return nil
}

type BlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height        uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Hash          []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	NextBlockHash []byte `protobuf:"bytes,3,opt,name=next_block_hash,json=nextBlockHash,proto3" json:"next_block_hash,omitempty"`
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{52}
}

func (x *BlockInfo) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockInfo) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlockInfo) GetNextBlockHash() []byte {
	if x != nil {
		return x.NextBlockHash
	}
	return nil
}

type GetSideChainUtxosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHash []byte `protobuf:"bytes,1,opt,name=start_hash,json=startHash,proto3" json:"start_hash,omitempty"`
	Count     uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetSideChainUtxosRequest) Reset() {
	*x = GetSideChainUtxosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSideChainUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSideChainUtxosRequest) ProtoMessage() {}

func (x *GetSideChainUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSideChainUtxosRequest.ProtoReflect.Descriptor instead.
func (*GetSideChainUtxosRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{53}
}

func (x *GetSideChainUtxosRequest) GetStartHash() []byte {
	if x != nil {
		return x.StartHash
	}
	return nil
}

func (x *GetSideChainUtxosRequest) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetSideChainUtxosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockInfo *BlockInfo           `protobuf:"bytes,1,opt,name=block_info,json=blockInfo,proto3" json:"block_info,omitempty"`
	Outputs   []*TransactionOutput `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *GetSideChainUtxosResponse) Reset() {
	*x = GetSideChainUtxosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSideChainUtxosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSideChainUtxosResponse) ProtoMessage() {}

func (x *GetSideChainUtxosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSideChainUtxosResponse.ProtoReflect.Descriptor instead.
func (*GetSideChainUtxosResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{54}
}

func (x *GetSideChainUtxosResponse) GetBlockInfo() *BlockInfo {
	if x != nil {
		return x.BlockInfo
	}
	return nil
}

func (x *GetSideChainUtxosResponse) GetOutputs() []*TransactionOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type GetNetworkStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNetworkStateRequest) Reset() {
	*x = GetNetworkStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkStateRequest) ProtoMessage() {}

func (x *GetNetworkStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkStateRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkStateRequest) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{55}
}

type GetNetworkStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metadata
	Metadata *MetaData `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// has the base node synced
	InitialSyncAchieved bool `protobuf:"varint,2,opt,name=initial_sync_achieved,json=initialSyncAchieved,proto3" json:"initial_sync_achieved,omitempty"`
	// current state of the base node
	BaseNodeState BaseNodeState `protobuf:"varint,3,opt,name=base_node_state,json=baseNodeState,proto3,enum=tari.rpc.BaseNodeState" json:"base_node_state,omitempty"`
	// do we have failed checkpoints
	FailedCheckpoints bool `protobuf:"varint,4,opt,name=failed_checkpoints,json=failedCheckpoints,proto3" json:"failed_checkpoints,omitempty"`
	// The block reward of the next tip
	Reward uint64 `protobuf:"varint,5,opt,name=reward,proto3" json:"reward,omitempty"`
	// estimate sha3x hash rate
	Sha3XEstimatedHashRate uint64 `protobuf:"varint,6,opt,name=sha3x_estimated_hash_rate,json=sha3xEstimatedHashRate,proto3" json:"sha3x_estimated_hash_rate,omitempty"`
	// estimate randomx hash rate
	MoneroRandomxEstimatedHashRate uint64 `protobuf:"varint,7,opt,name=monero_randomx_estimated_hash_rate,json=moneroRandomxEstimatedHashRate,proto3" json:"monero_randomx_estimated_hash_rate,omitempty"`
	TariRandomxEstimatedHashRate   uint64 `protobuf:"varint,10,opt,name=tari_randomx_estimated_hash_rate,json=tariRandomxEstimatedHashRate,proto3" json:"tari_randomx_estimated_hash_rate,omitempty"`
	// number of connections
	NumConnections uint64 `protobuf:"varint,8,opt,name=num_connections,json=numConnections,proto3" json:"num_connections,omitempty"`
	// liveness results
	LivenessResults []*LivenessResult `protobuf:"bytes,9,rep,name=liveness_results,json=livenessResults,proto3" json:"liveness_results,omitempty"`
}

func (x *GetNetworkStateResponse) Reset() {
	*x = GetNetworkStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkStateResponse) ProtoMessage() {}

func (x *GetNetworkStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkStateResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkStateResponse) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{56}
}

func (x *GetNetworkStateResponse) GetMetadata() *MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetNetworkStateResponse) GetInitialSyncAchieved() bool {
	if x != nil {
		return x.InitialSyncAchieved
	}
	return false
}

func (x *GetNetworkStateResponse) GetBaseNodeState() BaseNodeState {
	if x != nil {
		return x.BaseNodeState
	}
	return BaseNodeState_START_UP
}

func (x *GetNetworkStateResponse) GetFailedCheckpoints() bool {
	if x != nil {
		return x.FailedCheckpoints
	}
	return false
}

func (x *GetNetworkStateResponse) GetReward() uint64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *GetNetworkStateResponse) GetSha3XEstimatedHashRate() uint64 {
	if x != nil {
		return x.Sha3XEstimatedHashRate
	}
	return 0
}

func (x *GetNetworkStateResponse) GetMoneroRandomxEstimatedHashRate() uint64 {
	if x != nil {
		return x.MoneroRandomxEstimatedHashRate
	}
	return 0
}

func (x *GetNetworkStateResponse) GetTariRandomxEstimatedHashRate() uint64 {
	if x != nil {
		return x.TariRandomxEstimatedHashRate
	}
	return 0
}

func (x *GetNetworkStateResponse) GetNumConnections() uint64 {
	if x != nil {
		return x.NumConnections
	}
	return 0
}

func (x *GetNetworkStateResponse) GetLivenessResults() []*LivenessResult {
	if x != nil {
		return x.LivenessResults
	}
	return nil
}

type LivenessResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// node id
	PeerNodeId []byte `protobuf:"bytes,1,opt,name=peer_node_id,json=peerNodeId,proto3" json:"peer_node_id,omitempty"`
	// time to discover
	DiscoverLatency uint64 `protobuf:"varint,2,opt,name=discover_latency,json=discoverLatency,proto3" json:"discover_latency,omitempty"`
	// Dial latency
	PingLatency uint64 `protobuf:"varint,3,opt,name=ping_latency,json=pingLatency,proto3" json:"ping_latency,omitempty"`
}

func (x *LivenessResult) Reset() {
	*x = LivenessResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_node_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessResult) ProtoMessage() {}

func (x *LivenessResult) ProtoReflect() protoreflect.Message {
	mi := &file_base_node_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessResult.ProtoReflect.Descriptor instead.
func (*LivenessResult) Descriptor() ([]byte, []int) {
	return file_base_node_proto_rawDescGZIP(), []int{57}
}

func (x *LivenessResult) GetPeerNodeId() []byte {
	if x != nil {
		return x.PeerNodeId
	}
	return nil
}

func (x *LivenessResult) GetDiscoverLatency() uint64 {
	if x != nil {
		return x.DiscoverLatency
	}
	return 0
}

func (x *LivenessResult) GetPingLatency() uint64 {
	if x != nil {
		return x.PingLatency
	}
	return 0
}

var File_base_node_proto protoreflect.FileDescriptor

var file_base_node_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x0b, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x22, 0x90, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x4d, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa9, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x22, 0x5b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x73, 0x22, 0x9c,
	0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x34, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x34, 0x0a,
	0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x50, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x6f, 0x64,
	0x79, 0x42, 0x6c, 0x6f, 0x62, 0x22, 0xe5, 0x01, 0x0a, 0x0f, 0x54, 0x69, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x12, 0x3f, 0x0a,
	0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xcc, 0x01,
	0x0a, 0x18, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x6e, 0x65,
	0x77, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x17,
	0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x6f, 0x77, 0x41, 0x6c, 0x67, 0x6f, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa9, 0x01,
	0x0a, 0x27, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x6c, 0x67,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x6f, 0x77, 0x41, 0x6c, 0x67, 0x6f, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65,
	0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e,
	0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x6e, 0x65, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x22, 0xd9, 0x03,
	0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6f, 0x77, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x39, 0x0a, 0x19,
	0x73, 0x68, 0x61, 0x33, 0x78, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x73, 0x68, 0x61, 0x33, 0x78, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x6d, 0x6f, 0x6e, 0x65, 0x72,
	0x6f, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x78, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x78, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x74, 0x61, 0x72, 0x69, 0x5f, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x78, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x74,
	0x61, 0x72, 0x69, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x78, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x24, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xa1, 0x01, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2f, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x6c, 0x0a, 0x0d, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x4b, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x76, 0x67, 0x22, 0x2c, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xcd, 0x01, 0x0a, 0x13, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0x2c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x46,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x62, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x76, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x70, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x70, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70,
	0x65, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x14, 0x53, 0x79,
	0x6e, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x70, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x36,
	0x0a, 0x17, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x61, 0x72, 0x69, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x69, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x6d, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x6d, 0x4b, 0x65, 0x79, 0x22,
	0xd8, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x74, 0x78, 0x6f, 0x5f, 0x6d, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x75, 0x74,
	0x78, 0x6f, 0x4d, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x69, 0x5f, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x61,
	0x72, 0x69, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x09, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x6f, 0x77, 0x41, 0x6c, 0x67, 0x6f, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x12,
	0x2b, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46,
	0x65, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0x36, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x33, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x51, 0x0a,
	0x1a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x74,
	0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x36, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x18, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x56, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x69, 0x67, 0x22, 0x51, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x4d, 0x65, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x74,
	0x78, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x78, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6f, 0x72,
	0x67, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x6f,
	0x72, 0x67, 0x54, 0x78, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x38, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x5d,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x4b, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x48, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0x56, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x01, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x74, 0x78, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x74, 0x78, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5f, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x4f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x69, 0x64, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x18, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc2, 0x04, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x39,
	0x0a, 0x19, 0x73, 0x68, 0x61, 0x33, 0x78, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x73, 0x68, 0x61, 0x33, 0x78, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x6d, 0x6f, 0x6e,
	0x65, 0x72, 0x6f, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x78, 0x5f, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x78, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x74, 0x61, 0x72, 0x69, 0x5f, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x78, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1c, 0x74, 0x61, 0x72, 0x69, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x78, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0e,
	0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2a, 0x80,
	0x01, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x06, 0x2a, 0x3c, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4d, 0x45, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x55, 0x41, 0x52, 0x54, 0x49, 0x4c, 0x45, 0x10, 0x03, 0x2a,
	0x2c, 0x0a, 0x07, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f,
	0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x62, 0x0a,
	0x09, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x55, 0x50, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10,
	0x05, 0x2a, 0x74, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x54, 0x5f, 0x54, 0x48, 0x49, 0x53, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x4a, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x45, 0x4d, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x44, 0x10, 0x03, 0x32, 0xaf, 0x17, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x4c, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x1c, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x52,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x20, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x12, 0x15, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x65,
	0x65, 0x73, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x74,
	0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x57, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x49, 0x6e,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x17, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x5c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74,
	0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x62, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x72, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x31, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x4e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x6c, 0x6f, 0x62, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e,
	0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a,
	0x1f, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x3d, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x0f, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c,
	0x6f, 0x62, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x54, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x74, 0x78,
	0x6f, 0x73, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x30, 0x01, 0x12, 0x61, 0x0a,
	0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x74,
	0x78, 0x6f, 0x73, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x74, 0x78, 0x6f,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x43, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x74,
	0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x27, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x12, 0x0f, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x74,
	0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73,
	0x12, 0x0f, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4a, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x2e, 0x74,
	0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5e, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x74, 0x78,
	0x6f, 0x73, 0x12, 0x22, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x74,
	0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x56, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6e, 0x69, 0x70, 0x61, 0x32, 0x32, 0x2f, 0x67, 0x6f, 0x2d, 0x74,
	0x61, 0x72, 0x69, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x6c, 0x69, 0x62, 0x2f, 0x74, 0x61, 0x72,
	0x69, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_base_node_proto_rawDescOnce sync.Once
	file_base_node_proto_rawDescData = file_base_node_proto_rawDesc
)

func file_base_node_proto_rawDescGZIP() []byte {
	file_base_node_proto_rawDescOnce.Do(func() {
		file_base_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_base_node_proto_rawDescData)
	})
	return file_base_node_proto_rawDescData
}

var file_base_node_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_base_node_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_base_node_proto_goTypes = []interface{}{
	(BaseNodeState)(0),                              // 0: tari.rpc.BaseNodeState
	(CalcType)(0),                                   // 1: tari.rpc.CalcType
	(Sorting)(0),                                    // 2: tari.rpc.Sorting
	(SyncState)(0),                                  // 3: tari.rpc.SyncState
	(SubmitTransactionResult)(0),                    // 4: tari.rpc.SubmitTransactionResult
	(TransactionLocation)(0),                        // 5: tari.rpc.TransactionLocation
	(*GetAssetMetadataRequest)(nil),                 // 6: tari.rpc.GetAssetMetadataRequest
	(*GetAssetMetadataResponse)(nil),                // 7: tari.rpc.GetAssetMetadataResponse
	(*ListAssetRegistrationsRequest)(nil),           // 8: tari.rpc.ListAssetRegistrationsRequest
	(*ListAssetRegistrationsResponse)(nil),          // 9: tari.rpc.ListAssetRegistrationsResponse
	(*GetTokensRequest)(nil),                        // 10: tari.rpc.GetTokensRequest
	(*GetTokensResponse)(nil),                       // 11: tari.rpc.GetTokensResponse
	(*SubmitBlockResponse)(nil),                     // 12: tari.rpc.SubmitBlockResponse
	(*BlockBlobRequest)(nil),                        // 13: tari.rpc.BlockBlobRequest
	(*TipInfoResponse)(nil),                         // 14: tari.rpc.TipInfoResponse
	(*NewBlockTemplateResponse)(nil),                // 15: tari.rpc.NewBlockTemplateResponse
	(*NewBlockTemplateRequest)(nil),                 // 16: tari.rpc.NewBlockTemplateRequest
	(*GetNewBlockTemplateWithCoinbasesRequest)(nil), // 17: tari.rpc.GetNewBlockTemplateWithCoinbasesRequest
	(*GetNewBlockWithCoinbasesRequest)(nil),         // 18: tari.rpc.GetNewBlockWithCoinbasesRequest
	(*NewBlockCoinbase)(nil),                        // 19: tari.rpc.NewBlockCoinbase
	(*NetworkDifficultyResponse)(nil),               // 20: tari.rpc.NetworkDifficultyResponse
	(*ValueAtHeightResponse)(nil),                   // 21: tari.rpc.ValueAtHeightResponse
	(*IntegerValue)(nil),                            // 22: tari.rpc.IntegerValue
	(*StringValue)(nil),                             // 23: tari.rpc.StringValue
	(*BlockGroupRequest)(nil),                       // 24: tari.rpc.BlockGroupRequest
	(*BlockGroupResponse)(nil),                      // 25: tari.rpc.BlockGroupResponse
	(*HeightRequest)(nil),                           // 26: tari.rpc.HeightRequest
	(*BlockTimingResponse)(nil),                     // 27: tari.rpc.BlockTimingResponse
	(*GetHeaderByHashRequest)(nil),                  // 28: tari.rpc.GetHeaderByHashRequest
	(*BlockHeaderResponse)(nil),                     // 29: tari.rpc.BlockHeaderResponse
	(*ListHeadersRequest)(nil),                      // 30: tari.rpc.ListHeadersRequest
	(*GetBlocksRequest)(nil),                        // 31: tari.rpc.GetBlocksRequest
	(*GetBlocksResponse)(nil),                       // 32: tari.rpc.GetBlocksResponse
	(*MetaData)(nil),                                // 33: tari.rpc.MetaData
	(*SyncInfoResponse)(nil),                        // 34: tari.rpc.SyncInfoResponse
	(*SyncProgressResponse)(nil),                    // 35: tari.rpc.SyncProgressResponse
	(*GetNewBlockResult)(nil),                       // 36: tari.rpc.GetNewBlockResult
	(*GetNewBlockBlobResult)(nil),                   // 37: tari.rpc.GetNewBlockBlobResult
	(*MinerData)(nil),                               // 38: tari.rpc.MinerData
	(*SearchKernelsRequest)(nil),                    // 39: tari.rpc.SearchKernelsRequest
	(*SearchUtxosRequest)(nil),                      // 40: tari.rpc.SearchUtxosRequest
	(*FetchMatchingUtxosRequest)(nil),               // 41: tari.rpc.FetchMatchingUtxosRequest
	(*FetchMatchingUtxosResponse)(nil),              // 42: tari.rpc.FetchMatchingUtxosResponse
	(*GetPeersResponse)(nil),                        // 43: tari.rpc.GetPeersResponse
	(*GetPeersRequest)(nil),                         // 44: tari.rpc.GetPeersRequest
	(*SubmitTransactionRequest)(nil),                // 45: tari.rpc.SubmitTransactionRequest
	(*SubmitTransactionResponse)(nil),               // 46: tari.rpc.SubmitTransactionResponse
	(*GetMempoolTransactionsRequest)(nil),           // 47: tari.rpc.GetMempoolTransactionsRequest
	(*GetMempoolTransactionsResponse)(nil),          // 48: tari.rpc.GetMempoolTransactionsResponse
	(*TransactionStateRequest)(nil),                 // 49: tari.rpc.TransactionStateRequest
	(*TransactionStateResponse)(nil),                // 50: tari.rpc.TransactionStateResponse
	(*MempoolStatsResponse)(nil),                    // 51: tari.rpc.MempoolStatsResponse
	(*GetActiveValidatorNodesRequest)(nil),          // 52: tari.rpc.GetActiveValidatorNodesRequest
	(*GetActiveValidatorNodesResponse)(nil),         // 53: tari.rpc.GetActiveValidatorNodesResponse
	(*GetShardKeyRequest)(nil),                      // 54: tari.rpc.GetShardKeyRequest
	(*GetShardKeyResponse)(nil),                     // 55: tari.rpc.GetShardKeyResponse
	(*GetTemplateRegistrationsRequest)(nil),         // 56: tari.rpc.GetTemplateRegistrationsRequest
	(*GetTemplateRegistrationResponse)(nil),         // 57: tari.rpc.GetTemplateRegistrationResponse
	(*BlockInfo)(nil),                               // 58: tari.rpc.BlockInfo
	(*GetSideChainUtxosRequest)(nil),                // 59: tari.rpc.GetSideChainUtxosRequest
	(*GetSideChainUtxosResponse)(nil),               // 60: tari.rpc.GetSideChainUtxosResponse
	(*GetNetworkStateRequest)(nil),                  // 61: tari.rpc.GetNetworkStateRequest
	(*GetNetworkStateResponse)(nil),                 // 62: tari.rpc.GetNetworkStateResponse
	(*LivenessResult)(nil),                          // 63: tari.rpc.LivenessResult
	(*OutputFeatures)(nil),                          // 64: tari.rpc.OutputFeatures
	(*NewBlockTemplate)(nil),                        // 65: tari.rpc.NewBlockTemplate
	(*PowAlgo)(nil),                                 // 66: tari.rpc.PowAlgo
	(*BlockHeader)(nil),                             // 67: tari.rpc.BlockHeader
	(*HistoricalBlock)(nil),                         // 68: tari.rpc.HistoricalBlock
	(*Block)(nil),                                   // 69: tari.rpc.Block
	(*Signature)(nil),                               // 70: tari.rpc.Signature
	(*TransactionOutput)(nil),                       // 71: tari.rpc.TransactionOutput
	(*Peer)(nil),                                    // 72: tari.rpc.Peer
	(*Transaction)(nil),                             // 73: tari.rpc.Transaction
	(*TemplateRegistration)(nil),                    // 74: tari.rpc.TemplateRegistration
	(*BlockHeight)(nil),                             // 75: tari.rpc.BlockHeight
	(*Empty)(nil),                                   // 76: tari.rpc.Empty
	(*ConsensusConstants)(nil),                      // 77: tari.rpc.ConsensusConstants
	(*SoftwareUpdate)(nil),                          // 78: tari.rpc.SoftwareUpdate
	(*NodeIdentity)(nil),                            // 79: tari.rpc.NodeIdentity
	(*NetworkStatusResponse)(nil),                   // 80: tari.rpc.NetworkStatusResponse
	(*ListConnectedPeersResponse)(nil),              // 81: tari.rpc.ListConnectedPeersResponse
}
var file_base_node_proto_depIdxs = []int32{
	64, // 0: tari.rpc.GetAssetMetadataResponse.features:type_name -> tari.rpc.OutputFeatures
	64, // 1: tari.rpc.ListAssetRegistrationsResponse.features:type_name -> tari.rpc.OutputFeatures
	64, // 2: tari.rpc.GetTokensResponse.features:type_name -> tari.rpc.OutputFeatures
	33, // 3: tari.rpc.TipInfoResponse.metadata:type_name -> tari.rpc.MetaData
	0,  // 4: tari.rpc.TipInfoResponse.base_node_state:type_name -> tari.rpc.BaseNodeState
	65, // 5: tari.rpc.NewBlockTemplateResponse.new_block_template:type_name -> tari.rpc.NewBlockTemplate
	38, // 6: tari.rpc.NewBlockTemplateResponse.miner_data:type_name -> tari.rpc.MinerData
	66, // 7: tari.rpc.NewBlockTemplateRequest.algo:type_name -> tari.rpc.PowAlgo
	66, // 8: tari.rpc.GetNewBlockTemplateWithCoinbasesRequest.algo:type_name -> tari.rpc.PowAlgo
	19, // 9: tari.rpc.GetNewBlockTemplateWithCoinbasesRequest.coinbases:type_name -> tari.rpc.NewBlockCoinbase
	65, // 10: tari.rpc.GetNewBlockWithCoinbasesRequest.new_template:type_name -> tari.rpc.NewBlockTemplate
	19, // 11: tari.rpc.GetNewBlockWithCoinbasesRequest.coinbases:type_name -> tari.rpc.NewBlockCoinbase
	1,  // 12: tari.rpc.BlockGroupRequest.calc_type:type_name -> tari.rpc.CalcType
	1,  // 13: tari.rpc.BlockGroupResponse.calc_type:type_name -> tari.rpc.CalcType
	67, // 14: tari.rpc.BlockHeaderResponse.header:type_name -> tari.rpc.BlockHeader
	2,  // 15: tari.rpc.ListHeadersRequest.sorting:type_name -> tari.rpc.Sorting
	68, // 16: tari.rpc.GetBlocksResponse.blocks:type_name -> tari.rpc.HistoricalBlock
	3,  // 17: tari.rpc.SyncProgressResponse.state:type_name -> tari.rpc.SyncState
	69, // 18: tari.rpc.GetNewBlockResult.block:type_name -> tari.rpc.Block
	38, // 19: tari.rpc.GetNewBlockResult.miner_data:type_name -> tari.rpc.MinerData
	66, // 20: tari.rpc.MinerData.algo:type_name -> tari.rpc.PowAlgo
	70, // 21: tari.rpc.SearchKernelsRequest.signatures:type_name -> tari.rpc.Signature
	71, // 22: tari.rpc.FetchMatchingUtxosResponse.output:type_name -> tari.rpc.TransactionOutput
	72, // 23: tari.rpc.GetPeersResponse.peer:type_name -> tari.rpc.Peer
	73, // 24: tari.rpc.SubmitTransactionRequest.transaction:type_name -> tari.rpc.Transaction
	4,  // 25: tari.rpc.SubmitTransactionResponse.result:type_name -> tari.rpc.SubmitTransactionResult
	73, // 26: tari.rpc.GetMempoolTransactionsResponse.transaction:type_name -> tari.rpc.Transaction
	70, // 27: tari.rpc.TransactionStateRequest.excess_sig:type_name -> tari.rpc.Signature
	5,  // 28: tari.rpc.TransactionStateResponse.result:type_name -> tari.rpc.TransactionLocation
	74, // 29: tari.rpc.GetTemplateRegistrationResponse.registration:type_name -> tari.rpc.TemplateRegistration
	58, // 30: tari.rpc.GetSideChainUtxosResponse.block_info:type_name -> tari.rpc.BlockInfo
	71, // 31: tari.rpc.GetSideChainUtxosResponse.outputs:type_name -> tari.rpc.TransactionOutput
	33, // 32: tari.rpc.GetNetworkStateResponse.metadata:type_name -> tari.rpc.MetaData
	0,  // 33: tari.rpc.GetNetworkStateResponse.base_node_state:type_name -> tari.rpc.BaseNodeState
	63, // 34: tari.rpc.GetNetworkStateResponse.liveness_results:type_name -> tari.rpc.LivenessResult
	30, // 35: tari.rpc.BaseNode.ListHeaders:input_type -> tari.rpc.ListHeadersRequest
	28, // 36: tari.rpc.BaseNode.GetHeaderByHash:input_type -> tari.rpc.GetHeaderByHashRequest
	31, // 37: tari.rpc.BaseNode.GetBlocks:input_type -> tari.rpc.GetBlocksRequest
	26, // 38: tari.rpc.BaseNode.GetBlockTiming:input_type -> tari.rpc.HeightRequest
	75, // 39: tari.rpc.BaseNode.GetConstants:input_type -> tari.rpc.BlockHeight
	24, // 40: tari.rpc.BaseNode.GetBlockSize:input_type -> tari.rpc.BlockGroupRequest
	24, // 41: tari.rpc.BaseNode.GetBlockFees:input_type -> tari.rpc.BlockGroupRequest
	76, // 42: tari.rpc.BaseNode.GetVersion:input_type -> tari.rpc.Empty
	76, // 43: tari.rpc.BaseNode.CheckForUpdates:input_type -> tari.rpc.Empty
	31, // 44: tari.rpc.BaseNode.GetTokensInCirculation:input_type -> tari.rpc.GetBlocksRequest
	26, // 45: tari.rpc.BaseNode.GetNetworkDifficulty:input_type -> tari.rpc.HeightRequest
	16, // 46: tari.rpc.BaseNode.GetNewBlockTemplate:input_type -> tari.rpc.NewBlockTemplateRequest
	65, // 47: tari.rpc.BaseNode.GetNewBlock:input_type -> tari.rpc.NewBlockTemplate
	18, // 48: tari.rpc.BaseNode.GetNewBlockWithCoinbases:input_type -> tari.rpc.GetNewBlockWithCoinbasesRequest
	17, // 49: tari.rpc.BaseNode.GetNewBlockTemplateWithCoinbases:input_type -> tari.rpc.GetNewBlockTemplateWithCoinbasesRequest
	65, // 50: tari.rpc.BaseNode.GetNewBlockBlob:input_type -> tari.rpc.NewBlockTemplate
	69, // 51: tari.rpc.BaseNode.SubmitBlock:input_type -> tari.rpc.Block
	13, // 52: tari.rpc.BaseNode.SubmitBlockBlob:input_type -> tari.rpc.BlockBlobRequest
	45, // 53: tari.rpc.BaseNode.SubmitTransaction:input_type -> tari.rpc.SubmitTransactionRequest
	76, // 54: tari.rpc.BaseNode.GetSyncInfo:input_type -> tari.rpc.Empty
	76, // 55: tari.rpc.BaseNode.GetSyncProgress:input_type -> tari.rpc.Empty
	76, // 56: tari.rpc.BaseNode.GetTipInfo:input_type -> tari.rpc.Empty
	39, // 57: tari.rpc.BaseNode.SearchKernels:input_type -> tari.rpc.SearchKernelsRequest
	40, // 58: tari.rpc.BaseNode.SearchUtxos:input_type -> tari.rpc.SearchUtxosRequest
	41, // 59: tari.rpc.BaseNode.FetchMatchingUtxos:input_type -> tari.rpc.FetchMatchingUtxosRequest
	44, // 60: tari.rpc.BaseNode.GetPeers:input_type -> tari.rpc.GetPeersRequest
	47, // 61: tari.rpc.BaseNode.GetMempoolTransactions:input_type -> tari.rpc.GetMempoolTransactionsRequest
	49, // 62: tari.rpc.BaseNode.TransactionState:input_type -> tari.rpc.TransactionStateRequest
	76, // 63: tari.rpc.BaseNode.Identify:input_type -> tari.rpc.Empty
	76, // 64: tari.rpc.BaseNode.GetNetworkStatus:input_type -> tari.rpc.Empty
	76, // 65: tari.rpc.BaseNode.ListConnectedPeers:input_type -> tari.rpc.Empty
	76, // 66: tari.rpc.BaseNode.GetMempoolStats:input_type -> tari.rpc.Empty
	52, // 67: tari.rpc.BaseNode.GetActiveValidatorNodes:input_type -> tari.rpc.GetActiveValidatorNodesRequest
	54, // 68: tari.rpc.BaseNode.GetShardKey:input_type -> tari.rpc.GetShardKeyRequest
	56, // 69: tari.rpc.BaseNode.GetTemplateRegistrations:input_type -> tari.rpc.GetTemplateRegistrationsRequest
	59, // 70: tari.rpc.BaseNode.GetSideChainUtxos:input_type -> tari.rpc.GetSideChainUtxosRequest
	61, // 71: tari.rpc.BaseNode.GetNetworkState:input_type -> tari.rpc.GetNetworkStateRequest
	29, // 72: tari.rpc.BaseNode.ListHeaders:output_type -> tari.rpc.BlockHeaderResponse
	29, // 73: tari.rpc.BaseNode.GetHeaderByHash:output_type -> tari.rpc.BlockHeaderResponse
	68, // 74: tari.rpc.BaseNode.GetBlocks:output_type -> tari.rpc.HistoricalBlock
	27, // 75: tari.rpc.BaseNode.GetBlockTiming:output_type -> tari.rpc.BlockTimingResponse
	77, // 76: tari.rpc.BaseNode.GetConstants:output_type -> tari.rpc.ConsensusConstants
	25, // 77: tari.rpc.BaseNode.GetBlockSize:output_type -> tari.rpc.BlockGroupResponse
	25, // 78: tari.rpc.BaseNode.GetBlockFees:output_type -> tari.rpc.BlockGroupResponse
	23, // 79: tari.rpc.BaseNode.GetVersion:output_type -> tari.rpc.StringValue
	78, // 80: tari.rpc.BaseNode.CheckForUpdates:output_type -> tari.rpc.SoftwareUpdate
	21, // 81: tari.rpc.BaseNode.GetTokensInCirculation:output_type -> tari.rpc.ValueAtHeightResponse
	20, // 82: tari.rpc.BaseNode.GetNetworkDifficulty:output_type -> tari.rpc.NetworkDifficultyResponse
	15, // 83: tari.rpc.BaseNode.GetNewBlockTemplate:output_type -> tari.rpc.NewBlockTemplateResponse
	36, // 84: tari.rpc.BaseNode.GetNewBlock:output_type -> tari.rpc.GetNewBlockResult
	36, // 85: tari.rpc.BaseNode.GetNewBlockWithCoinbases:output_type -> tari.rpc.GetNewBlockResult
	36, // 86: tari.rpc.BaseNode.GetNewBlockTemplateWithCoinbases:output_type -> tari.rpc.GetNewBlockResult
	37, // 87: tari.rpc.BaseNode.GetNewBlockBlob:output_type -> tari.rpc.GetNewBlockBlobResult
	12, // 88: tari.rpc.BaseNode.SubmitBlock:output_type -> tari.rpc.SubmitBlockResponse
	12, // 89: tari.rpc.BaseNode.SubmitBlockBlob:output_type -> tari.rpc.SubmitBlockResponse
	46, // 90: tari.rpc.BaseNode.SubmitTransaction:output_type -> tari.rpc.SubmitTransactionResponse
	34, // 91: tari.rpc.BaseNode.GetSyncInfo:output_type -> tari.rpc.SyncInfoResponse
	35, // 92: tari.rpc.BaseNode.GetSyncProgress:output_type -> tari.rpc.SyncProgressResponse
	14, // 93: tari.rpc.BaseNode.GetTipInfo:output_type -> tari.rpc.TipInfoResponse
	68, // 94: tari.rpc.BaseNode.SearchKernels:output_type -> tari.rpc.HistoricalBlock
	68, // 95: tari.rpc.BaseNode.SearchUtxos:output_type -> tari.rpc.HistoricalBlock
	42, // 96: tari.rpc.BaseNode.FetchMatchingUtxos:output_type -> tari.rpc.FetchMatchingUtxosResponse
	43, // 97: tari.rpc.BaseNode.GetPeers:output_type -> tari.rpc.GetPeersResponse
	48, // 98: tari.rpc.BaseNode.GetMempoolTransactions:output_type -> tari.rpc.GetMempoolTransactionsResponse
	50, // 99: tari.rpc.BaseNode.TransactionState:output_type -> tari.rpc.TransactionStateResponse
	79, // 100: tari.rpc.BaseNode.Identify:output_type -> tari.rpc.NodeIdentity
	80, // 101: tari.rpc.BaseNode.GetNetworkStatus:output_type -> tari.rpc.NetworkStatusResponse
	81, // 102: tari.rpc.BaseNode.ListConnectedPeers:output_type -> tari.rpc.ListConnectedPeersResponse
	51, // 103: tari.rpc.BaseNode.GetMempoolStats:output_type -> tari.rpc.MempoolStatsResponse
	53, // 104: tari.rpc.BaseNode.GetActiveValidatorNodes:output_type -> tari.rpc.GetActiveValidatorNodesResponse
	55, // 105: tari.rpc.BaseNode.GetShardKey:output_type -> tari.rpc.GetShardKeyResponse
	57, // 106: tari.rpc.BaseNode.GetTemplateRegistrations:output_type -> tari.rpc.GetTemplateRegistrationResponse
	60, // 107: tari.rpc.BaseNode.GetSideChainUtxos:output_type -> tari.rpc.GetSideChainUtxosResponse
	62, // 108: tari.rpc.BaseNode.GetNetworkState:output_type -> tari.rpc.GetNetworkStateResponse
	72, // [72:109] is the sub-list for method output_type
	35, // [35:72] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_base_node_proto_init() }
func file_base_node_proto_init() {
	if File_base_node_proto != nil {
		return
	}
	file_types_proto_init()
	file_transaction_proto_init()
	file_block_proto_init()
	file_network_proto_init()
	file_sidechain_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_base_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetRegistrationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetRegistrationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBlockTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBlockTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewBlockTemplateWithCoinbasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewBlockWithCoinbasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBlockCoinbase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkDifficultyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueAtHeightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockTimingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeaderByHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncProgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewBlockResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewBlockBlobResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchKernelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUtxosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMatchingUtxosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMatchingUtxosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMempoolTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMempoolTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MempoolStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveValidatorNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveValidatorNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShardKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShardKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTemplateRegistrationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTemplateRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSideChainUtxosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSideChainUtxosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_node_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_base_node_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_base_node_proto_goTypes,
		DependencyIndexes: file_base_node_proto_depIdxs,
		EnumInfos:         file_base_node_proto_enumTypes,
		MessageInfos:      file_base_node_proto_msgTypes,
	}.Build()
	File_base_node_proto = out.File
	file_base_node_proto_rawDesc = nil
	file_base_node_proto_goTypes = nil
	file_base_node_proto_depIdxs = nil
}
