// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tari_generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ValidatorNodeClient is the client API for ValidatorNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidatorNodeClient interface {
	GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityResponse, error)
	GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error)
	GetTokenData(ctx context.Context, in *GetTokenDataRequest, opts ...grpc.CallOption) (*GetTokenDataResponse, error)
	// rpc ExecuteInstruction(ExecuteInstructionRequest) returns (ExecuteInstructionResponse);
	InvokeReadMethod(ctx context.Context, in *InvokeReadMethodRequest, opts ...grpc.CallOption) (*InvokeReadMethodResponse, error)
	InvokeMethod(ctx context.Context, in *InvokeMethodRequest, opts ...grpc.CallOption) (*InvokeMethodResponse, error)
	GetConstitutionRequests(ctx context.Context, in *GetConstitutionRequestsRequest, opts ...grpc.CallOption) (ValidatorNode_GetConstitutionRequestsClient, error)
	PublishContractAcceptance(ctx context.Context, in *PublishContractAcceptanceRequest, opts ...grpc.CallOption) (*PublishContractAcceptanceResponse, error)
	PublishContractUpdateProposalAcceptance(ctx context.Context, in *PublishContractUpdateProposalAcceptanceRequest, opts ...grpc.CallOption) (*PublishContractUpdateProposalAcceptanceResponse, error)
}

type validatorNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewValidatorNodeClient(cc grpc.ClientConnInterface) ValidatorNodeClient {
	return &validatorNodeClient{cc}
}

func (c *validatorNodeClient) GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityResponse, error) {
	out := new(GetIdentityResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.ValidatorNode/GetIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorNodeClient) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error) {
	out := new(GetMetadataResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.ValidatorNode/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorNodeClient) GetTokenData(ctx context.Context, in *GetTokenDataRequest, opts ...grpc.CallOption) (*GetTokenDataResponse, error) {
	out := new(GetTokenDataResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.ValidatorNode/GetTokenData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorNodeClient) InvokeReadMethod(ctx context.Context, in *InvokeReadMethodRequest, opts ...grpc.CallOption) (*InvokeReadMethodResponse, error) {
	out := new(InvokeReadMethodResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.ValidatorNode/InvokeReadMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorNodeClient) InvokeMethod(ctx context.Context, in *InvokeMethodRequest, opts ...grpc.CallOption) (*InvokeMethodResponse, error) {
	out := new(InvokeMethodResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.ValidatorNode/InvokeMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorNodeClient) GetConstitutionRequests(ctx context.Context, in *GetConstitutionRequestsRequest, opts ...grpc.CallOption) (ValidatorNode_GetConstitutionRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ValidatorNode_serviceDesc.Streams[0], "/tari.rpc.ValidatorNode/GetConstitutionRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &validatorNodeGetConstitutionRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ValidatorNode_GetConstitutionRequestsClient interface {
	Recv() (*TransactionOutput, error)
	grpc.ClientStream
}

type validatorNodeGetConstitutionRequestsClient struct {
	grpc.ClientStream
}

func (x *validatorNodeGetConstitutionRequestsClient) Recv() (*TransactionOutput, error) {
	m := new(TransactionOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *validatorNodeClient) PublishContractAcceptance(ctx context.Context, in *PublishContractAcceptanceRequest, opts ...grpc.CallOption) (*PublishContractAcceptanceResponse, error) {
	out := new(PublishContractAcceptanceResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.ValidatorNode/PublishContractAcceptance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorNodeClient) PublishContractUpdateProposalAcceptance(ctx context.Context, in *PublishContractUpdateProposalAcceptanceRequest, opts ...grpc.CallOption) (*PublishContractUpdateProposalAcceptanceResponse, error) {
	out := new(PublishContractUpdateProposalAcceptanceResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.ValidatorNode/PublishContractUpdateProposalAcceptance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidatorNodeServer is the server API for ValidatorNode service.
// All implementations must embed UnimplementedValidatorNodeServer
// for forward compatibility
type ValidatorNodeServer interface {
	GetIdentity(context.Context, *GetIdentityRequest) (*GetIdentityResponse, error)
	GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error)
	GetTokenData(context.Context, *GetTokenDataRequest) (*GetTokenDataResponse, error)
	// rpc ExecuteInstruction(ExecuteInstructionRequest) returns (ExecuteInstructionResponse);
	InvokeReadMethod(context.Context, *InvokeReadMethodRequest) (*InvokeReadMethodResponse, error)
	InvokeMethod(context.Context, *InvokeMethodRequest) (*InvokeMethodResponse, error)
	GetConstitutionRequests(*GetConstitutionRequestsRequest, ValidatorNode_GetConstitutionRequestsServer) error
	PublishContractAcceptance(context.Context, *PublishContractAcceptanceRequest) (*PublishContractAcceptanceResponse, error)
	PublishContractUpdateProposalAcceptance(context.Context, *PublishContractUpdateProposalAcceptanceRequest) (*PublishContractUpdateProposalAcceptanceResponse, error)
	mustEmbedUnimplementedValidatorNodeServer()
}

// UnimplementedValidatorNodeServer must be embedded to have forward compatible implementations.
type UnimplementedValidatorNodeServer struct {
}

func (UnimplementedValidatorNodeServer) GetIdentity(context.Context, *GetIdentityRequest) (*GetIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentity not implemented")
}
func (UnimplementedValidatorNodeServer) GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedValidatorNodeServer) GetTokenData(context.Context, *GetTokenDataRequest) (*GetTokenDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenData not implemented")
}
func (UnimplementedValidatorNodeServer) InvokeReadMethod(context.Context, *InvokeReadMethodRequest) (*InvokeReadMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeReadMethod not implemented")
}
func (UnimplementedValidatorNodeServer) InvokeMethod(context.Context, *InvokeMethodRequest) (*InvokeMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeMethod not implemented")
}
func (UnimplementedValidatorNodeServer) GetConstitutionRequests(*GetConstitutionRequestsRequest, ValidatorNode_GetConstitutionRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConstitutionRequests not implemented")
}
func (UnimplementedValidatorNodeServer) PublishContractAcceptance(context.Context, *PublishContractAcceptanceRequest) (*PublishContractAcceptanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishContractAcceptance not implemented")
}
func (UnimplementedValidatorNodeServer) PublishContractUpdateProposalAcceptance(context.Context, *PublishContractUpdateProposalAcceptanceRequest) (*PublishContractUpdateProposalAcceptanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishContractUpdateProposalAcceptance not implemented")
}
func (UnimplementedValidatorNodeServer) mustEmbedUnimplementedValidatorNodeServer() {}

// UnsafeValidatorNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidatorNodeServer will
// result in compilation errors.
type UnsafeValidatorNodeServer interface {
	mustEmbedUnimplementedValidatorNodeServer()
}

func RegisterValidatorNodeServer(s *grpc.Server, srv ValidatorNodeServer) {
	s.RegisterService(&_ValidatorNode_serviceDesc, srv)
}

func _ValidatorNode_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorNodeServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.ValidatorNode/GetIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorNodeServer).GetIdentity(ctx, req.(*GetIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorNode_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorNodeServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.ValidatorNode/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorNodeServer).GetMetadata(ctx, req.(*GetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorNode_GetTokenData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorNodeServer).GetTokenData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.ValidatorNode/GetTokenData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorNodeServer).GetTokenData(ctx, req.(*GetTokenDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorNode_InvokeReadMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeReadMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorNodeServer).InvokeReadMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.ValidatorNode/InvokeReadMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorNodeServer).InvokeReadMethod(ctx, req.(*InvokeReadMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorNode_InvokeMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorNodeServer).InvokeMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.ValidatorNode/InvokeMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorNodeServer).InvokeMethod(ctx, req.(*InvokeMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorNode_GetConstitutionRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetConstitutionRequestsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ValidatorNodeServer).GetConstitutionRequests(m, &validatorNodeGetConstitutionRequestsServer{stream})
}

type ValidatorNode_GetConstitutionRequestsServer interface {
	Send(*TransactionOutput) error
	grpc.ServerStream
}

type validatorNodeGetConstitutionRequestsServer struct {
	grpc.ServerStream
}

func (x *validatorNodeGetConstitutionRequestsServer) Send(m *TransactionOutput) error {
	return x.ServerStream.SendMsg(m)
}

func _ValidatorNode_PublishContractAcceptance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishContractAcceptanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorNodeServer).PublishContractAcceptance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.ValidatorNode/PublishContractAcceptance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorNodeServer).PublishContractAcceptance(ctx, req.(*PublishContractAcceptanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorNode_PublishContractUpdateProposalAcceptance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishContractUpdateProposalAcceptanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorNodeServer).PublishContractUpdateProposalAcceptance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.ValidatorNode/PublishContractUpdateProposalAcceptance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorNodeServer).PublishContractUpdateProposalAcceptance(ctx, req.(*PublishContractUpdateProposalAcceptanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ValidatorNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tari.rpc.ValidatorNode",
	HandlerType: (*ValidatorNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIdentity",
			Handler:    _ValidatorNode_GetIdentity_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _ValidatorNode_GetMetadata_Handler,
		},
		{
			MethodName: "GetTokenData",
			Handler:    _ValidatorNode_GetTokenData_Handler,
		},
		{
			MethodName: "InvokeReadMethod",
			Handler:    _ValidatorNode_InvokeReadMethod_Handler,
		},
		{
			MethodName: "InvokeMethod",
			Handler:    _ValidatorNode_InvokeMethod_Handler,
		},
		{
			MethodName: "PublishContractAcceptance",
			Handler:    _ValidatorNode_PublishContractAcceptance_Handler,
		},
		{
			MethodName: "PublishContractUpdateProposalAcceptance",
			Handler:    _ValidatorNode_PublishContractUpdateProposalAcceptance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetConstitutionRequests",
			Handler:       _ValidatorNode_GetConstitutionRequests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "validator_node.proto",
}
