// Copyright 2020. The Tari Project
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
// following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
// disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
// following disclaimer in the documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
// products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: sidechain_types.proto

package tari_generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QuorumDecision int32

const (
	QuorumDecision_Accept QuorumDecision = 0
	QuorumDecision_Reject QuorumDecision = 1
)

// Enum value maps for QuorumDecision.
var (
	QuorumDecision_name = map[int32]string{
		0: "Accept",
		1: "Reject",
	}
	QuorumDecision_value = map[string]int32{
		"Accept": 0,
		"Reject": 1,
	}
)

func (x QuorumDecision) Enum() *QuorumDecision {
	p := new(QuorumDecision)
	*p = x
	return p
}

func (x QuorumDecision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuorumDecision) Descriptor() protoreflect.EnumDescriptor {
	return file_sidechain_types_proto_enumTypes[0].Descriptor()
}

func (QuorumDecision) Type() protoreflect.EnumType {
	return &file_sidechain_types_proto_enumTypes[0]
}

func (x QuorumDecision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuorumDecision.Descriptor instead.
func (QuorumDecision) EnumDescriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{0}
}

type SideChainFeature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Feature:
	//
	//	*SideChainFeature_ValidatorNodeRegistration
	//	*SideChainFeature_TemplateRegistration
	//	*SideChainFeature_ConfidentialOutput
	//	*SideChainFeature_EvictionProof
	//	*SideChainFeature_ValidatorNodeExit
	Feature       isSideChainFeature_Feature `protobuf_oneof:"feature"`
	SidechainId   *SideChainId               `protobuf:"bytes,6,opt,name=sidechain_id,json=sidechainId,proto3" json:"sidechain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SideChainFeature) Reset() {
	*x = SideChainFeature{}
	mi := &file_sidechain_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SideChainFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideChainFeature) ProtoMessage() {}

func (x *SideChainFeature) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideChainFeature.ProtoReflect.Descriptor instead.
func (*SideChainFeature) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{0}
}

func (x *SideChainFeature) GetFeature() isSideChainFeature_Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *SideChainFeature) GetValidatorNodeRegistration() *ValidatorNodeRegistration {
	if x != nil {
		if x, ok := x.Feature.(*SideChainFeature_ValidatorNodeRegistration); ok {
			return x.ValidatorNodeRegistration
		}
	}
	return nil
}

func (x *SideChainFeature) GetTemplateRegistration() *TemplateRegistration {
	if x != nil {
		if x, ok := x.Feature.(*SideChainFeature_TemplateRegistration); ok {
			return x.TemplateRegistration
		}
	}
	return nil
}

func (x *SideChainFeature) GetConfidentialOutput() *ConfidentialOutputData {
	if x != nil {
		if x, ok := x.Feature.(*SideChainFeature_ConfidentialOutput); ok {
			return x.ConfidentialOutput
		}
	}
	return nil
}

func (x *SideChainFeature) GetEvictionProof() *EvictionProof {
	if x != nil {
		if x, ok := x.Feature.(*SideChainFeature_EvictionProof); ok {
			return x.EvictionProof
		}
	}
	return nil
}

func (x *SideChainFeature) GetValidatorNodeExit() *ValidatorNodeExit {
	if x != nil {
		if x, ok := x.Feature.(*SideChainFeature_ValidatorNodeExit); ok {
			return x.ValidatorNodeExit
		}
	}
	return nil
}

func (x *SideChainFeature) GetSidechainId() *SideChainId {
	if x != nil {
		return x.SidechainId
	}
	return nil
}

type isSideChainFeature_Feature interface {
	isSideChainFeature_Feature()
}

type SideChainFeature_ValidatorNodeRegistration struct {
	ValidatorNodeRegistration *ValidatorNodeRegistration `protobuf:"bytes,1,opt,name=validator_node_registration,json=validatorNodeRegistration,proto3,oneof"`
}

type SideChainFeature_TemplateRegistration struct {
	TemplateRegistration *TemplateRegistration `protobuf:"bytes,2,opt,name=template_registration,json=templateRegistration,proto3,oneof"`
}

type SideChainFeature_ConfidentialOutput struct {
	ConfidentialOutput *ConfidentialOutputData `protobuf:"bytes,3,opt,name=confidential_output,json=confidentialOutput,proto3,oneof"`
}

type SideChainFeature_EvictionProof struct {
	EvictionProof *EvictionProof `protobuf:"bytes,4,opt,name=eviction_proof,json=evictionProof,proto3,oneof"`
}

type SideChainFeature_ValidatorNodeExit struct {
	ValidatorNodeExit *ValidatorNodeExit `protobuf:"bytes,5,opt,name=validator_node_exit,json=validatorNodeExit,proto3,oneof"`
}

func (*SideChainFeature_ValidatorNodeRegistration) isSideChainFeature_Feature() {}

func (*SideChainFeature_TemplateRegistration) isSideChainFeature_Feature() {}

func (*SideChainFeature_ConfidentialOutput) isSideChainFeature_Feature() {}

func (*SideChainFeature_EvictionProof) isSideChainFeature_Feature() {}

func (*SideChainFeature_ValidatorNodeExit) isSideChainFeature_Feature() {}

type SideChainId struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PublicKey      []byte                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	KnowledgeProof *Signature             `protobuf:"bytes,2,opt,name=knowledge_proof,json=knowledgeProof,proto3" json:"knowledge_proof,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SideChainId) Reset() {
	*x = SideChainId{}
	mi := &file_sidechain_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SideChainId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideChainId) ProtoMessage() {}

func (x *SideChainId) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideChainId.ProtoReflect.Descriptor instead.
func (*SideChainId) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{1}
}

func (x *SideChainId) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SideChainId) GetKnowledgeProof() *Signature {
	if x != nil {
		return x.KnowledgeProof
	}
	return nil
}

type ValidatorNodeRegistration struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PublicKey      []byte                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature      *Signature             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	ClaimPublicKey []byte                 `protobuf:"bytes,3,opt,name=claim_public_key,json=claimPublicKey,proto3" json:"claim_public_key,omitempty"`
	MaxEpoch       uint64                 `protobuf:"varint,4,opt,name=max_epoch,json=maxEpoch,proto3" json:"max_epoch,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ValidatorNodeRegistration) Reset() {
	*x = ValidatorNodeRegistration{}
	mi := &file_sidechain_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidatorNodeRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorNodeRegistration) ProtoMessage() {}

func (x *ValidatorNodeRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorNodeRegistration.ProtoReflect.Descriptor instead.
func (*ValidatorNodeRegistration) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{2}
}

func (x *ValidatorNodeRegistration) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ValidatorNodeRegistration) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ValidatorNodeRegistration) GetClaimPublicKey() []byte {
	if x != nil {
		return x.ClaimPublicKey
	}
	return nil
}

func (x *ValidatorNodeRegistration) GetMaxEpoch() uint64 {
	if x != nil {
		return x.MaxEpoch
	}
	return 0
}

type ValidatorNodeExit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKey     []byte                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature     *Signature             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	MaxEpoch      uint64                 `protobuf:"varint,3,opt,name=max_epoch,json=maxEpoch,proto3" json:"max_epoch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidatorNodeExit) Reset() {
	*x = ValidatorNodeExit{}
	mi := &file_sidechain_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidatorNodeExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorNodeExit) ProtoMessage() {}

func (x *ValidatorNodeExit) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorNodeExit.ProtoReflect.Descriptor instead.
func (*ValidatorNodeExit) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{3}
}

func (x *ValidatorNodeExit) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ValidatorNodeExit) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ValidatorNodeExit) GetMaxEpoch() uint64 {
	if x != nil {
		return x.MaxEpoch
	}
	return 0
}

type TemplateRegistration struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AuthorPublicKey []byte                 `protobuf:"bytes,1,opt,name=author_public_key,json=authorPublicKey,proto3" json:"author_public_key,omitempty"`
	AuthorSignature *Signature             `protobuf:"bytes,2,opt,name=author_signature,json=authorSignature,proto3" json:"author_signature,omitempty"`
	TemplateName    string                 `protobuf:"bytes,3,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	TemplateVersion uint32                 `protobuf:"varint,4,opt,name=template_version,json=templateVersion,proto3" json:"template_version,omitempty"`
	TemplateType    *TemplateType          `protobuf:"bytes,5,opt,name=template_type,json=templateType,proto3" json:"template_type,omitempty"`
	BuildInfo       *BuildInfo             `protobuf:"bytes,6,opt,name=build_info,json=buildInfo,proto3" json:"build_info,omitempty"`
	BinarySha       []byte                 `protobuf:"bytes,7,opt,name=binary_sha,json=binarySha,proto3" json:"binary_sha,omitempty"`
	BinaryUrl       string                 `protobuf:"bytes,8,opt,name=binary_url,json=binaryUrl,proto3" json:"binary_url,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TemplateRegistration) Reset() {
	*x = TemplateRegistration{}
	mi := &file_sidechain_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateRegistration) ProtoMessage() {}

func (x *TemplateRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateRegistration.ProtoReflect.Descriptor instead.
func (*TemplateRegistration) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{4}
}

func (x *TemplateRegistration) GetAuthorPublicKey() []byte {
	if x != nil {
		return x.AuthorPublicKey
	}
	return nil
}

func (x *TemplateRegistration) GetAuthorSignature() *Signature {
	if x != nil {
		return x.AuthorSignature
	}
	return nil
}

func (x *TemplateRegistration) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *TemplateRegistration) GetTemplateVersion() uint32 {
	if x != nil {
		return x.TemplateVersion
	}
	return 0
}

func (x *TemplateRegistration) GetTemplateType() *TemplateType {
	if x != nil {
		return x.TemplateType
	}
	return nil
}

func (x *TemplateRegistration) GetBuildInfo() *BuildInfo {
	if x != nil {
		return x.BuildInfo
	}
	return nil
}

func (x *TemplateRegistration) GetBinarySha() []byte {
	if x != nil {
		return x.BinarySha
	}
	return nil
}

func (x *TemplateRegistration) GetBinaryUrl() string {
	if x != nil {
		return x.BinaryUrl
	}
	return ""
}

type ConfidentialOutputData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ClaimPublicKey []byte                 `protobuf:"bytes,1,opt,name=claim_public_key,json=claimPublicKey,proto3" json:"claim_public_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConfidentialOutputData) Reset() {
	*x = ConfidentialOutputData{}
	mi := &file_sidechain_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfidentialOutputData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfidentialOutputData) ProtoMessage() {}

func (x *ConfidentialOutputData) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfidentialOutputData.ProtoReflect.Descriptor instead.
func (*ConfidentialOutputData) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{5}
}

func (x *ConfidentialOutputData) GetClaimPublicKey() []byte {
	if x != nil {
		return x.ClaimPublicKey
	}
	return nil
}

type TemplateType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TemplateType:
	//
	//	*TemplateType_Wasm
	//	*TemplateType_Flow
	//	*TemplateType_Manifest
	TemplateType  isTemplateType_TemplateType `protobuf_oneof:"template_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateType) Reset() {
	*x = TemplateType{}
	mi := &file_sidechain_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateType) ProtoMessage() {}

func (x *TemplateType) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateType.ProtoReflect.Descriptor instead.
func (*TemplateType) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{6}
}

func (x *TemplateType) GetTemplateType() isTemplateType_TemplateType {
	if x != nil {
		return x.TemplateType
	}
	return nil
}

func (x *TemplateType) GetWasm() *WasmInfo {
	if x != nil {
		if x, ok := x.TemplateType.(*TemplateType_Wasm); ok {
			return x.Wasm
		}
	}
	return nil
}

func (x *TemplateType) GetFlow() *FlowInfo {
	if x != nil {
		if x, ok := x.TemplateType.(*TemplateType_Flow); ok {
			return x.Flow
		}
	}
	return nil
}

func (x *TemplateType) GetManifest() *ManifestInfo {
	if x != nil {
		if x, ok := x.TemplateType.(*TemplateType_Manifest); ok {
			return x.Manifest
		}
	}
	return nil
}

type isTemplateType_TemplateType interface {
	isTemplateType_TemplateType()
}

type TemplateType_Wasm struct {
	Wasm *WasmInfo `protobuf:"bytes,1,opt,name=wasm,proto3,oneof"`
}

type TemplateType_Flow struct {
	Flow *FlowInfo `protobuf:"bytes,2,opt,name=flow,proto3,oneof"`
}

type TemplateType_Manifest struct {
	Manifest *ManifestInfo `protobuf:"bytes,3,opt,name=manifest,proto3,oneof"`
}

func (*TemplateType_Wasm) isTemplateType_TemplateType() {}

func (*TemplateType_Flow) isTemplateType_TemplateType() {}

func (*TemplateType_Manifest) isTemplateType_TemplateType() {}

type WasmInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AbiVersion    uint32                 `protobuf:"varint,1,opt,name=abi_version,json=abiVersion,proto3" json:"abi_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WasmInfo) Reset() {
	*x = WasmInfo{}
	mi := &file_sidechain_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WasmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasmInfo) ProtoMessage() {}

func (x *WasmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasmInfo.ProtoReflect.Descriptor instead.
func (*WasmInfo) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{7}
}

func (x *WasmInfo) GetAbiVersion() uint32 {
	if x != nil {
		return x.AbiVersion
	}
	return 0
}

type FlowInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowInfo) Reset() {
	*x = FlowInfo{}
	mi := &file_sidechain_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowInfo) ProtoMessage() {}

func (x *FlowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowInfo.ProtoReflect.Descriptor instead.
func (*FlowInfo) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{8}
}

type ManifestInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManifestInfo) Reset() {
	*x = ManifestInfo{}
	mi := &file_sidechain_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManifestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestInfo) ProtoMessage() {}

func (x *ManifestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestInfo.ProtoReflect.Descriptor instead.
func (*ManifestInfo) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{9}
}

type BuildInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RepoUrl       string                 `protobuf:"bytes,1,opt,name=repo_url,json=repoUrl,proto3" json:"repo_url,omitempty"`
	CommitHash    []byte                 `protobuf:"bytes,2,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuildInfo) Reset() {
	*x = BuildInfo{}
	mi := &file_sidechain_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildInfo) ProtoMessage() {}

func (x *BuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildInfo.ProtoReflect.Descriptor instead.
func (*BuildInfo) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{10}
}

func (x *BuildInfo) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *BuildInfo) GetCommitHash() []byte {
	if x != nil {
		return x.CommitHash
	}
	return nil
}

type EvictionProof struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proof         *CommitProof           `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvictionProof) Reset() {
	*x = EvictionProof{}
	mi := &file_sidechain_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvictionProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvictionProof) ProtoMessage() {}

func (x *EvictionProof) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvictionProof.ProtoReflect.Descriptor instead.
func (*EvictionProof) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{11}
}

func (x *EvictionProof) GetProof() *CommitProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type CommitProof struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Version:
	//
	//	*CommitProof_V1
	Version       isCommitProof_Version `protobuf_oneof:"version"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitProof) Reset() {
	*x = CommitProof{}
	mi := &file_sidechain_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitProof) ProtoMessage() {}

func (x *CommitProof) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitProof.ProtoReflect.Descriptor instead.
func (*CommitProof) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{12}
}

func (x *CommitProof) GetVersion() isCommitProof_Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CommitProof) GetV1() *CommitProofV1 {
	if x != nil {
		if x, ok := x.Version.(*CommitProof_V1); ok {
			return x.V1
		}
	}
	return nil
}

type isCommitProof_Version interface {
	isCommitProof_Version()
}

type CommitProof_V1 struct {
	V1 *CommitProofV1 `protobuf:"bytes,1,opt,name=v1,proto3,oneof"`
}

func (*CommitProof_V1) isCommitProof_Version() {}

type CommitProofV1 struct {
	state                 protoimpl.MessageState     `protogen:"open.v1"`
	Command               []byte                     `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	CommitProof           *SidechainBlockCommitProof `protobuf:"bytes,2,opt,name=commit_proof,json=commitProof,proto3" json:"commit_proof,omitempty"`
	EncodedInclusionProof []byte                     `protobuf:"bytes,3,opt,name=encoded_inclusion_proof,json=encodedInclusionProof,proto3" json:"encoded_inclusion_proof,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CommitProofV1) Reset() {
	*x = CommitProofV1{}
	mi := &file_sidechain_types_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitProofV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitProofV1) ProtoMessage() {}

func (x *CommitProofV1) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitProofV1.ProtoReflect.Descriptor instead.
func (*CommitProofV1) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{13}
}

func (x *CommitProofV1) GetCommand() []byte {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CommitProofV1) GetCommitProof() *SidechainBlockCommitProof {
	if x != nil {
		return x.CommitProof
	}
	return nil
}

func (x *CommitProofV1) GetEncodedInclusionProof() []byte {
	if x != nil {
		return x.EncodedInclusionProof
	}
	return nil
}

type SidechainBlockCommitProof struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *SidechainBlockHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ProofElements []*CommitProofElement  `protobuf:"bytes,2,rep,name=proof_elements,json=proofElements,proto3" json:"proof_elements,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SidechainBlockCommitProof) Reset() {
	*x = SidechainBlockCommitProof{}
	mi := &file_sidechain_types_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SidechainBlockCommitProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SidechainBlockCommitProof) ProtoMessage() {}

func (x *SidechainBlockCommitProof) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SidechainBlockCommitProof.ProtoReflect.Descriptor instead.
func (*SidechainBlockCommitProof) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{14}
}

func (x *SidechainBlockCommitProof) GetHeader() *SidechainBlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SidechainBlockCommitProof) GetProofElements() []*CommitProofElement {
	if x != nil {
		return x.ProofElements
	}
	return nil
}

type CommitProofElement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ProofElement:
	//
	//	*CommitProofElement_QuorumCertificate
	//	*CommitProofElement_DummyChain
	ProofElement  isCommitProofElement_ProofElement `protobuf_oneof:"proof_element"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitProofElement) Reset() {
	*x = CommitProofElement{}
	mi := &file_sidechain_types_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitProofElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitProofElement) ProtoMessage() {}

func (x *CommitProofElement) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitProofElement.ProtoReflect.Descriptor instead.
func (*CommitProofElement) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{15}
}

func (x *CommitProofElement) GetProofElement() isCommitProofElement_ProofElement {
	if x != nil {
		return x.ProofElement
	}
	return nil
}

func (x *CommitProofElement) GetQuorumCertificate() *QuorumCertificate {
	if x != nil {
		if x, ok := x.ProofElement.(*CommitProofElement_QuorumCertificate); ok {
			return x.QuorumCertificate
		}
	}
	return nil
}

func (x *CommitProofElement) GetDummyChain() *DummyChain {
	if x != nil {
		if x, ok := x.ProofElement.(*CommitProofElement_DummyChain); ok {
			return x.DummyChain
		}
	}
	return nil
}

type isCommitProofElement_ProofElement interface {
	isCommitProofElement_ProofElement()
}

type CommitProofElement_QuorumCertificate struct {
	QuorumCertificate *QuorumCertificate `protobuf:"bytes,1,opt,name=quorum_certificate,json=quorumCertificate,proto3,oneof"`
}

type CommitProofElement_DummyChain struct {
	DummyChain *DummyChain `protobuf:"bytes,2,opt,name=dummy_chain,json=dummyChain,proto3,oneof"`
}

func (*CommitProofElement_QuorumCertificate) isCommitProofElement_ProofElement() {}

func (*CommitProofElement_DummyChain) isCommitProofElement_ProofElement() {}

type DummyChain struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainLinks    []*ChainLink           `protobuf:"bytes,1,rep,name=chain_links,json=chainLinks,proto3" json:"chain_links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DummyChain) Reset() {
	*x = DummyChain{}
	mi := &file_sidechain_types_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DummyChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DummyChain) ProtoMessage() {}

func (x *DummyChain) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DummyChain.ProtoReflect.Descriptor instead.
func (*DummyChain) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{16}
}

func (x *DummyChain) GetChainLinks() []*ChainLink {
	if x != nil {
		return x.ChainLinks
	}
	return nil
}

type ChainLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeaderHash    []byte                 `protobuf:"bytes,1,opt,name=header_hash,json=headerHash,proto3" json:"header_hash,omitempty"`
	ParentId      []byte                 `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChainLink) Reset() {
	*x = ChainLink{}
	mi := &file_sidechain_types_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainLink) ProtoMessage() {}

func (x *ChainLink) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainLink.ProtoReflect.Descriptor instead.
func (*ChainLink) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{17}
}

func (x *ChainLink) GetHeaderHash() []byte {
	if x != nil {
		return x.HeaderHash
	}
	return nil
}

func (x *ChainLink) GetParentId() []byte {
	if x != nil {
		return x.ParentId
	}
	return nil
}

type SidechainBlockHeader struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Network           uint32                 `protobuf:"varint,1,opt,name=network,proto3" json:"network,omitempty"`
	ParentId          []byte                 `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	JustifyId         []byte                 `protobuf:"bytes,3,opt,name=justify_id,json=justifyId,proto3" json:"justify_id,omitempty"`
	Height            uint64                 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Epoch             uint64                 `protobuf:"varint,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ShardGroup        *ShardGroup            `protobuf:"bytes,6,opt,name=shard_group,json=shardGroup,proto3" json:"shard_group,omitempty"`
	ProposedBy        []byte                 `protobuf:"bytes,7,opt,name=proposed_by,json=proposedBy,proto3" json:"proposed_by,omitempty"`
	StateMerkleRoot   []byte                 `protobuf:"bytes,8,opt,name=state_merkle_root,json=stateMerkleRoot,proto3" json:"state_merkle_root,omitempty"`
	CommandMerkleRoot []byte                 `protobuf:"bytes,9,opt,name=command_merkle_root,json=commandMerkleRoot,proto3" json:"command_merkle_root,omitempty"`
	Signature         *Signature             `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty"`
	MetadataHash      []byte                 `protobuf:"bytes,10,opt,name=metadata_hash,json=metadataHash,proto3" json:"metadata_hash,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SidechainBlockHeader) Reset() {
	*x = SidechainBlockHeader{}
	mi := &file_sidechain_types_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SidechainBlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SidechainBlockHeader) ProtoMessage() {}

func (x *SidechainBlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SidechainBlockHeader.ProtoReflect.Descriptor instead.
func (*SidechainBlockHeader) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{18}
}

func (x *SidechainBlockHeader) GetNetwork() uint32 {
	if x != nil {
		return x.Network
	}
	return 0
}

func (x *SidechainBlockHeader) GetParentId() []byte {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *SidechainBlockHeader) GetJustifyId() []byte {
	if x != nil {
		return x.JustifyId
	}
	return nil
}

func (x *SidechainBlockHeader) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SidechainBlockHeader) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *SidechainBlockHeader) GetShardGroup() *ShardGroup {
	if x != nil {
		return x.ShardGroup
	}
	return nil
}

func (x *SidechainBlockHeader) GetProposedBy() []byte {
	if x != nil {
		return x.ProposedBy
	}
	return nil
}

func (x *SidechainBlockHeader) GetStateMerkleRoot() []byte {
	if x != nil {
		return x.StateMerkleRoot
	}
	return nil
}

func (x *SidechainBlockHeader) GetCommandMerkleRoot() []byte {
	if x != nil {
		return x.CommandMerkleRoot
	}
	return nil
}

func (x *SidechainBlockHeader) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SidechainBlockHeader) GetMetadataHash() []byte {
	if x != nil {
		return x.MetadataHash
	}
	return nil
}

type ShardGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         uint32                 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	EndInclusive  uint32                 `protobuf:"varint,2,opt,name=end_inclusive,json=endInclusive,proto3" json:"end_inclusive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardGroup) Reset() {
	*x = ShardGroup{}
	mi := &file_sidechain_types_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardGroup) ProtoMessage() {}

func (x *ShardGroup) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardGroup.ProtoReflect.Descriptor instead.
func (*ShardGroup) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{19}
}

func (x *ShardGroup) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ShardGroup) GetEndInclusive() uint32 {
	if x != nil {
		return x.EndInclusive
	}
	return 0
}

type EvictAtom struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKey     []byte                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvictAtom) Reset() {
	*x = EvictAtom{}
	mi := &file_sidechain_types_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvictAtom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvictAtom) ProtoMessage() {}

func (x *EvictAtom) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvictAtom.ProtoReflect.Descriptor instead.
func (*EvictAtom) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{20}
}

func (x *EvictAtom) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type QuorumCertificate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeaderHash    []byte                 `protobuf:"bytes,1,opt,name=header_hash,json=headerHash,proto3" json:"header_hash,omitempty"`
	ParentId      []byte                 `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Signatures    []*ValidatorSignature  `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Decision      QuorumDecision         `protobuf:"varint,4,opt,name=decision,proto3,enum=tari.rpc.QuorumDecision" json:"decision,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuorumCertificate) Reset() {
	*x = QuorumCertificate{}
	mi := &file_sidechain_types_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuorumCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuorumCertificate) ProtoMessage() {}

func (x *QuorumCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuorumCertificate.ProtoReflect.Descriptor instead.
func (*QuorumCertificate) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{21}
}

func (x *QuorumCertificate) GetHeaderHash() []byte {
	if x != nil {
		return x.HeaderHash
	}
	return nil
}

func (x *QuorumCertificate) GetParentId() []byte {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *QuorumCertificate) GetSignatures() []*ValidatorSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *QuorumCertificate) GetDecision() QuorumDecision {
	if x != nil {
		return x.Decision
	}
	return QuorumDecision_Accept
}

type ValidatorSignature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKey     []byte                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature     *Signature             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidatorSignature) Reset() {
	*x = ValidatorSignature{}
	mi := &file_sidechain_types_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidatorSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorSignature) ProtoMessage() {}

func (x *ValidatorSignature) ProtoReflect() protoreflect.Message {
	mi := &file_sidechain_types_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorSignature.ProtoReflect.Descriptor instead.
func (*ValidatorSignature) Descriptor() ([]byte, []int) {
	return file_sidechain_types_proto_rawDescGZIP(), []int{22}
}

func (x *ValidatorSignature) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ValidatorSignature) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_sidechain_types_proto protoreflect.FileDescriptor

var file_sidechain_types_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb,
	0x03, 0x0a, 0x10, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x65, 0x0a, 0x1b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x15, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x53, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x65, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x4d, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x6a, 0x0a, 0x0b,
	0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x0f, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xb4, 0x01, 0x0a, 0x19, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22,
	0x82, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x22, 0x81, 0x03, 0x0a, 0x14, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x10, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x68, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x22, 0x42, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xa9, 0x01, 0x0a,
	0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x77, 0x61, 0x73, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x04, 0x77, 0x61, 0x73, 0x6d, 0x12, 0x28, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x08, 0x57, 0x61, 0x73, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x62, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x62, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x0a, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x47, 0x0a, 0x09, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x3c, 0x0a, 0x0d, 0x45, 0x76,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2b, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x43, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x29, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x31, 0x48, 0x00, 0x52, 0x02,
	0x76, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x31, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x53, 0x69,
	0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x36, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x43, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x12, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x75, 0x6d,
	0x6d, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x0a, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x49, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xa6, 0x03, 0x0a, 0x14, 0x53, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x79, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x35, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x22, 0x47, 0x0a, 0x0a, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x22, 0x2a, 0x0a, 0x09, 0x45, 0x76, 0x69, 0x63, 0x74, 0x41, 0x74, 0x6f,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x22, 0xc5, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2a, 0x28, 0x0a, 0x0e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x01, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6e, 0x69, 0x70, 0x61, 0x32, 0x32,
	0x2f, 0x67, 0x6f, 0x2d, 0x74, 0x61, 0x72, 0x69, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x6c, 0x69,
	0x62, 0x2f, 0x74, 0x61, 0x72, 0x69, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_sidechain_types_proto_rawDescOnce sync.Once
	file_sidechain_types_proto_rawDescData []byte
)

func file_sidechain_types_proto_rawDescGZIP() []byte {
	file_sidechain_types_proto_rawDescOnce.Do(func() {
		file_sidechain_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sidechain_types_proto_rawDesc), len(file_sidechain_types_proto_rawDesc)))
	})
	return file_sidechain_types_proto_rawDescData
}

var file_sidechain_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sidechain_types_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_sidechain_types_proto_goTypes = []any{
	(QuorumDecision)(0),               // 0: tari.rpc.QuorumDecision
	(*SideChainFeature)(nil),          // 1: tari.rpc.SideChainFeature
	(*SideChainId)(nil),               // 2: tari.rpc.SideChainId
	(*ValidatorNodeRegistration)(nil), // 3: tari.rpc.ValidatorNodeRegistration
	(*ValidatorNodeExit)(nil),         // 4: tari.rpc.ValidatorNodeExit
	(*TemplateRegistration)(nil),      // 5: tari.rpc.TemplateRegistration
	(*ConfidentialOutputData)(nil),    // 6: tari.rpc.ConfidentialOutputData
	(*TemplateType)(nil),              // 7: tari.rpc.TemplateType
	(*WasmInfo)(nil),                  // 8: tari.rpc.WasmInfo
	(*FlowInfo)(nil),                  // 9: tari.rpc.FlowInfo
	(*ManifestInfo)(nil),              // 10: tari.rpc.ManifestInfo
	(*BuildInfo)(nil),                 // 11: tari.rpc.BuildInfo
	(*EvictionProof)(nil),             // 12: tari.rpc.EvictionProof
	(*CommitProof)(nil),               // 13: tari.rpc.CommitProof
	(*CommitProofV1)(nil),             // 14: tari.rpc.CommitProofV1
	(*SidechainBlockCommitProof)(nil), // 15: tari.rpc.SidechainBlockCommitProof
	(*CommitProofElement)(nil),        // 16: tari.rpc.CommitProofElement
	(*DummyChain)(nil),                // 17: tari.rpc.DummyChain
	(*ChainLink)(nil),                 // 18: tari.rpc.ChainLink
	(*SidechainBlockHeader)(nil),      // 19: tari.rpc.SidechainBlockHeader
	(*ShardGroup)(nil),                // 20: tari.rpc.ShardGroup
	(*EvictAtom)(nil),                 // 21: tari.rpc.EvictAtom
	(*QuorumCertificate)(nil),         // 22: tari.rpc.QuorumCertificate
	(*ValidatorSignature)(nil),        // 23: tari.rpc.ValidatorSignature
	(*Signature)(nil),                 // 24: tari.rpc.Signature
}
var file_sidechain_types_proto_depIdxs = []int32{
	3,  // 0: tari.rpc.SideChainFeature.validator_node_registration:type_name -> tari.rpc.ValidatorNodeRegistration
	5,  // 1: tari.rpc.SideChainFeature.template_registration:type_name -> tari.rpc.TemplateRegistration
	6,  // 2: tari.rpc.SideChainFeature.confidential_output:type_name -> tari.rpc.ConfidentialOutputData
	12, // 3: tari.rpc.SideChainFeature.eviction_proof:type_name -> tari.rpc.EvictionProof
	4,  // 4: tari.rpc.SideChainFeature.validator_node_exit:type_name -> tari.rpc.ValidatorNodeExit
	2,  // 5: tari.rpc.SideChainFeature.sidechain_id:type_name -> tari.rpc.SideChainId
	24, // 6: tari.rpc.SideChainId.knowledge_proof:type_name -> tari.rpc.Signature
	24, // 7: tari.rpc.ValidatorNodeRegistration.signature:type_name -> tari.rpc.Signature
	24, // 8: tari.rpc.ValidatorNodeExit.signature:type_name -> tari.rpc.Signature
	24, // 9: tari.rpc.TemplateRegistration.author_signature:type_name -> tari.rpc.Signature
	7,  // 10: tari.rpc.TemplateRegistration.template_type:type_name -> tari.rpc.TemplateType
	11, // 11: tari.rpc.TemplateRegistration.build_info:type_name -> tari.rpc.BuildInfo
	8,  // 12: tari.rpc.TemplateType.wasm:type_name -> tari.rpc.WasmInfo
	9,  // 13: tari.rpc.TemplateType.flow:type_name -> tari.rpc.FlowInfo
	10, // 14: tari.rpc.TemplateType.manifest:type_name -> tari.rpc.ManifestInfo
	13, // 15: tari.rpc.EvictionProof.proof:type_name -> tari.rpc.CommitProof
	14, // 16: tari.rpc.CommitProof.v1:type_name -> tari.rpc.CommitProofV1
	15, // 17: tari.rpc.CommitProofV1.commit_proof:type_name -> tari.rpc.SidechainBlockCommitProof
	19, // 18: tari.rpc.SidechainBlockCommitProof.header:type_name -> tari.rpc.SidechainBlockHeader
	16, // 19: tari.rpc.SidechainBlockCommitProof.proof_elements:type_name -> tari.rpc.CommitProofElement
	22, // 20: tari.rpc.CommitProofElement.quorum_certificate:type_name -> tari.rpc.QuorumCertificate
	17, // 21: tari.rpc.CommitProofElement.dummy_chain:type_name -> tari.rpc.DummyChain
	18, // 22: tari.rpc.DummyChain.chain_links:type_name -> tari.rpc.ChainLink
	20, // 23: tari.rpc.SidechainBlockHeader.shard_group:type_name -> tari.rpc.ShardGroup
	24, // 24: tari.rpc.SidechainBlockHeader.signature:type_name -> tari.rpc.Signature
	23, // 25: tari.rpc.QuorumCertificate.signatures:type_name -> tari.rpc.ValidatorSignature
	0,  // 26: tari.rpc.QuorumCertificate.decision:type_name -> tari.rpc.QuorumDecision
	24, // 27: tari.rpc.ValidatorSignature.signature:type_name -> tari.rpc.Signature
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_sidechain_types_proto_init() }
func file_sidechain_types_proto_init() {
	if File_sidechain_types_proto != nil {
		return
	}
	file_types_proto_init()
	file_sidechain_types_proto_msgTypes[0].OneofWrappers = []any{
		(*SideChainFeature_ValidatorNodeRegistration)(nil),
		(*SideChainFeature_TemplateRegistration)(nil),
		(*SideChainFeature_ConfidentialOutput)(nil),
		(*SideChainFeature_EvictionProof)(nil),
		(*SideChainFeature_ValidatorNodeExit)(nil),
	}
	file_sidechain_types_proto_msgTypes[6].OneofWrappers = []any{
		(*TemplateType_Wasm)(nil),
		(*TemplateType_Flow)(nil),
		(*TemplateType_Manifest)(nil),
	}
	file_sidechain_types_proto_msgTypes[12].OneofWrappers = []any{
		(*CommitProof_V1)(nil),
	}
	file_sidechain_types_proto_msgTypes[15].OneofWrappers = []any{
		(*CommitProofElement_QuorumCertificate)(nil),
		(*CommitProofElement_DummyChain)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sidechain_types_proto_rawDesc), len(file_sidechain_types_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sidechain_types_proto_goTypes,
		DependencyIndexes: file_sidechain_types_proto_depIdxs,
		EnumInfos:         file_sidechain_types_proto_enumTypes,
		MessageInfos:      file_sidechain_types_proto_msgTypes,
	}.Build()
	File_sidechain_types_proto = out.File
	file_sidechain_types_proto_goTypes = nil
	file_sidechain_types_proto_depIdxs = nil
}
