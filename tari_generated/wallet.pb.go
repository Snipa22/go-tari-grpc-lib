// Copyright 2020. The Tari Project
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
// following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
// disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
// following disclaimer in the documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
// products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: wallet.proto

package tari_generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionDirection int32

const (
	TransactionDirection_TRANSACTION_DIRECTION_UNKNOWN  TransactionDirection = 0
	TransactionDirection_TRANSACTION_DIRECTION_INBOUND  TransactionDirection = 1
	TransactionDirection_TRANSACTION_DIRECTION_OUTBOUND TransactionDirection = 2
)

// Enum value maps for TransactionDirection.
var (
	TransactionDirection_name = map[int32]string{
		0: "TRANSACTION_DIRECTION_UNKNOWN",
		1: "TRANSACTION_DIRECTION_INBOUND",
		2: "TRANSACTION_DIRECTION_OUTBOUND",
	}
	TransactionDirection_value = map[string]int32{
		"TRANSACTION_DIRECTION_UNKNOWN":  0,
		"TRANSACTION_DIRECTION_INBOUND":  1,
		"TRANSACTION_DIRECTION_OUTBOUND": 2,
	}
)

func (x TransactionDirection) Enum() *TransactionDirection {
	p := new(TransactionDirection)
	*p = x
	return p
}

func (x TransactionDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_proto_enumTypes[0].Descriptor()
}

func (TransactionDirection) Type() protoreflect.EnumType {
	return &file_wallet_proto_enumTypes[0]
}

func (x TransactionDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionDirection.Descriptor instead.
func (TransactionDirection) EnumDescriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{0}
}

type TransactionStatus int32

const (
	// This transaction has been completed between the parties but has not been broadcast to the base layer network.
	TransactionStatus_TRANSACTION_STATUS_COMPLETED TransactionStatus = 0
	// This transaction has been broadcast to the base layer network and is currently in one or more base node mempools.
	TransactionStatus_TRANSACTION_STATUS_BROADCAST TransactionStatus = 1
	// This transaction has been mined and included in a block.
	TransactionStatus_TRANSACTION_STATUS_MINED_UNCONFIRMED TransactionStatus = 2
	// This transaction was generated as part of importing a spendable UTXO
	TransactionStatus_TRANSACTION_STATUS_IMPORTED TransactionStatus = 3
	// This transaction is still being negotiated by the parties
	TransactionStatus_TRANSACTION_STATUS_PENDING TransactionStatus = 4
	// This is a created Coinbase Transaction
	TransactionStatus_TRANSACTION_STATUS_COINBASE TransactionStatus = 5
	// This transaction is mined and confirmed at the current base node's height
	TransactionStatus_TRANSACTION_STATUS_MINED_CONFIRMED TransactionStatus = 6
	// The transaction was rejected by the mempool
	TransactionStatus_TRANSACTION_STATUS_REJECTED TransactionStatus = 7
	// This is faux transaction mainly for one-sided transaction outputs or wallet recovery outputs have been found
	TransactionStatus_TRANSACTION_STATUS_ONE_SIDED_UNCONFIRMED TransactionStatus = 8
	// All Imported and FauxUnconfirmed transactions will end up with this status when the outputs have been confirmed
	TransactionStatus_TRANSACTION_STATUS_ONE_SIDED_CONFIRMED TransactionStatus = 9
	// This transaction is still being queued for sending
	TransactionStatus_TRANSACTION_STATUS_QUEUED TransactionStatus = 10
	// The transaction was not found by the wallet its in transaction database
	TransactionStatus_TRANSACTION_STATUS_NOT_FOUND TransactionStatus = 11
	// This is Coinbase transaction that is detected from chain
	TransactionStatus_TRANSACTION_STATUS_COINBASE_UNCONFIRMED TransactionStatus = 12
	// This is Coinbase transaction that is detected from chain
	TransactionStatus_TRANSACTION_STATUS_COINBASE_CONFIRMED TransactionStatus = 13
	// This is Coinbase transaction that is not currently detected as mined
	TransactionStatus_TRANSACTION_STATUS_COINBASE_NOT_IN_BLOCK_CHAIN TransactionStatus = 14
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		0:  "TRANSACTION_STATUS_COMPLETED",
		1:  "TRANSACTION_STATUS_BROADCAST",
		2:  "TRANSACTION_STATUS_MINED_UNCONFIRMED",
		3:  "TRANSACTION_STATUS_IMPORTED",
		4:  "TRANSACTION_STATUS_PENDING",
		5:  "TRANSACTION_STATUS_COINBASE",
		6:  "TRANSACTION_STATUS_MINED_CONFIRMED",
		7:  "TRANSACTION_STATUS_REJECTED",
		8:  "TRANSACTION_STATUS_ONE_SIDED_UNCONFIRMED",
		9:  "TRANSACTION_STATUS_ONE_SIDED_CONFIRMED",
		10: "TRANSACTION_STATUS_QUEUED",
		11: "TRANSACTION_STATUS_NOT_FOUND",
		12: "TRANSACTION_STATUS_COINBASE_UNCONFIRMED",
		13: "TRANSACTION_STATUS_COINBASE_CONFIRMED",
		14: "TRANSACTION_STATUS_COINBASE_NOT_IN_BLOCK_CHAIN",
	}
	TransactionStatus_value = map[string]int32{
		"TRANSACTION_STATUS_COMPLETED":                   0,
		"TRANSACTION_STATUS_BROADCAST":                   1,
		"TRANSACTION_STATUS_MINED_UNCONFIRMED":           2,
		"TRANSACTION_STATUS_IMPORTED":                    3,
		"TRANSACTION_STATUS_PENDING":                     4,
		"TRANSACTION_STATUS_COINBASE":                    5,
		"TRANSACTION_STATUS_MINED_CONFIRMED":             6,
		"TRANSACTION_STATUS_REJECTED":                    7,
		"TRANSACTION_STATUS_ONE_SIDED_UNCONFIRMED":       8,
		"TRANSACTION_STATUS_ONE_SIDED_CONFIRMED":         9,
		"TRANSACTION_STATUS_QUEUED":                      10,
		"TRANSACTION_STATUS_NOT_FOUND":                   11,
		"TRANSACTION_STATUS_COINBASE_UNCONFIRMED":        12,
		"TRANSACTION_STATUS_COINBASE_CONFIRMED":          13,
		"TRANSACTION_STATUS_COINBASE_NOT_IN_BLOCK_CHAIN": 14,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_proto_enumTypes[1].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_wallet_proto_enumTypes[1]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{1}
}

// Enum for payment direction
type PaymentDirection int32

const (
	// Unknown or unspecified direction
	PaymentDirection_PAYMENT_DIRECTION_UNKNOWN PaymentDirection = 0
	// Payment received by this wallet
	PaymentDirection_PAYMENT_DIRECTION_INBOUND PaymentDirection = 1
	// Payment sent from this wallet
	PaymentDirection_PAYMENT_DIRECTION_OUTBOUND PaymentDirection = 2
)

// Enum value maps for PaymentDirection.
var (
	PaymentDirection_name = map[int32]string{
		0: "PAYMENT_DIRECTION_UNKNOWN",
		1: "PAYMENT_DIRECTION_INBOUND",
		2: "PAYMENT_DIRECTION_OUTBOUND",
	}
	PaymentDirection_value = map[string]int32{
		"PAYMENT_DIRECTION_UNKNOWN":  0,
		"PAYMENT_DIRECTION_INBOUND":  1,
		"PAYMENT_DIRECTION_OUTBOUND": 2,
	}
)

func (x PaymentDirection) Enum() *PaymentDirection {
	p := new(PaymentDirection)
	*p = x
	return p
}

func (x PaymentDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_proto_enumTypes[2].Descriptor()
}

func (PaymentDirection) Type() protoreflect.EnumType {
	return &file_wallet_proto_enumTypes[2]
}

func (x PaymentDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentDirection.Descriptor instead.
func (PaymentDirection) EnumDescriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{2}
}

type PaymentRecipient_PaymentType int32

const (
	// Default Mimblewimble-style transaction.
	//
	// Deprecated: Do not use.
	PaymentRecipient_STANDARD_MIMBLEWIMBLE PaymentRecipient_PaymentType = 0
	// One-sided transaction (receiver not required to participate).
	//
	// Deprecated: Do not use.
	PaymentRecipient_ONE_SIDED PaymentRecipient_PaymentType = 1
	// One-sided stealth address (adds privacy by hiding destination).
	PaymentRecipient_ONE_SIDED_TO_STEALTH_ADDRESS PaymentRecipient_PaymentType = 2
)

// Enum value maps for PaymentRecipient_PaymentType.
var (
	PaymentRecipient_PaymentType_name = map[int32]string{
		0: "STANDARD_MIMBLEWIMBLE",
		1: "ONE_SIDED",
		2: "ONE_SIDED_TO_STEALTH_ADDRESS",
	}
	PaymentRecipient_PaymentType_value = map[string]int32{
		"STANDARD_MIMBLEWIMBLE":        0,
		"ONE_SIDED":                    1,
		"ONE_SIDED_TO_STEALTH_ADDRESS": 2,
	}
)

func (x PaymentRecipient_PaymentType) Enum() *PaymentRecipient_PaymentType {
	p := new(PaymentRecipient_PaymentType)
	*p = x
	return p
}

func (x PaymentRecipient_PaymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentRecipient_PaymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_proto_enumTypes[3].Descriptor()
}

func (PaymentRecipient_PaymentType) Type() protoreflect.EnumType {
	return &file_wallet_proto_enumTypes[3]
}

func (x PaymentRecipient_PaymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentRecipient_PaymentType.Descriptor instead.
func (PaymentRecipient_PaymentType) EnumDescriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{12, 0}
}

// Describes the wallet's network connection state
type CheckConnectivityResponse_OnlineStatus int32

const (
	// The wallet is attempting to connect to peers
	CheckConnectivityResponse_Connecting CheckConnectivityResponse_OnlineStatus = 0
	// The wallet is successfully connected to peers
	CheckConnectivityResponse_Online CheckConnectivityResponse_OnlineStatus = 1
	// The wallet is not connected to any peers
	CheckConnectivityResponse_Offline CheckConnectivityResponse_OnlineStatus = 2
)

// Enum value maps for CheckConnectivityResponse_OnlineStatus.
var (
	CheckConnectivityResponse_OnlineStatus_name = map[int32]string{
		0: "Connecting",
		1: "Online",
		2: "Offline",
	}
	CheckConnectivityResponse_OnlineStatus_value = map[string]int32{
		"Connecting": 0,
		"Online":     1,
		"Offline":    2,
	}
)

func (x CheckConnectivityResponse_OnlineStatus) Enum() *CheckConnectivityResponse_OnlineStatus {
	p := new(CheckConnectivityResponse_OnlineStatus)
	*p = x
	return p
}

func (x CheckConnectivityResponse_OnlineStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckConnectivityResponse_OnlineStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_wallet_proto_enumTypes[4].Descriptor()
}

func (CheckConnectivityResponse_OnlineStatus) Type() protoreflect.EnumType {
	return &file_wallet_proto_enumTypes[4]
}

func (x CheckConnectivityResponse_OnlineStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckConnectivityResponse_OnlineStatus.Descriptor instead.
func (CheckConnectivityResponse_OnlineStatus) EnumDescriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{48, 0}
}

type GetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVersionRequest) Reset() {
	*x = GetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionRequest) ProtoMessage() {}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{0}
}

type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *GetVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InteractiveAddress []byte `protobuf:"bytes,1,opt,name=interactive_address,json=interactiveAddress,proto3" json:"interactive_address,omitempty"`
	OneSidedAddress    []byte `protobuf:"bytes,2,opt,name=one_sided_address,json=oneSidedAddress,proto3" json:"one_sided_address,omitempty"`
}

func (x *GetAddressResponse) Reset() {
	*x = GetAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressResponse) ProtoMessage() {}

func (x *GetAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressResponse.ProtoReflect.Descriptor instead.
func (*GetAddressResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *GetAddressResponse) GetInteractiveAddress() []byte {
	if x != nil {
		return x.InteractiveAddress
	}
	return nil
}

func (x *GetAddressResponse) GetOneSidedAddress() []byte {
	if x != nil {
		return x.OneSidedAddress
	}
	return nil
}

type GetPaymentIdAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId []byte `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (x *GetPaymentIdAddressRequest) Reset() {
	*x = GetPaymentIdAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentIdAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentIdAddressRequest) ProtoMessage() {}

func (x *GetPaymentIdAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentIdAddressRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentIdAddressRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *GetPaymentIdAddressRequest) GetPaymentId() []byte {
	if x != nil {
		return x.PaymentId
	}
	return nil
}

// Response message containing all formats of wallet addresses.
type GetCompleteAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Binary form of the interactive address.
	InteractiveAddress []byte `protobuf:"bytes,1,opt,name=interactive_address,json=interactiveAddress,proto3" json:"interactive_address,omitempty"`
	// Binary form of the one-sided address.
	OneSidedAddress []byte `protobuf:"bytes,2,opt,name=one_sided_address,json=oneSidedAddress,proto3" json:"one_sided_address,omitempty"`
	// Base58-encoded version of the interactive address.
	InteractiveAddressBase58 string `protobuf:"bytes,3,opt,name=interactive_address_base58,json=interactiveAddressBase58,proto3" json:"interactive_address_base58,omitempty"`
	// Base58-encoded version of the one-sided address.
	OneSidedAddressBase58 string `protobuf:"bytes,4,opt,name=one_sided_address_base58,json=oneSidedAddressBase58,proto3" json:"one_sided_address_base58,omitempty"`
	// Emoji-encoded version of the interactive address.
	InteractiveAddressEmoji string `protobuf:"bytes,5,opt,name=interactive_address_emoji,json=interactiveAddressEmoji,proto3" json:"interactive_address_emoji,omitempty"`
	// Emoji-encoded version of the one-sided address.
	OneSidedAddressEmoji string `protobuf:"bytes,6,opt,name=one_sided_address_emoji,json=oneSidedAddressEmoji,proto3" json:"one_sided_address_emoji,omitempty"`
}

func (x *GetCompleteAddressResponse) Reset() {
	*x = GetCompleteAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompleteAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompleteAddressResponse) ProtoMessage() {}

func (x *GetCompleteAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompleteAddressResponse.ProtoReflect.Descriptor instead.
func (*GetCompleteAddressResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *GetCompleteAddressResponse) GetInteractiveAddress() []byte {
	if x != nil {
		return x.InteractiveAddress
	}
	return nil
}

func (x *GetCompleteAddressResponse) GetOneSidedAddress() []byte {
	if x != nil {
		return x.OneSidedAddress
	}
	return nil
}

func (x *GetCompleteAddressResponse) GetInteractiveAddressBase58() string {
	if x != nil {
		return x.InteractiveAddressBase58
	}
	return ""
}

func (x *GetCompleteAddressResponse) GetOneSidedAddressBase58() string {
	if x != nil {
		return x.OneSidedAddressBase58
	}
	return ""
}

func (x *GetCompleteAddressResponse) GetInteractiveAddressEmoji() string {
	if x != nil {
		return x.InteractiveAddressEmoji
	}
	return ""
}

func (x *GetCompleteAddressResponse) GetOneSidedAddressEmoji() string {
	if x != nil {
		return x.OneSidedAddressEmoji
	}
	return ""
}

// A request to preapre a one sided transaction for offline signing
type PrepareOneSidedTransactionForSigningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipient *PaymentRecipient `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (x *PrepareOneSidedTransactionForSigningRequest) Reset() {
	*x = PrepareOneSidedTransactionForSigningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareOneSidedTransactionForSigningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareOneSidedTransactionForSigningRequest) ProtoMessage() {}

func (x *PrepareOneSidedTransactionForSigningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareOneSidedTransactionForSigningRequest.ProtoReflect.Descriptor instead.
func (*PrepareOneSidedTransactionForSigningRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *PrepareOneSidedTransactionForSigningRequest) GetRecipient() *PaymentRecipient {
	if x != nil {
		return x.Recipient
	}
	return nil
}

type PrepareOneSidedTransactionForSigningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess      bool   `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	Result         string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	FailureMessage string `protobuf:"bytes,3,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
}

func (x *PrepareOneSidedTransactionForSigningResponse) Reset() {
	*x = PrepareOneSidedTransactionForSigningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareOneSidedTransactionForSigningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareOneSidedTransactionForSigningResponse) ProtoMessage() {}

func (x *PrepareOneSidedTransactionForSigningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareOneSidedTransactionForSigningResponse.ProtoReflect.Descriptor instead.
func (*PrepareOneSidedTransactionForSigningResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *PrepareOneSidedTransactionForSigningResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *PrepareOneSidedTransactionForSigningResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *PrepareOneSidedTransactionForSigningResponse) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

// A request to broadcast a signed one sided transaction
type BroadcastSignedOneSidedTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *BroadcastSignedOneSidedTransactionRequest) Reset() {
	*x = BroadcastSignedOneSidedTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastSignedOneSidedTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastSignedOneSidedTransactionRequest) ProtoMessage() {}

func (x *BroadcastSignedOneSidedTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastSignedOneSidedTransactionRequest.ProtoReflect.Descriptor instead.
func (*BroadcastSignedOneSidedTransactionRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{7}
}

func (x *BroadcastSignedOneSidedTransactionRequest) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type BroadcastSignedOneSidedTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess      bool   `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	TransactionId  uint64 `protobuf:"varint,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	FailureMessage string `protobuf:"bytes,3,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
}

func (x *BroadcastSignedOneSidedTransactionResponse) Reset() {
	*x = BroadcastSignedOneSidedTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastSignedOneSidedTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastSignedOneSidedTransactionResponse) ProtoMessage() {}

func (x *BroadcastSignedOneSidedTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastSignedOneSidedTransactionResponse.ProtoReflect.Descriptor instead.
func (*BroadcastSignedOneSidedTransactionResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *BroadcastSignedOneSidedTransactionResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *BroadcastSignedOneSidedTransactionResponse) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *BroadcastSignedOneSidedTransactionResponse) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

// A request to send funds to one or more recipients.
type TransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipients []*PaymentRecipient `protobuf:"bytes,1,rep,name=recipients,proto3" json:"recipients,omitempty"`
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{9}
}

func (x *TransferRequest) GetRecipients() []*PaymentRecipient {
	if x != nil {
		return x.Recipients
	}
	return nil
}

type SendShaAtomicSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipient *PaymentRecipient `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (x *SendShaAtomicSwapRequest) Reset() {
	*x = SendShaAtomicSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendShaAtomicSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendShaAtomicSwapRequest) ProtoMessage() {}

func (x *SendShaAtomicSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendShaAtomicSwapRequest.ProtoReflect.Descriptor instead.
func (*SendShaAtomicSwapRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{10}
}

func (x *SendShaAtomicSwapRequest) GetRecipient() *PaymentRecipient {
	if x != nil {
		return x.Recipient
	}
	return nil
}

type CreateBurnTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount                 uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	FeePerGram             uint64 `protobuf:"varint,2,opt,name=fee_per_gram,json=feePerGram,proto3" json:"fee_per_gram,omitempty"`
	ClaimPublicKey         []byte `protobuf:"bytes,4,opt,name=claim_public_key,json=claimPublicKey,proto3" json:"claim_public_key,omitempty"`
	PaymentId              []byte `protobuf:"bytes,5,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	SidechainDeploymentKey []byte `protobuf:"bytes,6,opt,name=sidechain_deployment_key,json=sidechainDeploymentKey,proto3" json:"sidechain_deployment_key,omitempty"`
}

func (x *CreateBurnTransactionRequest) Reset() {
	*x = CreateBurnTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBurnTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBurnTransactionRequest) ProtoMessage() {}

func (x *CreateBurnTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBurnTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateBurnTransactionRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{11}
}

func (x *CreateBurnTransactionRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateBurnTransactionRequest) GetFeePerGram() uint64 {
	if x != nil {
		return x.FeePerGram
	}
	return 0
}

func (x *CreateBurnTransactionRequest) GetClaimPublicKey() []byte {
	if x != nil {
		return x.ClaimPublicKey
	}
	return nil
}

func (x *CreateBurnTransactionRequest) GetPaymentId() []byte {
	if x != nil {
		return x.PaymentId
	}
	return nil
}

func (x *CreateBurnTransactionRequest) GetSidechainDeploymentKey() []byte {
	if x != nil {
		return x.SidechainDeploymentKey
	}
	return nil
}

// A recipient for a transfer, including address, amount, fee, and optional payment ID.
type PaymentRecipient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base58 Tari address of the recipient.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Amount to send in microTari (1 T = 1_000_000 µT).
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Fee rate per gram.
	FeePerGram uint64 `protobuf:"varint,3,opt,name=fee_per_gram,json=feePerGram,proto3" json:"fee_per_gram,omitempty"`
	// The type of payment to perform.
	PaymentType PaymentRecipient_PaymentType `protobuf:"varint,5,opt,name=payment_type,json=paymentType,proto3,enum=tari.rpc.PaymentRecipient_PaymentType" json:"payment_type,omitempty"`
	// raw payment id
	RawPaymentId []byte `protobuf:"bytes,6,opt,name=raw_payment_id,json=rawPaymentId,proto3" json:"raw_payment_id,omitempty"`
	// Optional user encrypted payment ID for reference (max 256 bytes).
	UserPaymentId *UserPaymentId `protobuf:"bytes,7,opt,name=user_payment_id,json=userPaymentId,proto3" json:"user_payment_id,omitempty"`
}

func (x *PaymentRecipient) Reset() {
	*x = PaymentRecipient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentRecipient) ProtoMessage() {}

func (x *PaymentRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentRecipient.ProtoReflect.Descriptor instead.
func (*PaymentRecipient) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{12}
}

func (x *PaymentRecipient) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PaymentRecipient) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PaymentRecipient) GetFeePerGram() uint64 {
	if x != nil {
		return x.FeePerGram
	}
	return 0
}

func (x *PaymentRecipient) GetPaymentType() PaymentRecipient_PaymentType {
	if x != nil {
		return x.PaymentType
	}
	return PaymentRecipient_STANDARD_MIMBLEWIMBLE
}

func (x *PaymentRecipient) GetRawPaymentId() []byte {
	if x != nil {
		return x.RawPaymentId
	}
	return nil
}

func (x *PaymentRecipient) GetUserPaymentId() *UserPaymentId {
	if x != nil {
		return x.UserPaymentId
	}
	return nil
}

type TransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*TransferResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *TransferResponse) Reset() {
	*x = TransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponse) ProtoMessage() {}

func (x *TransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponse.ProtoReflect.Descriptor instead.
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{13}
}

func (x *TransferResponse) GetResults() []*TransferResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type SendShaAtomicSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId  uint64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	PreImage       string `protobuf:"bytes,2,opt,name=pre_image,json=preImage,proto3" json:"pre_image,omitempty"`
	OutputHash     string `protobuf:"bytes,3,opt,name=output_hash,json=outputHash,proto3" json:"output_hash,omitempty"`
	IsSuccess      bool   `protobuf:"varint,4,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	FailureMessage string `protobuf:"bytes,5,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
}

func (x *SendShaAtomicSwapResponse) Reset() {
	*x = SendShaAtomicSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendShaAtomicSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendShaAtomicSwapResponse) ProtoMessage() {}

func (x *SendShaAtomicSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendShaAtomicSwapResponse.ProtoReflect.Descriptor instead.
func (*SendShaAtomicSwapResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{14}
}

func (x *SendShaAtomicSwapResponse) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *SendShaAtomicSwapResponse) GetPreImage() string {
	if x != nil {
		return x.PreImage
	}
	return ""
}

func (x *SendShaAtomicSwapResponse) GetOutputHash() string {
	if x != nil {
		return x.OutputHash
	}
	return ""
}

func (x *SendShaAtomicSwapResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *SendShaAtomicSwapResponse) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

type CreateBurnTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId            uint64               `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	IsSuccess                bool                 `protobuf:"varint,2,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	FailureMessage           string               `protobuf:"bytes,3,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	Commitment               []byte               `protobuf:"bytes,4,opt,name=commitment,proto3" json:"commitment,omitempty"`
	OwnershipProof           *CommitmentSignature `protobuf:"bytes,5,opt,name=ownership_proof,json=ownershipProof,proto3" json:"ownership_proof,omitempty"`
	RangeProof               []byte               `protobuf:"bytes,6,opt,name=range_proof,json=rangeProof,proto3" json:"range_proof,omitempty"`
	ReciprocalClaimPublicKey []byte               `protobuf:"bytes,7,opt,name=reciprocal_claim_public_key,json=reciprocalClaimPublicKey,proto3" json:"reciprocal_claim_public_key,omitempty"`
}

func (x *CreateBurnTransactionResponse) Reset() {
	*x = CreateBurnTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBurnTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBurnTransactionResponse) ProtoMessage() {}

func (x *CreateBurnTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBurnTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateBurnTransactionResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{15}
}

func (x *CreateBurnTransactionResponse) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *CreateBurnTransactionResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *CreateBurnTransactionResponse) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *CreateBurnTransactionResponse) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *CreateBurnTransactionResponse) GetOwnershipProof() *CommitmentSignature {
	if x != nil {
		return x.OwnershipProof
	}
	return nil
}

func (x *CreateBurnTransactionResponse) GetRangeProof() []byte {
	if x != nil {
		return x.RangeProof
	}
	return nil
}

func (x *CreateBurnTransactionResponse) GetReciprocalClaimPublicKey() []byte {
	if x != nil {
		return x.ReciprocalClaimPublicKey
	}
	return nil
}

type TransferResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string           `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	TransactionId   uint64           `protobuf:"varint,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	IsSuccess       bool             `protobuf:"varint,3,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	FailureMessage  string           `protobuf:"bytes,4,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	TransactionInfo *TransactionInfo `protobuf:"bytes,5,opt,name=transaction_info,json=transactionInfo,proto3" json:"transaction_info,omitempty"`
}

func (x *TransferResult) Reset() {
	*x = TransferResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResult) ProtoMessage() {}

func (x *TransferResult) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResult.ProtoReflect.Descriptor instead.
func (*TransferResult) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{16}
}

func (x *TransferResult) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TransferResult) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *TransferResult) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *TransferResult) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *TransferResult) GetTransactionInfo() *TransactionInfo {
	if x != nil {
		return x.TransactionInfo
	}
	return nil
}

type ClaimShaAtomicSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output     string `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	PreImage   string `protobuf:"bytes,2,opt,name=pre_image,json=preImage,proto3" json:"pre_image,omitempty"`
	FeePerGram uint64 `protobuf:"varint,3,opt,name=fee_per_gram,json=feePerGram,proto3" json:"fee_per_gram,omitempty"`
}

func (x *ClaimShaAtomicSwapRequest) Reset() {
	*x = ClaimShaAtomicSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimShaAtomicSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimShaAtomicSwapRequest) ProtoMessage() {}

func (x *ClaimShaAtomicSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimShaAtomicSwapRequest.ProtoReflect.Descriptor instead.
func (*ClaimShaAtomicSwapRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{17}
}

func (x *ClaimShaAtomicSwapRequest) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ClaimShaAtomicSwapRequest) GetPreImage() string {
	if x != nil {
		return x.PreImage
	}
	return ""
}

func (x *ClaimShaAtomicSwapRequest) GetFeePerGram() uint64 {
	if x != nil {
		return x.FeePerGram
	}
	return 0
}

type ClaimShaAtomicSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results *TransferResult `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`
}

func (x *ClaimShaAtomicSwapResponse) Reset() {
	*x = ClaimShaAtomicSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimShaAtomicSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimShaAtomicSwapResponse) ProtoMessage() {}

func (x *ClaimShaAtomicSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimShaAtomicSwapResponse.ProtoReflect.Descriptor instead.
func (*ClaimShaAtomicSwapResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{18}
}

func (x *ClaimShaAtomicSwapResponse) GetResults() *TransferResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type ClaimHtlcRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputHash string `protobuf:"bytes,1,opt,name=output_hash,json=outputHash,proto3" json:"output_hash,omitempty"`
	FeePerGram uint64 `protobuf:"varint,2,opt,name=fee_per_gram,json=feePerGram,proto3" json:"fee_per_gram,omitempty"`
}

func (x *ClaimHtlcRefundRequest) Reset() {
	*x = ClaimHtlcRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimHtlcRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimHtlcRefundRequest) ProtoMessage() {}

func (x *ClaimHtlcRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimHtlcRefundRequest.ProtoReflect.Descriptor instead.
func (*ClaimHtlcRefundRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{19}
}

func (x *ClaimHtlcRefundRequest) GetOutputHash() string {
	if x != nil {
		return x.OutputHash
	}
	return ""
}

func (x *ClaimHtlcRefundRequest) GetFeePerGram() uint64 {
	if x != nil {
		return x.FeePerGram
	}
	return 0
}

type ClaimHtlcRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results *TransferResult `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`
}

func (x *ClaimHtlcRefundResponse) Reset() {
	*x = ClaimHtlcRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimHtlcRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimHtlcRefundResponse) ProtoMessage() {}

func (x *ClaimHtlcRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimHtlcRefundResponse.ProtoReflect.Descriptor instead.
func (*ClaimHtlcRefundResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{20}
}

func (x *ClaimHtlcRefundResponse) GetResults() *TransferResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetTransactionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionIds []uint64 `protobuf:"varint,1,rep,packed,name=transaction_ids,json=transactionIds,proto3" json:"transaction_ids,omitempty"`
}

func (x *GetTransactionInfoRequest) Reset() {
	*x = GetTransactionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionInfoRequest) ProtoMessage() {}

func (x *GetTransactionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionInfoRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionInfoRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{21}
}

func (x *GetTransactionInfoRequest) GetTransactionIds() []uint64 {
	if x != nil {
		return x.TransactionIds
	}
	return nil
}

type GetTransactionInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*TransactionInfo `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *GetTransactionInfoResponse) Reset() {
	*x = GetTransactionInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionInfoResponse) ProtoMessage() {}

func (x *GetTransactionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionInfoResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionInfoResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{22}
}

func (x *GetTransactionInfoResponse) GetTransactions() []*TransactionInfo {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type TransactionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId                      uint64               `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	SourceAddress             []byte               `protobuf:"bytes,2,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	DestAddress               []byte               `protobuf:"bytes,3,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	Status                    TransactionStatus    `protobuf:"varint,4,opt,name=status,proto3,enum=tari.rpc.TransactionStatus" json:"status,omitempty"`
	Direction                 TransactionDirection `protobuf:"varint,5,opt,name=direction,proto3,enum=tari.rpc.TransactionDirection" json:"direction,omitempty"`
	Amount                    uint64               `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee                       uint64               `protobuf:"varint,7,opt,name=fee,proto3" json:"fee,omitempty"`
	IsCancelled               bool                 `protobuf:"varint,8,opt,name=is_cancelled,json=isCancelled,proto3" json:"is_cancelled,omitempty"`
	ExcessSig                 []byte               `protobuf:"bytes,9,opt,name=excess_sig,json=excessSig,proto3" json:"excess_sig,omitempty"`
	Timestamp                 uint64               `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RawPaymentId              []byte               `protobuf:"bytes,12,opt,name=raw_payment_id,json=rawPaymentId,proto3" json:"raw_payment_id,omitempty"`
	MinedInBlockHeight        uint64               `protobuf:"varint,13,opt,name=mined_in_block_height,json=minedInBlockHeight,proto3" json:"mined_in_block_height,omitempty"`
	UserPaymentId             []byte               `protobuf:"bytes,14,opt,name=user_payment_id,json=userPaymentId,proto3" json:"user_payment_id,omitempty"`
	InputCommitments          [][]byte             `protobuf:"bytes,15,rep,name=input_commitments,json=inputCommitments,proto3" json:"input_commitments,omitempty"`
	OutputCommitments         [][]byte             `protobuf:"bytes,16,rep,name=output_commitments,json=outputCommitments,proto3" json:"output_commitments,omitempty"`
	PaymentReferencesSent     [][]byte             `protobuf:"bytes,17,rep,name=payment_references_sent,json=paymentReferencesSent,proto3" json:"payment_references_sent,omitempty"`
	PaymentReferencesReceived [][]byte             `protobuf:"bytes,18,rep,name=payment_references_received,json=paymentReferencesReceived,proto3" json:"payment_references_received,omitempty"`
	PaymentReferencesChange   [][]byte             `protobuf:"bytes,19,rep,name=payment_references_change,json=paymentReferencesChange,proto3" json:"payment_references_change,omitempty"`
}

func (x *TransactionInfo) Reset() {
	*x = TransactionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInfo) ProtoMessage() {}

func (x *TransactionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInfo.ProtoReflect.Descriptor instead.
func (*TransactionInfo) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{23}
}

func (x *TransactionInfo) GetTxId() uint64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *TransactionInfo) GetSourceAddress() []byte {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

func (x *TransactionInfo) GetDestAddress() []byte {
	if x != nil {
		return x.DestAddress
	}
	return nil
}

func (x *TransactionInfo) GetStatus() TransactionStatus {
	if x != nil {
		return x.Status
	}
	return TransactionStatus_TRANSACTION_STATUS_COMPLETED
}

func (x *TransactionInfo) GetDirection() TransactionDirection {
	if x != nil {
		return x.Direction
	}
	return TransactionDirection_TRANSACTION_DIRECTION_UNKNOWN
}

func (x *TransactionInfo) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransactionInfo) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TransactionInfo) GetIsCancelled() bool {
	if x != nil {
		return x.IsCancelled
	}
	return false
}

func (x *TransactionInfo) GetExcessSig() []byte {
	if x != nil {
		return x.ExcessSig
	}
	return nil
}

func (x *TransactionInfo) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TransactionInfo) GetRawPaymentId() []byte {
	if x != nil {
		return x.RawPaymentId
	}
	return nil
}

func (x *TransactionInfo) GetMinedInBlockHeight() uint64 {
	if x != nil {
		return x.MinedInBlockHeight
	}
	return 0
}

func (x *TransactionInfo) GetUserPaymentId() []byte {
	if x != nil {
		return x.UserPaymentId
	}
	return nil
}

func (x *TransactionInfo) GetInputCommitments() [][]byte {
	if x != nil {
		return x.InputCommitments
	}
	return nil
}

func (x *TransactionInfo) GetOutputCommitments() [][]byte {
	if x != nil {
		return x.OutputCommitments
	}
	return nil
}

func (x *TransactionInfo) GetPaymentReferencesSent() [][]byte {
	if x != nil {
		return x.PaymentReferencesSent
	}
	return nil
}

func (x *TransactionInfo) GetPaymentReferencesReceived() [][]byte {
	if x != nil {
		return x.PaymentReferencesReceived
	}
	return nil
}

func (x *TransactionInfo) GetPaymentReferencesChange() [][]byte {
	if x != nil {
		return x.PaymentReferencesChange
	}
	return nil
}

type GetCompletedTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId   *UserPaymentId `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	BlockHash   *BlockHashHex  `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockHeight *BlockHeight   `protobuf:"bytes,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *GetCompletedTransactionsRequest) Reset() {
	*x = GetCompletedTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompletedTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompletedTransactionsRequest) ProtoMessage() {}

func (x *GetCompletedTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompletedTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetCompletedTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{24}
}

func (x *GetCompletedTransactionsRequest) GetPaymentId() *UserPaymentId {
	if x != nil {
		return x.PaymentId
	}
	return nil
}

func (x *GetCompletedTransactionsRequest) GetBlockHash() *BlockHashHex {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *GetCompletedTransactionsRequest) GetBlockHeight() *BlockHeight {
	if x != nil {
		return x.BlockHeight
	}
	return nil
}

type BlockHashHex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *BlockHashHex) Reset() {
	*x = BlockHashHex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHashHex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHashHex) ProtoMessage() {}

func (x *BlockHashHex) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHashHex.ProtoReflect.Descriptor instead.
func (*BlockHashHex) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{25}
}

func (x *BlockHashHex) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetCompletedTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *TransactionInfo `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *GetCompletedTransactionsResponse) Reset() {
	*x = GetCompletedTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompletedTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompletedTransactionsResponse) ProtoMessage() {}

func (x *GetCompletedTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompletedTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetCompletedTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{26}
}

func (x *GetCompletedTransactionsResponse) GetTransaction() *TransactionInfo {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// Request message for GetBalance RPC.
type GetBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: A user-defined payment ID to filter balance data.
	// Must provide only one of the following fields: u256, utf8_string, or user_bytes.
	PaymentId *UserPaymentId `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (x *GetBalanceRequest) Reset() {
	*x = GetBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceRequest) ProtoMessage() {}

func (x *GetBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{27}
}

func (x *GetBalanceRequest) GetPaymentId() *UserPaymentId {
	if x != nil {
		return x.PaymentId
	}
	return nil
}

type UserPaymentId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	U256       []byte `protobuf:"bytes,1,opt,name=u256,proto3" json:"u256,omitempty"`
	Utf8String string `protobuf:"bytes,2,opt,name=utf8_string,json=utf8String,proto3" json:"utf8_string,omitempty"`
	UserBytes  []byte `protobuf:"bytes,3,opt,name=user_bytes,json=userBytes,proto3" json:"user_bytes,omitempty"`
}

func (x *UserPaymentId) Reset() {
	*x = UserPaymentId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPaymentId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPaymentId) ProtoMessage() {}

func (x *UserPaymentId) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPaymentId.ProtoReflect.Descriptor instead.
func (*UserPaymentId) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{28}
}

func (x *UserPaymentId) GetU256() []byte {
	if x != nil {
		return x.U256
	}
	return nil
}

func (x *UserPaymentId) GetUtf8String() string {
	if x != nil {
		return x.Utf8String
	}
	return ""
}

func (x *UserPaymentId) GetUserBytes() []byte {
	if x != nil {
		return x.UserBytes
	}
	return nil
}

type GetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStateRequest) Reset() {
	*x = GetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRequest) ProtoMessage() {}

func (x *GetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRequest.ProtoReflect.Descriptor instead.
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{29}
}

type GetBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableBalance       uint64 `protobuf:"varint,1,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	PendingIncomingBalance uint64 `protobuf:"varint,2,opt,name=pending_incoming_balance,json=pendingIncomingBalance,proto3" json:"pending_incoming_balance,omitempty"`
	PendingOutgoingBalance uint64 `protobuf:"varint,3,opt,name=pending_outgoing_balance,json=pendingOutgoingBalance,proto3" json:"pending_outgoing_balance,omitempty"`
	TimelockedBalance      uint64 `protobuf:"varint,4,opt,name=timelocked_balance,json=timelockedBalance,proto3" json:"timelocked_balance,omitempty"`
}

func (x *GetBalanceResponse) Reset() {
	*x = GetBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceResponse) ProtoMessage() {}

func (x *GetBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{30}
}

func (x *GetBalanceResponse) GetAvailableBalance() uint64 {
	if x != nil {
		return x.AvailableBalance
	}
	return 0
}

func (x *GetBalanceResponse) GetPendingIncomingBalance() uint64 {
	if x != nil {
		return x.PendingIncomingBalance
	}
	return 0
}

func (x *GetBalanceResponse) GetPendingOutgoingBalance() uint64 {
	if x != nil {
		return x.PendingOutgoingBalance
	}
	return 0
}

func (x *GetBalanceResponse) GetTimelockedBalance() uint64 {
	if x != nil {
		return x.TimelockedBalance
	}
	return 0
}

// Response message for GetState
type GetStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The blockchain height (in blocks) that the wallet has scanned up to
	ScannedHeight uint64 `protobuf:"varint,1,opt,name=scanned_height,json=scannedHeight,proto3" json:"scanned_height,omitempty"`
	// Current wallet balance information (available, pending), based on the GetBalanceResponse
	Balance *GetBalanceResponse `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// Status of the wallet's connection to the base node, based on the NetworkStatusResponse
	Network *NetworkStatusResponse `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *GetStateResponse) Reset() {
	*x = GetStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateResponse) ProtoMessage() {}

func (x *GetStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateResponse.ProtoReflect.Descriptor instead.
func (*GetStateResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{31}
}

func (x *GetStateResponse) GetScannedHeight() uint64 {
	if x != nil {
		return x.ScannedHeight
	}
	return 0
}

func (x *GetStateResponse) GetBalance() *GetBalanceResponse {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *GetStateResponse) GetNetwork() *NetworkStatusResponse {
	if x != nil {
		return x.Network
	}
	return nil
}

// Response message for GetUnspentAmounts RPC.
type GetUnspentAmountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total value of all unspent outputs, in the smallest unit (e.g., microTari).
	Amount []uint64 `protobuf:"varint,1,rep,packed,name=amount,proto3" json:"amount,omitempty"`
}

func (x *GetUnspentAmountsResponse) Reset() {
	*x = GetUnspentAmountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnspentAmountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnspentAmountsResponse) ProtoMessage() {}

func (x *GetUnspentAmountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnspentAmountsResponse.ProtoReflect.Descriptor instead.
func (*GetUnspentAmountsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{32}
}

func (x *GetUnspentAmountsResponse) GetAmount() []uint64 {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Request message for the CoinSplit RPC.
type CoinSplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of each output to create.
	AmountPerSplit uint64 `protobuf:"varint,1,opt,name=amount_per_split,json=amountPerSplit,proto3" json:"amount_per_split,omitempty"`
	// The number of outputs to create in total.
	SplitCount uint64 `protobuf:"varint,2,opt,name=split_count,json=splitCount,proto3" json:"split_count,omitempty"`
	// Fee rate per weight unit (gram).
	FeePerGram uint64 `protobuf:"varint,3,opt,name=fee_per_gram,json=feePerGram,proto3" json:"fee_per_gram,omitempty"`
	// Block height when the transaction becomes valid.
	LockHeight uint64 `protobuf:"varint,5,opt,name=lock_height,json=lockHeight,proto3" json:"lock_height,omitempty"`
	// Optional identifier for referencing the transaction.
	PaymentId []byte `protobuf:"bytes,6,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (x *CoinSplitRequest) Reset() {
	*x = CoinSplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinSplitRequest) ProtoMessage() {}

func (x *CoinSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinSplitRequest.ProtoReflect.Descriptor instead.
func (*CoinSplitRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{33}
}

func (x *CoinSplitRequest) GetAmountPerSplit() uint64 {
	if x != nil {
		return x.AmountPerSplit
	}
	return 0
}

func (x *CoinSplitRequest) GetSplitCount() uint64 {
	if x != nil {
		return x.SplitCount
	}
	return 0
}

func (x *CoinSplitRequest) GetFeePerGram() uint64 {
	if x != nil {
		return x.FeePerGram
	}
	return 0
}

func (x *CoinSplitRequest) GetLockHeight() uint64 {
	if x != nil {
		return x.LockHeight
	}
	return 0
}

func (x *CoinSplitRequest) GetPaymentId() []byte {
	if x != nil {
		return x.PaymentId
	}
	return nil
}

// Response message containing the transaction ID of the coin split.
type CoinSplitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the transaction created.
	TxId uint64 `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *CoinSplitResponse) Reset() {
	*x = CoinSplitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinSplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinSplitResponse) ProtoMessage() {}

func (x *CoinSplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinSplitResponse.ProtoReflect.Descriptor instead.
func (*CoinSplitResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{34}
}

func (x *CoinSplitResponse) GetTxId() uint64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

// Request message for importing UTXOs into the wallet.
type ImportUtxosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of unblinded outputs to be imported as UTXOs.
	Outputs []*UnblindedOutput `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Optional payment ID to tag the imported outputs.
	PaymentId []byte `protobuf:"bytes,2,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (x *ImportUtxosRequest) Reset() {
	*x = ImportUtxosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportUtxosRequest) ProtoMessage() {}

func (x *ImportUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportUtxosRequest.ProtoReflect.Descriptor instead.
func (*ImportUtxosRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{35}
}

func (x *ImportUtxosRequest) GetOutputs() []*UnblindedOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *ImportUtxosRequest) GetPaymentId() []byte {
	if x != nil {
		return x.PaymentId
	}
	return nil
}

// Response message containing transaction IDs for the imported outputs.
type ImportUtxosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction IDs corresponding to the imported UTXOs.
	TxIds []uint64 `protobuf:"varint,1,rep,packed,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
}

func (x *ImportUtxosResponse) Reset() {
	*x = ImportUtxosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportUtxosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportUtxosResponse) ProtoMessage() {}

func (x *ImportUtxosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportUtxosResponse.ProtoReflect.Descriptor instead.
func (*ImportUtxosResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{36}
}

func (x *ImportUtxosResponse) GetTxIds() []uint64 {
	if x != nil {
		return x.TxIds
	}
	return nil
}

type CreateTemplateRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeePerGram             uint64        `protobuf:"varint,1,opt,name=fee_per_gram,json=feePerGram,proto3" json:"fee_per_gram,omitempty"`
	TemplateName           string        `protobuf:"bytes,2,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	TemplateVersion        uint32        `protobuf:"varint,3,opt,name=template_version,json=templateVersion,proto3" json:"template_version,omitempty"`
	TemplateType           *TemplateType `protobuf:"bytes,4,opt,name=template_type,json=templateType,proto3" json:"template_type,omitempty"`
	BuildInfo              *BuildInfo    `protobuf:"bytes,5,opt,name=build_info,json=buildInfo,proto3" json:"build_info,omitempty"`
	BinarySha              []byte        `protobuf:"bytes,6,opt,name=binary_sha,json=binarySha,proto3" json:"binary_sha,omitempty"`
	BinaryUrl              string        `protobuf:"bytes,7,opt,name=binary_url,json=binaryUrl,proto3" json:"binary_url,omitempty"`
	SidechainDeploymentKey []byte        `protobuf:"bytes,8,opt,name=sidechain_deployment_key,json=sidechainDeploymentKey,proto3" json:"sidechain_deployment_key,omitempty"`
}

func (x *CreateTemplateRegistrationRequest) Reset() {
	*x = CreateTemplateRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTemplateRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTemplateRegistrationRequest) ProtoMessage() {}

func (x *CreateTemplateRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTemplateRegistrationRequest.ProtoReflect.Descriptor instead.
func (*CreateTemplateRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{37}
}

func (x *CreateTemplateRegistrationRequest) GetFeePerGram() uint64 {
	if x != nil {
		return x.FeePerGram
	}
	return 0
}

func (x *CreateTemplateRegistrationRequest) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *CreateTemplateRegistrationRequest) GetTemplateVersion() uint32 {
	if x != nil {
		return x.TemplateVersion
	}
	return 0
}

func (x *CreateTemplateRegistrationRequest) GetTemplateType() *TemplateType {
	if x != nil {
		return x.TemplateType
	}
	return nil
}

func (x *CreateTemplateRegistrationRequest) GetBuildInfo() *BuildInfo {
	if x != nil {
		return x.BuildInfo
	}
	return nil
}

func (x *CreateTemplateRegistrationRequest) GetBinarySha() []byte {
	if x != nil {
		return x.BinarySha
	}
	return nil
}

func (x *CreateTemplateRegistrationRequest) GetBinaryUrl() string {
	if x != nil {
		return x.BinaryUrl
	}
	return ""
}

func (x *CreateTemplateRegistrationRequest) GetSidechainDeploymentKey() []byte {
	if x != nil {
		return x.SidechainDeploymentKey
	}
	return nil
}

type CreateTemplateRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId            uint64 `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	TemplateAddress []byte `protobuf:"bytes,2,opt,name=template_address,json=templateAddress,proto3" json:"template_address,omitempty"`
}

func (x *CreateTemplateRegistrationResponse) Reset() {
	*x = CreateTemplateRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTemplateRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTemplateRegistrationResponse) ProtoMessage() {}

func (x *CreateTemplateRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTemplateRegistrationResponse.ProtoReflect.Descriptor instead.
func (*CreateTemplateRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{38}
}

func (x *CreateTemplateRegistrationResponse) GetTxId() uint64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *CreateTemplateRegistrationResponse) GetTemplateAddress() []byte {
	if x != nil {
		return x.TemplateAddress
	}
	return nil
}

// Request message for the CancelTransaction RPC.
type CancelTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction ID to be cancelled.
	TxId uint64 `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *CancelTransactionRequest) Reset() {
	*x = CancelTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransactionRequest) ProtoMessage() {}

func (x *CancelTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransactionRequest.ProtoReflect.Descriptor instead.
func (*CancelTransactionRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{39}
}

func (x *CancelTransactionRequest) GetTxId() uint64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

// Response message for the CancelTransaction RPC.
type CancelTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether the cancellation was successful.
	IsSuccess bool `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	// The failure message if the cancellation was not successful.
	FailureMessage string `protobuf:"bytes,2,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
}

func (x *CancelTransactionResponse) Reset() {
	*x = CancelTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransactionResponse) ProtoMessage() {}

func (x *CancelTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransactionResponse.ProtoReflect.Descriptor instead.
func (*CancelTransactionResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{40}
}

func (x *CancelTransactionResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *CancelTransactionResponse) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

type RevalidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RevalidateRequest) Reset() {
	*x = RevalidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevalidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevalidateRequest) ProtoMessage() {}

func (x *RevalidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevalidateRequest.ProtoReflect.Descriptor instead.
func (*RevalidateRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{41}
}

type RevalidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RevalidateResponse) Reset() {
	*x = RevalidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevalidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevalidateResponse) ProtoMessage() {}

func (x *RevalidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevalidateResponse.ProtoReflect.Descriptor instead.
func (*RevalidateResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{42}
}

type ValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ValidateRequest) Reset() {
	*x = ValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRequest) ProtoMessage() {}

func (x *ValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRequest.ProtoReflect.Descriptor instead.
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{43}
}

type ValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ValidateResponse) Reset() {
	*x = ValidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateResponse) ProtoMessage() {}

func (x *ValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateResponse.ProtoReflect.Descriptor instead.
func (*ValidateResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{44}
}

type SetBaseNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeyHex string `protobuf:"bytes,1,opt,name=public_key_hex,json=publicKeyHex,proto3" json:"public_key_hex,omitempty"`
	NetAddress   string `protobuf:"bytes,2,opt,name=net_address,json=netAddress,proto3" json:"net_address,omitempty"`
}

func (x *SetBaseNodeRequest) Reset() {
	*x = SetBaseNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBaseNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBaseNodeRequest) ProtoMessage() {}

func (x *SetBaseNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBaseNodeRequest.ProtoReflect.Descriptor instead.
func (*SetBaseNodeRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{45}
}

func (x *SetBaseNodeRequest) GetPublicKeyHex() string {
	if x != nil {
		return x.PublicKeyHex
	}
	return ""
}

func (x *SetBaseNodeRequest) GetNetAddress() string {
	if x != nil {
		return x.NetAddress
	}
	return ""
}

type SetBaseNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBaseNodeResponse) Reset() {
	*x = SetBaseNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBaseNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBaseNodeResponse) ProtoMessage() {}

func (x *SetBaseNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBaseNodeResponse.ProtoReflect.Descriptor instead.
func (*SetBaseNodeResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{46}
}

// Empty request for CheckConnectivity
type GetConnectivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConnectivityRequest) Reset() {
	*x = GetConnectivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectivityRequest) ProtoMessage() {}

func (x *GetConnectivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectivityRequest.ProtoReflect.Descriptor instead.
func (*GetConnectivityRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{47}
}

// Response indicating the wallet's connectivity status
type CheckConnectivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current connectivity state of the wallet
	Status CheckConnectivityResponse_OnlineStatus `protobuf:"varint,1,opt,name=status,proto3,enum=tari.rpc.CheckConnectivityResponse_OnlineStatus" json:"status,omitempty"`
}

func (x *CheckConnectivityResponse) Reset() {
	*x = CheckConnectivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckConnectivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConnectivityResponse) ProtoMessage() {}

func (x *CheckConnectivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConnectivityResponse.ProtoReflect.Descriptor instead.
func (*CheckConnectivityResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{48}
}

func (x *CheckConnectivityResponse) GetStatus() CheckConnectivityResponse_OnlineStatus {
	if x != nil {
		return x.Status
	}
	return CheckConnectivityResponse_Connecting
}

type TransactionEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransactionEventRequest) Reset() {
	*x = TransactionEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEventRequest) ProtoMessage() {}

func (x *TransactionEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEventRequest.ProtoReflect.Descriptor instead.
func (*TransactionEventRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{49}
}

type TransactionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event         string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	TxId          string `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	SourceAddress []byte `protobuf:"bytes,3,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	DestAddress   []byte `protobuf:"bytes,4,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	Status        string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Direction     string `protobuf:"bytes,6,opt,name=direction,proto3" json:"direction,omitempty"`
	Amount        uint64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	RawPaymentId  []byte `protobuf:"bytes,9,opt,name=raw_payment_id,json=rawPaymentId,proto3" json:"raw_payment_id,omitempty"`
	UserPaymentId []byte `protobuf:"bytes,10,opt,name=user_payment_id,json=userPaymentId,proto3" json:"user_payment_id,omitempty"`
}

func (x *TransactionEvent) Reset() {
	*x = TransactionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEvent) ProtoMessage() {}

func (x *TransactionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEvent.ProtoReflect.Descriptor instead.
func (*TransactionEvent) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{50}
}

func (x *TransactionEvent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *TransactionEvent) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *TransactionEvent) GetSourceAddress() []byte {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

func (x *TransactionEvent) GetDestAddress() []byte {
	if x != nil {
		return x.DestAddress
	}
	return nil
}

func (x *TransactionEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TransactionEvent) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *TransactionEvent) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransactionEvent) GetRawPaymentId() []byte {
	if x != nil {
		return x.RawPaymentId
	}
	return nil
}

func (x *TransactionEvent) GetUserPaymentId() []byte {
	if x != nil {
		return x.UserPaymentId
	}
	return nil
}

type TransactionEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *TransactionEvent `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TransactionEventResponse) Reset() {
	*x = TransactionEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEventResponse) ProtoMessage() {}

func (x *TransactionEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEventResponse.ProtoReflect.Descriptor instead.
func (*TransactionEventResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{51}
}

func (x *TransactionEventResponse) GetTransaction() *TransactionEvent {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type RegisterValidatorNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorNodePublicKey      []byte     `protobuf:"bytes,1,opt,name=validator_node_public_key,json=validatorNodePublicKey,proto3" json:"validator_node_public_key,omitempty"`
	ValidatorNodeSignature      *Signature `protobuf:"bytes,2,opt,name=validator_node_signature,json=validatorNodeSignature,proto3" json:"validator_node_signature,omitempty"`
	ValidatorNodeClaimPublicKey []byte     `protobuf:"bytes,3,opt,name=validator_node_claim_public_key,json=validatorNodeClaimPublicKey,proto3" json:"validator_node_claim_public_key,omitempty"`
	MaxEpoch                    uint64     `protobuf:"varint,4,opt,name=max_epoch,json=maxEpoch,proto3" json:"max_epoch,omitempty"`
	FeePerGram                  uint64     `protobuf:"varint,5,opt,name=fee_per_gram,json=feePerGram,proto3" json:"fee_per_gram,omitempty"`
	PaymentId                   []byte     `protobuf:"bytes,6,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	SidechainDeploymentKey      []byte     `protobuf:"bytes,7,opt,name=sidechain_deployment_key,json=sidechainDeploymentKey,proto3" json:"sidechain_deployment_key,omitempty"`
}

func (x *RegisterValidatorNodeRequest) Reset() {
	*x = RegisterValidatorNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterValidatorNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterValidatorNodeRequest) ProtoMessage() {}

func (x *RegisterValidatorNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterValidatorNodeRequest.ProtoReflect.Descriptor instead.
func (*RegisterValidatorNodeRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{52}
}

func (x *RegisterValidatorNodeRequest) GetValidatorNodePublicKey() []byte {
	if x != nil {
		return x.ValidatorNodePublicKey
	}
	return nil
}

func (x *RegisterValidatorNodeRequest) GetValidatorNodeSignature() *Signature {
	if x != nil {
		return x.ValidatorNodeSignature
	}
	return nil
}

func (x *RegisterValidatorNodeRequest) GetValidatorNodeClaimPublicKey() []byte {
	if x != nil {
		return x.ValidatorNodeClaimPublicKey
	}
	return nil
}

func (x *RegisterValidatorNodeRequest) GetMaxEpoch() uint64 {
	if x != nil {
		return x.MaxEpoch
	}
	return 0
}

func (x *RegisterValidatorNodeRequest) GetFeePerGram() uint64 {
	if x != nil {
		return x.FeePerGram
	}
	return 0
}

func (x *RegisterValidatorNodeRequest) GetPaymentId() []byte {
	if x != nil {
		return x.PaymentId
	}
	return nil
}

func (x *RegisterValidatorNodeRequest) GetSidechainDeploymentKey() []byte {
	if x != nil {
		return x.SidechainDeploymentKey
	}
	return nil
}

type RegisterValidatorNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId  uint64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	IsSuccess      bool   `protobuf:"varint,2,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	FailureMessage string `protobuf:"bytes,3,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
}

func (x *RegisterValidatorNodeResponse) Reset() {
	*x = RegisterValidatorNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterValidatorNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterValidatorNodeResponse) ProtoMessage() {}

func (x *RegisterValidatorNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterValidatorNodeResponse.ProtoReflect.Descriptor instead.
func (*RegisterValidatorNodeResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{53}
}

func (x *RegisterValidatorNodeResponse) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *RegisterValidatorNodeResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *RegisterValidatorNodeResponse) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

type SubmitValidatorEvictionProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof                  *EvictionProof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	FeePerGram             uint64         `protobuf:"varint,2,opt,name=fee_per_gram,json=feePerGram,proto3" json:"fee_per_gram,omitempty"`
	Message                string         `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	SidechainDeploymentKey []byte         `protobuf:"bytes,4,opt,name=sidechain_deployment_key,json=sidechainDeploymentKey,proto3" json:"sidechain_deployment_key,omitempty"`
}

func (x *SubmitValidatorEvictionProofRequest) Reset() {
	*x = SubmitValidatorEvictionProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitValidatorEvictionProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitValidatorEvictionProofRequest) ProtoMessage() {}

func (x *SubmitValidatorEvictionProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitValidatorEvictionProofRequest.ProtoReflect.Descriptor instead.
func (*SubmitValidatorEvictionProofRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{54}
}

func (x *SubmitValidatorEvictionProofRequest) GetProof() *EvictionProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *SubmitValidatorEvictionProofRequest) GetFeePerGram() uint64 {
	if x != nil {
		return x.FeePerGram
	}
	return 0
}

func (x *SubmitValidatorEvictionProofRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SubmitValidatorEvictionProofRequest) GetSidechainDeploymentKey() []byte {
	if x != nil {
		return x.SidechainDeploymentKey
	}
	return nil
}

type SubmitValidatorEvictionProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId uint64 `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *SubmitValidatorEvictionProofResponse) Reset() {
	*x = SubmitValidatorEvictionProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitValidatorEvictionProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitValidatorEvictionProofResponse) ProtoMessage() {}

func (x *SubmitValidatorEvictionProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitValidatorEvictionProofResponse.ProtoReflect.Descriptor instead.
func (*SubmitValidatorEvictionProofResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{55}
}

func (x *SubmitValidatorEvictionProofResponse) GetTxId() uint64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

type SubmitValidatorNodeExitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorNodePublicKey []byte     `protobuf:"bytes,1,opt,name=validator_node_public_key,json=validatorNodePublicKey,proto3" json:"validator_node_public_key,omitempty"`
	ValidatorNodeSignature *Signature `protobuf:"bytes,2,opt,name=validator_node_signature,json=validatorNodeSignature,proto3" json:"validator_node_signature,omitempty"`
	MaxEpoch               uint64     `protobuf:"varint,3,opt,name=max_epoch,json=maxEpoch,proto3" json:"max_epoch,omitempty"`
	FeePerGram             uint64     `protobuf:"varint,4,opt,name=fee_per_gram,json=feePerGram,proto3" json:"fee_per_gram,omitempty"`
	Message                []byte     `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	SidechainDeploymentKey []byte     `protobuf:"bytes,6,opt,name=sidechain_deployment_key,json=sidechainDeploymentKey,proto3" json:"sidechain_deployment_key,omitempty"`
}

func (x *SubmitValidatorNodeExitRequest) Reset() {
	*x = SubmitValidatorNodeExitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitValidatorNodeExitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitValidatorNodeExitRequest) ProtoMessage() {}

func (x *SubmitValidatorNodeExitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitValidatorNodeExitRequest.ProtoReflect.Descriptor instead.
func (*SubmitValidatorNodeExitRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{56}
}

func (x *SubmitValidatorNodeExitRequest) GetValidatorNodePublicKey() []byte {
	if x != nil {
		return x.ValidatorNodePublicKey
	}
	return nil
}

func (x *SubmitValidatorNodeExitRequest) GetValidatorNodeSignature() *Signature {
	if x != nil {
		return x.ValidatorNodeSignature
	}
	return nil
}

func (x *SubmitValidatorNodeExitRequest) GetMaxEpoch() uint64 {
	if x != nil {
		return x.MaxEpoch
	}
	return 0
}

func (x *SubmitValidatorNodeExitRequest) GetFeePerGram() uint64 {
	if x != nil {
		return x.FeePerGram
	}
	return 0
}

func (x *SubmitValidatorNodeExitRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SubmitValidatorNodeExitRequest) GetSidechainDeploymentKey() []byte {
	if x != nil {
		return x.SidechainDeploymentKey
	}
	return nil
}

type SubmitValidatorNodeExitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId  uint64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	IsSuccess      bool   `protobuf:"varint,2,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	FailureMessage string `protobuf:"bytes,3,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
}

func (x *SubmitValidatorNodeExitResponse) Reset() {
	*x = SubmitValidatorNodeExitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitValidatorNodeExitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitValidatorNodeExitResponse) ProtoMessage() {}

func (x *SubmitValidatorNodeExitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitValidatorNodeExitResponse.ProtoReflect.Descriptor instead.
func (*SubmitValidatorNodeExitResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{57}
}

func (x *SubmitValidatorNodeExitResponse) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *SubmitValidatorNodeExitResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *SubmitValidatorNodeExitResponse) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

type ImportTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs string `protobuf:"bytes,1,opt,name=txs,proto3" json:"txs,omitempty"`
}

func (x *ImportTransactionsRequest) Reset() {
	*x = ImportTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportTransactionsRequest) ProtoMessage() {}

func (x *ImportTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ImportTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{58}
}

func (x *ImportTransactionsRequest) GetTxs() string {
	if x != nil {
		return x.Txs
	}
	return ""
}

type ImportTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIds []uint64 `protobuf:"varint,1,rep,packed,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
}

func (x *ImportTransactionsResponse) Reset() {
	*x = ImportTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportTransactionsResponse) ProtoMessage() {}

func (x *ImportTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ImportTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{59}
}

func (x *ImportTransactionsResponse) GetTxIds() []uint64 {
	if x != nil {
		return x.TxIds
	}
	return nil
}

type GetAllCompletedTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset        uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	StatusBitflag uint64 `protobuf:"varint,3,opt,name=status_bitflag,json=statusBitflag,proto3" json:"status_bitflag,omitempty"`
}

func (x *GetAllCompletedTransactionsRequest) Reset() {
	*x = GetAllCompletedTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCompletedTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCompletedTransactionsRequest) ProtoMessage() {}

func (x *GetAllCompletedTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCompletedTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetAllCompletedTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{60}
}

func (x *GetAllCompletedTransactionsRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAllCompletedTransactionsRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllCompletedTransactionsRequest) GetStatusBitflag() uint64 {
	if x != nil {
		return x.StatusBitflag
	}
	return 0
}

type GetAllCompletedTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*TransactionInfo `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *GetAllCompletedTransactionsResponse) Reset() {
	*x = GetAllCompletedTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCompletedTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCompletedTransactionsResponse) ProtoMessage() {}

func (x *GetAllCompletedTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCompletedTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetAllCompletedTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{61}
}

func (x *GetAllCompletedTransactionsResponse) GetTransactions() []*TransactionInfo {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// Request message for getting transactions at a specific block height
type GetBlockHeightTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The block height to fetch transactions for
	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *GetBlockHeightTransactionsRequest) Reset() {
	*x = GetBlockHeightTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockHeightTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeightTransactionsRequest) ProtoMessage() {}

func (x *GetBlockHeightTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeightTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHeightTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{62}
}

func (x *GetBlockHeightTransactionsRequest) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type GetBlockHeightTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of transactions mined at the specified block height
	Transactions []*TransactionInfo `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *GetBlockHeightTransactionsResponse) Reset() {
	*x = GetBlockHeightTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockHeightTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeightTransactionsResponse) ProtoMessage() {}

func (x *GetBlockHeightTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeightTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHeightTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{63}
}

func (x *GetBlockHeightTransactionsResponse) GetTransactions() []*TransactionInfo {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// Request message for GetTransactionPayRefs RPC.
type GetTransactionPayRefsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction ID to retrieve PayRefs for.
	TransactionId uint64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *GetTransactionPayRefsRequest) Reset() {
	*x = GetTransactionPayRefsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionPayRefsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionPayRefsRequest) ProtoMessage() {}

func (x *GetTransactionPayRefsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionPayRefsRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionPayRefsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{64}
}

func (x *GetTransactionPayRefsRequest) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

// Response message for GetTransactionPayRefs RPC.
type GetTransactionPayRefsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of PayRefs (32-byte payment references) for the transaction.
	PaymentReferences [][]byte `protobuf:"bytes,1,rep,name=payment_references,json=paymentReferences,proto3" json:"payment_references,omitempty"`
}

func (x *GetTransactionPayRefsResponse) Reset() {
	*x = GetTransactionPayRefsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionPayRefsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionPayRefsResponse) ProtoMessage() {}

func (x *GetTransactionPayRefsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionPayRefsResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionPayRefsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{65}
}

func (x *GetTransactionPayRefsResponse) GetPaymentReferences() [][]byte {
	if x != nil {
		return x.PaymentReferences
	}
	return nil
}

// Response message for GetTransactionsWithPayRefs RPC.
type GetTransactionsWithPayRefsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction information.
	Transaction *TransactionInfo `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// List of PayRefs associated with this transaction.
	PaymentReferences [][]byte `protobuf:"bytes,2,rep,name=payment_references,json=paymentReferences,proto3" json:"payment_references,omitempty"`
	// Number of unique recipients for this transaction.
	RecipientCount uint64 `protobuf:"varint,3,opt,name=recipient_count,json=recipientCount,proto3" json:"recipient_count,omitempty"`
}

func (x *GetTransactionsWithPayRefsResponse) Reset() {
	*x = GetTransactionsWithPayRefsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsWithPayRefsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsWithPayRefsResponse) ProtoMessage() {}

func (x *GetTransactionsWithPayRefsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsWithPayRefsResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionsWithPayRefsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{66}
}

func (x *GetTransactionsWithPayRefsResponse) GetTransaction() *TransactionInfo {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *GetTransactionsWithPayRefsResponse) GetPaymentReferences() [][]byte {
	if x != nil {
		return x.PaymentReferences
	}
	return nil
}

func (x *GetTransactionsWithPayRefsResponse) GetRecipientCount() uint64 {
	if x != nil {
		return x.RecipientCount
	}
	return 0
}

// Request message for getting payment details by payment reference
type GetPaymentByReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The 32-byte payment reference hash to look up
	PaymentReference []byte `protobuf:"bytes,1,opt,name=payment_reference,json=paymentReference,proto3" json:"payment_reference,omitempty"`
}

func (x *GetPaymentByReferenceRequest) Reset() {
	*x = GetPaymentByReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentByReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentByReferenceRequest) ProtoMessage() {}

func (x *GetPaymentByReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentByReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentByReferenceRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{67}
}

func (x *GetPaymentByReferenceRequest) GetPaymentReference() []byte {
	if x != nil {
		return x.PaymentReference
	}
	return nil
}

// Response message containing transaction information for a payment reference
type GetPaymentByReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction information if PayRef is found (optional).
	// Returns full transaction details
	Transaction *TransactionInfo `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *GetPaymentByReferenceResponse) Reset() {
	*x = GetPaymentByReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentByReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentByReferenceResponse) ProtoMessage() {}

func (x *GetPaymentByReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentByReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetPaymentByReferenceResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{68}
}

func (x *GetPaymentByReferenceResponse) GetTransaction() *TransactionInfo {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type GetFeeEstimateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount to send in microTari (1 T = 1_000_000 µT).
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// fee per gram to use for the estimate
	FeePerGram uint64 `protobuf:"varint,2,opt,name=fee_per_gram,json=feePerGram,proto3" json:"fee_per_gram,omitempty"`
	// number of outputs to create in the transaction
	OutputCount uint64 `protobuf:"varint,3,opt,name=output_count,json=outputCount,proto3" json:"output_count,omitempty"`
}

func (x *GetFeeEstimateRequest) Reset() {
	*x = GetFeeEstimateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeEstimateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeEstimateRequest) ProtoMessage() {}

func (x *GetFeeEstimateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeEstimateRequest.ProtoReflect.Descriptor instead.
func (*GetFeeEstimateRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{69}
}

func (x *GetFeeEstimateRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetFeeEstimateRequest) GetFeePerGram() uint64 {
	if x != nil {
		return x.FeePerGram
	}
	return 0
}

func (x *GetFeeEstimateRequest) GetOutputCount() uint64 {
	if x != nil {
		return x.OutputCount
	}
	return 0
}

type GetFeeEstimateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Estimated fee for the transaction in microTari
	EstimatedFee uint64 `protobuf:"varint,1,opt,name=estimated_fee,json=estimatedFee,proto3" json:"estimated_fee,omitempty"`
}

func (x *GetFeeEstimateResponse) Reset() {
	*x = GetFeeEstimateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeEstimateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeEstimateResponse) ProtoMessage() {}

func (x *GetFeeEstimateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeEstimateResponse.ProtoReflect.Descriptor instead.
func (*GetFeeEstimateResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{70}
}

func (x *GetFeeEstimateResponse) GetEstimatedFee() uint64 {
	if x != nil {
		return x.EstimatedFee
	}
	return 0
}

type GetFeePerGramStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: The number of recent blocks to consider for fee statistics.
	BlockCount uint64 `protobuf:"varint,1,opt,name=block_count,json=blockCount,proto3" json:"block_count,omitempty"`
}

func (x *GetFeePerGramStatsRequest) Reset() {
	*x = GetFeePerGramStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeePerGramStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeePerGramStatsRequest) ProtoMessage() {}

func (x *GetFeePerGramStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeePerGramStatsRequest.ProtoReflect.Descriptor instead.
func (*GetFeePerGramStatsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{71}
}

func (x *GetFeePerGramStatsRequest) GetBlockCount() uint64 {
	if x != nil {
		return x.BlockCount
	}
	return 0
}

type GetFeePerGramStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeePerGramStats []*FeePerGramStat `protobuf:"bytes,1,rep,name=fee_per_gram_stats,json=feePerGramStats,proto3" json:"fee_per_gram_stats,omitempty"`
}

func (x *GetFeePerGramStatsResponse) Reset() {
	*x = GetFeePerGramStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeePerGramStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeePerGramStatsResponse) ProtoMessage() {}

func (x *GetFeePerGramStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeePerGramStatsResponse.ProtoReflect.Descriptor instead.
func (*GetFeePerGramStatsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{72}
}

func (x *GetFeePerGramStatsResponse) GetFeePerGramStats() []*FeePerGramStat {
	if x != nil {
		return x.FeePerGramStats
	}
	return nil
}

type ReplaceByFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction id of the transaction to replace
	TransactionId uint64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// The amount to increase the fee by in microTari. Must be greater than zero.
	FeeIncrease uint64 `protobuf:"varint,2,opt,name=fee_increase,json=feeIncrease,proto3" json:"fee_increase,omitempty"`
}

func (x *ReplaceByFeeRequest) Reset() {
	*x = ReplaceByFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceByFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceByFeeRequest) ProtoMessage() {}

func (x *ReplaceByFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceByFeeRequest.ProtoReflect.Descriptor instead.
func (*ReplaceByFeeRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{73}
}

func (x *ReplaceByFeeRequest) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *ReplaceByFeeRequest) GetFeeIncrease() uint64 {
	if x != nil {
		return x.FeeIncrease
	}
	return 0
}

type ReplaceByFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction id of the new transaction
	TransactionId uint64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *ReplaceByFeeResponse) Reset() {
	*x = ReplaceByFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceByFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceByFeeResponse) ProtoMessage() {}

func (x *ReplaceByFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceByFeeResponse.ProtoReflect.Descriptor instead.
func (*ReplaceByFeeResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{74}
}

func (x *ReplaceByFeeResponse) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

type UserPayForFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipients []*TxOutputsToSpendTransfer `protobuf:"bytes,1,rep,name=recipients,proto3" json:"recipients,omitempty"`
}

func (x *UserPayForFeeRequest) Reset() {
	*x = UserPayForFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayForFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayForFeeRequest) ProtoMessage() {}

func (x *UserPayForFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayForFeeRequest.ProtoReflect.Descriptor instead.
func (*UserPayForFeeRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{75}
}

func (x *UserPayForFeeRequest) GetRecipients() []*TxOutputsToSpendTransfer {
	if x != nil {
		return x.Recipients
	}
	return nil
}

type TxOutputsToSpendTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the transaction to spend outputs from.
	TxId uint64 `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// Fee to pay for the transaction in microTari.
	Fee uint64 `protobuf:"varint,2,opt,name=fee,proto3" json:"fee,omitempty"`
	// Base58 Tari address of the recipient.
	Destination string `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *TxOutputsToSpendTransfer) Reset() {
	*x = TxOutputsToSpendTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutputsToSpendTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutputsToSpendTransfer) ProtoMessage() {}

func (x *TxOutputsToSpendTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutputsToSpendTransfer.ProtoReflect.Descriptor instead.
func (*TxOutputsToSpendTransfer) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{76}
}

func (x *TxOutputsToSpendTransfer) GetTxId() uint64 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *TxOutputsToSpendTransfer) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TxOutputsToSpendTransfer) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type UserPayForFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*TransferResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *UserPayForFeeResponse) Reset() {
	*x = UserPayForFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPayForFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPayForFeeResponse) ProtoMessage() {}

func (x *UserPayForFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPayForFeeResponse.ProtoReflect.Descriptor instead.
func (*UserPayForFeeResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{77}
}

func (x *UserPayForFeeResponse) GetResults() []*TransferResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type FeePerGramStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The average fee per gram over the specified number of blocks.
	AverageFeePerGram uint64 `protobuf:"varint,1,opt,name=average_fee_per_gram,json=averageFeePerGram,proto3" json:"average_fee_per_gram,omitempty"`
	// The minimum fee per gram observed in the recent blocks.
	MinFeePerGram uint64 `protobuf:"varint,2,opt,name=min_fee_per_gram,json=minFeePerGram,proto3" json:"min_fee_per_gram,omitempty"`
	// The maximum fee per gram observed in the recent blocks.
	MaxFeePerGram uint64 `protobuf:"varint,3,opt,name=max_fee_per_gram,json=maxFeePerGram,proto3" json:"max_fee_per_gram,omitempty"`
}

func (x *FeePerGramStat) Reset() {
	*x = FeePerGramStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeePerGramStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePerGramStat) ProtoMessage() {}

func (x *FeePerGramStat) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePerGramStat.ProtoReflect.Descriptor instead.
func (*FeePerGramStat) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{78}
}

func (x *FeePerGramStat) GetAverageFeePerGram() uint64 {
	if x != nil {
		return x.AverageFeePerGram
	}
	return 0
}

func (x *FeePerGramStat) GetMinFeePerGram() uint64 {
	if x != nil {
		return x.MinFeePerGram
	}
	return 0
}

func (x *FeePerGramStat) GetMaxFeePerGram() uint64 {
	if x != nil {
		return x.MaxFeePerGram
	}
	return 0
}

// Request message for SignMessage RPC
type SignMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message to be signed (arbitrary bytes)
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SignMessageRequest) Reset() {
	*x = SignMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMessageRequest) ProtoMessage() {}

func (x *SignMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMessageRequest.ProtoReflect.Descriptor instead.
func (*SignMessageRequest) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{79}
}

func (x *SignMessageRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

// Response message for SignMessage RPC
type SignMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Schnorr signature as hex-encoded string
	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// The public nonce component as hex-encoded string
	PublicNonce string `protobuf:"bytes,2,opt,name=public_nonce,json=publicNonce,proto3" json:"public_nonce,omitempty"`
}

func (x *SignMessageResponse) Reset() {
	*x = SignMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMessageResponse) ProtoMessage() {}

func (x *SignMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMessageResponse.ProtoReflect.Descriptor instead.
func (*SignMessageResponse) Descriptor() ([]byte, []int) {
	return file_wallet_proto_rawDescGZIP(), []int{80}
}

func (x *SignMessageResponse) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *SignMessageResponse) GetPublicNonce() string {
	if x != nil {
		return x.PublicNonce
	}
	return ""
}

var File_wallet_proto protoreflect.FileDescriptor

var file_wallet_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f,
	0x6e, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0xe3, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x6f, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x12, 0x37,
	0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x6f, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x22, 0x67, 0x0a, 0x2b, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x2c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4f,
	0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x29, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x2a,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f,
	0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64,
	0x53, 0x68, 0x61, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xdb,
	0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xfb, 0x02, 0x0a,
	0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x65,
	0x72, 0x47, 0x72, 0x61, 0x6d, 0x12, 0x49, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x61, 0x77, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41,
	0x52, 0x44, 0x5f, 0x4d, 0x49, 0x4d, 0x42, 0x4c, 0x45, 0x57, 0x49, 0x4d, 0x42, 0x4c, 0x45, 0x10,
	0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x11, 0x0a, 0x09, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x49, 0x44,
	0x45, 0x44, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x4e, 0x45, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x22, 0x46, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x41, 0x74,
	0x6f, 0x6d, 0x69, 0x63, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd6, 0x02,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46,
	0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x72, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x72, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xdf, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x72, 0x0a, 0x19, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x53, 0x68, 0x61, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x22, 0x50, 0x0a, 0x1a,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x68, 0x61, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x5b,
	0x0a, 0x16, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x74, 0x6c, 0x63, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x22, 0x4d, 0x0a, 0x17, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x48, 0x74, 0x6c, 0x63, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x22, 0x5b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xfe, 0x05,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x61, 0x77, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x15, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xca,
	0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52,
	0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x48, 0x65, 0x78, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x38, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x22, 0x0a, 0x0c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x48, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22,
	0x5f, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x32, 0x35, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x32,
	0x35, 0x36, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x74, 0x66, 0x38, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x74, 0x66, 0x38, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xac, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x39, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x33, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xbf, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72,
	0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x28, 0x0a, 0x11, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x12,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x6e, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x74,
	0x78, 0x49, 0x64, 0x73, 0x22, 0xfe, 0x02, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0d,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x68, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x64, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2f, 0x0a, 0x18, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x19,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x12, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x65, 0x78, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x9e, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x0c, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x10, 0x02, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa3, 0x02,
	0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72,
	0x61, 0x77, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x03,
	0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x18, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x1b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x66,
	0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x23, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x20,
	0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x22, 0x3b, 0x0a, 0x24, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x78, 0x49,
	0x64, 0x22, 0xbd, 0x02, 0x0a, 0x1e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x4d, 0x0a, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x66,
	0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x22, 0x90, 0x01, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x19, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x78, 0x73, 0x22, 0x33, 0x0a, 0x1a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x05, 0x74, 0x78, 0x49, 0x64, 0x73, 0x22, 0x79, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x62, 0x69, 0x74, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x69, 0x74, 0x66,
	0x6c, 0x61, 0x67, 0x22, 0x64, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x63, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4e, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xb9, 0x01,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x5c, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x22, 0x3c, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x63, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x65,
	0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x66, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x5f, 0x0a, 0x13,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x79, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65,
	0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x66, 0x65, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x22, 0x3d, 0x0a,
	0x14, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x79, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x14,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x54, 0x6f, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x63, 0x0a, 0x18, 0x54, 0x78, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a,
	0x15, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x46,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x12, 0x27,
	0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d,
	0x22, 0x2e, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x56, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x2a, 0x80, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0xd3, 0x04, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43,
	0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x45,
	0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x05, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x4e, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x49, 0x4e,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44,
	0x10, 0x0c, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x32, 0x0a,
	0x2e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10,
	0x0e, 0x2a, 0x70, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x02, 0x32, 0x8d, 0x1e, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x47,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x74,
	0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x1c, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x74,
	0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x24, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x35, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x6e, 0x65,
	0x53, 0x69, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x22, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x19, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e,
	0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x77, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x73, 0x12,
	0x26, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x0f,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x23, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x73, 0x70, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x12, 0x0f, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x19, 0x52, 0x65, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x1c, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x41, 0x74, 0x6f, 0x6d,
	0x69, 0x63, 0x53, 0x77, 0x61, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x53, 0x68, 0x61, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x72, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x72,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x1d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x68, 0x61,
	0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x77, 0x61, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x68, 0x61, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x53,
	0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x68, 0x61, 0x41, 0x74,
	0x6f, 0x6d, 0x69, 0x63, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x1a, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x74, 0x6c, 0x63, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48,
	0x74, 0x6c, 0x63, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x48, 0x74, 0x6c, 0x63, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b,
	0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x12,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x2e, 0x74,
	0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x61, 0x72,
	0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x23,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x42, 0x79, 0x46, 0x65, 0x65, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x79, 0x46, 0x65,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x79, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x1e, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x46,
	0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x72, 0x69,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x46,
	0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x61,
	0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2d, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x45,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x28,
	0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x61, 0x72, 0x69, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x53, 0x6e, 0x69, 0x70, 0x61, 0x32, 0x32, 0x2f, 0x67, 0x6f, 0x2d, 0x74, 0x61, 0x72,
	0x69, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x6c, 0x69, 0x62, 0x2f, 0x74, 0x61, 0x72, 0x69, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_wallet_proto_rawDescOnce sync.Once
	file_wallet_proto_rawDescData = file_wallet_proto_rawDesc
)

func file_wallet_proto_rawDescGZIP() []byte {
	file_wallet_proto_rawDescOnce.Do(func() {
		file_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_wallet_proto_rawDescData)
	})
	return file_wallet_proto_rawDescData
}

var file_wallet_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 81)
var file_wallet_proto_goTypes = []interface{}{
	(TransactionDirection)(0),                            // 0: tari.rpc.TransactionDirection
	(TransactionStatus)(0),                               // 1: tari.rpc.TransactionStatus
	(PaymentDirection)(0),                                // 2: tari.rpc.PaymentDirection
	(PaymentRecipient_PaymentType)(0),                    // 3: tari.rpc.PaymentRecipient.PaymentType
	(CheckConnectivityResponse_OnlineStatus)(0),          // 4: tari.rpc.CheckConnectivityResponse.OnlineStatus
	(*GetVersionRequest)(nil),                            // 5: tari.rpc.GetVersionRequest
	(*GetVersionResponse)(nil),                           // 6: tari.rpc.GetVersionResponse
	(*GetAddressResponse)(nil),                           // 7: tari.rpc.GetAddressResponse
	(*GetPaymentIdAddressRequest)(nil),                   // 8: tari.rpc.GetPaymentIdAddressRequest
	(*GetCompleteAddressResponse)(nil),                   // 9: tari.rpc.GetCompleteAddressResponse
	(*PrepareOneSidedTransactionForSigningRequest)(nil),  // 10: tari.rpc.PrepareOneSidedTransactionForSigningRequest
	(*PrepareOneSidedTransactionForSigningResponse)(nil), // 11: tari.rpc.PrepareOneSidedTransactionForSigningResponse
	(*BroadcastSignedOneSidedTransactionRequest)(nil),    // 12: tari.rpc.BroadcastSignedOneSidedTransactionRequest
	(*BroadcastSignedOneSidedTransactionResponse)(nil),   // 13: tari.rpc.BroadcastSignedOneSidedTransactionResponse
	(*TransferRequest)(nil),                              // 14: tari.rpc.TransferRequest
	(*SendShaAtomicSwapRequest)(nil),                     // 15: tari.rpc.SendShaAtomicSwapRequest
	(*CreateBurnTransactionRequest)(nil),                 // 16: tari.rpc.CreateBurnTransactionRequest
	(*PaymentRecipient)(nil),                             // 17: tari.rpc.PaymentRecipient
	(*TransferResponse)(nil),                             // 18: tari.rpc.TransferResponse
	(*SendShaAtomicSwapResponse)(nil),                    // 19: tari.rpc.SendShaAtomicSwapResponse
	(*CreateBurnTransactionResponse)(nil),                // 20: tari.rpc.CreateBurnTransactionResponse
	(*TransferResult)(nil),                               // 21: tari.rpc.TransferResult
	(*ClaimShaAtomicSwapRequest)(nil),                    // 22: tari.rpc.ClaimShaAtomicSwapRequest
	(*ClaimShaAtomicSwapResponse)(nil),                   // 23: tari.rpc.ClaimShaAtomicSwapResponse
	(*ClaimHtlcRefundRequest)(nil),                       // 24: tari.rpc.ClaimHtlcRefundRequest
	(*ClaimHtlcRefundResponse)(nil),                      // 25: tari.rpc.ClaimHtlcRefundResponse
	(*GetTransactionInfoRequest)(nil),                    // 26: tari.rpc.GetTransactionInfoRequest
	(*GetTransactionInfoResponse)(nil),                   // 27: tari.rpc.GetTransactionInfoResponse
	(*TransactionInfo)(nil),                              // 28: tari.rpc.TransactionInfo
	(*GetCompletedTransactionsRequest)(nil),              // 29: tari.rpc.GetCompletedTransactionsRequest
	(*BlockHashHex)(nil),                                 // 30: tari.rpc.BlockHashHex
	(*GetCompletedTransactionsResponse)(nil),             // 31: tari.rpc.GetCompletedTransactionsResponse
	(*GetBalanceRequest)(nil),                            // 32: tari.rpc.GetBalanceRequest
	(*UserPaymentId)(nil),                                // 33: tari.rpc.UserPaymentId
	(*GetStateRequest)(nil),                              // 34: tari.rpc.GetStateRequest
	(*GetBalanceResponse)(nil),                           // 35: tari.rpc.GetBalanceResponse
	(*GetStateResponse)(nil),                             // 36: tari.rpc.GetStateResponse
	(*GetUnspentAmountsResponse)(nil),                    // 37: tari.rpc.GetUnspentAmountsResponse
	(*CoinSplitRequest)(nil),                             // 38: tari.rpc.CoinSplitRequest
	(*CoinSplitResponse)(nil),                            // 39: tari.rpc.CoinSplitResponse
	(*ImportUtxosRequest)(nil),                           // 40: tari.rpc.ImportUtxosRequest
	(*ImportUtxosResponse)(nil),                          // 41: tari.rpc.ImportUtxosResponse
	(*CreateTemplateRegistrationRequest)(nil),            // 42: tari.rpc.CreateTemplateRegistrationRequest
	(*CreateTemplateRegistrationResponse)(nil),           // 43: tari.rpc.CreateTemplateRegistrationResponse
	(*CancelTransactionRequest)(nil),                     // 44: tari.rpc.CancelTransactionRequest
	(*CancelTransactionResponse)(nil),                    // 45: tari.rpc.CancelTransactionResponse
	(*RevalidateRequest)(nil),                            // 46: tari.rpc.RevalidateRequest
	(*RevalidateResponse)(nil),                           // 47: tari.rpc.RevalidateResponse
	(*ValidateRequest)(nil),                              // 48: tari.rpc.ValidateRequest
	(*ValidateResponse)(nil),                             // 49: tari.rpc.ValidateResponse
	(*SetBaseNodeRequest)(nil),                           // 50: tari.rpc.SetBaseNodeRequest
	(*SetBaseNodeResponse)(nil),                          // 51: tari.rpc.SetBaseNodeResponse
	(*GetConnectivityRequest)(nil),                       // 52: tari.rpc.GetConnectivityRequest
	(*CheckConnectivityResponse)(nil),                    // 53: tari.rpc.CheckConnectivityResponse
	(*TransactionEventRequest)(nil),                      // 54: tari.rpc.TransactionEventRequest
	(*TransactionEvent)(nil),                             // 55: tari.rpc.TransactionEvent
	(*TransactionEventResponse)(nil),                     // 56: tari.rpc.TransactionEventResponse
	(*RegisterValidatorNodeRequest)(nil),                 // 57: tari.rpc.RegisterValidatorNodeRequest
	(*RegisterValidatorNodeResponse)(nil),                // 58: tari.rpc.RegisterValidatorNodeResponse
	(*SubmitValidatorEvictionProofRequest)(nil),          // 59: tari.rpc.SubmitValidatorEvictionProofRequest
	(*SubmitValidatorEvictionProofResponse)(nil),         // 60: tari.rpc.SubmitValidatorEvictionProofResponse
	(*SubmitValidatorNodeExitRequest)(nil),               // 61: tari.rpc.SubmitValidatorNodeExitRequest
	(*SubmitValidatorNodeExitResponse)(nil),              // 62: tari.rpc.SubmitValidatorNodeExitResponse
	(*ImportTransactionsRequest)(nil),                    // 63: tari.rpc.ImportTransactionsRequest
	(*ImportTransactionsResponse)(nil),                   // 64: tari.rpc.ImportTransactionsResponse
	(*GetAllCompletedTransactionsRequest)(nil),           // 65: tari.rpc.GetAllCompletedTransactionsRequest
	(*GetAllCompletedTransactionsResponse)(nil),          // 66: tari.rpc.GetAllCompletedTransactionsResponse
	(*GetBlockHeightTransactionsRequest)(nil),            // 67: tari.rpc.GetBlockHeightTransactionsRequest
	(*GetBlockHeightTransactionsResponse)(nil),           // 68: tari.rpc.GetBlockHeightTransactionsResponse
	(*GetTransactionPayRefsRequest)(nil),                 // 69: tari.rpc.GetTransactionPayRefsRequest
	(*GetTransactionPayRefsResponse)(nil),                // 70: tari.rpc.GetTransactionPayRefsResponse
	(*GetTransactionsWithPayRefsResponse)(nil),           // 71: tari.rpc.GetTransactionsWithPayRefsResponse
	(*GetPaymentByReferenceRequest)(nil),                 // 72: tari.rpc.GetPaymentByReferenceRequest
	(*GetPaymentByReferenceResponse)(nil),                // 73: tari.rpc.GetPaymentByReferenceResponse
	(*GetFeeEstimateRequest)(nil),                        // 74: tari.rpc.GetFeeEstimateRequest
	(*GetFeeEstimateResponse)(nil),                       // 75: tari.rpc.GetFeeEstimateResponse
	(*GetFeePerGramStatsRequest)(nil),                    // 76: tari.rpc.GetFeePerGramStatsRequest
	(*GetFeePerGramStatsResponse)(nil),                   // 77: tari.rpc.GetFeePerGramStatsResponse
	(*ReplaceByFeeRequest)(nil),                          // 78: tari.rpc.ReplaceByFeeRequest
	(*ReplaceByFeeResponse)(nil),                         // 79: tari.rpc.ReplaceByFeeResponse
	(*UserPayForFeeRequest)(nil),                         // 80: tari.rpc.UserPayForFeeRequest
	(*TxOutputsToSpendTransfer)(nil),                     // 81: tari.rpc.TxOutputsToSpendTransfer
	(*UserPayForFeeResponse)(nil),                        // 82: tari.rpc.UserPayForFeeResponse
	(*FeePerGramStat)(nil),                               // 83: tari.rpc.FeePerGramStat
	(*SignMessageRequest)(nil),                           // 84: tari.rpc.SignMessageRequest
	(*SignMessageResponse)(nil),                          // 85: tari.rpc.SignMessageResponse
	(*CommitmentSignature)(nil),                          // 86: tari.rpc.CommitmentSignature
	(*BlockHeight)(nil),                                  // 87: tari.rpc.BlockHeight
	(*NetworkStatusResponse)(nil),                        // 88: tari.rpc.NetworkStatusResponse
	(*UnblindedOutput)(nil),                              // 89: tari.rpc.UnblindedOutput
	(*TemplateType)(nil),                                 // 90: tari.rpc.TemplateType
	(*BuildInfo)(nil),                                    // 91: tari.rpc.BuildInfo
	(*Signature)(nil),                                    // 92: tari.rpc.Signature
	(*EvictionProof)(nil),                                // 93: tari.rpc.EvictionProof
	(*Empty)(nil),                                        // 94: tari.rpc.Empty
	(*GetIdentityRequest)(nil),                           // 95: tari.rpc.GetIdentityRequest
	(*SoftwareUpdate)(nil),                               // 96: tari.rpc.SoftwareUpdate
	(*GetIdentityResponse)(nil),                          // 97: tari.rpc.GetIdentityResponse
	(*ListConnectedPeersResponse)(nil),                   // 98: tari.rpc.ListConnectedPeersResponse
}
var file_wallet_proto_depIdxs = []int32{
	17, // 0: tari.rpc.PrepareOneSidedTransactionForSigningRequest.recipient:type_name -> tari.rpc.PaymentRecipient
	17, // 1: tari.rpc.TransferRequest.recipients:type_name -> tari.rpc.PaymentRecipient
	17, // 2: tari.rpc.SendShaAtomicSwapRequest.recipient:type_name -> tari.rpc.PaymentRecipient
	3,  // 3: tari.rpc.PaymentRecipient.payment_type:type_name -> tari.rpc.PaymentRecipient.PaymentType
	33, // 4: tari.rpc.PaymentRecipient.user_payment_id:type_name -> tari.rpc.UserPaymentId
	21, // 5: tari.rpc.TransferResponse.results:type_name -> tari.rpc.TransferResult
	86, // 6: tari.rpc.CreateBurnTransactionResponse.ownership_proof:type_name -> tari.rpc.CommitmentSignature
	28, // 7: tari.rpc.TransferResult.transaction_info:type_name -> tari.rpc.TransactionInfo
	21, // 8: tari.rpc.ClaimShaAtomicSwapResponse.results:type_name -> tari.rpc.TransferResult
	21, // 9: tari.rpc.ClaimHtlcRefundResponse.results:type_name -> tari.rpc.TransferResult
	28, // 10: tari.rpc.GetTransactionInfoResponse.transactions:type_name -> tari.rpc.TransactionInfo
	1,  // 11: tari.rpc.TransactionInfo.status:type_name -> tari.rpc.TransactionStatus
	0,  // 12: tari.rpc.TransactionInfo.direction:type_name -> tari.rpc.TransactionDirection
	33, // 13: tari.rpc.GetCompletedTransactionsRequest.payment_id:type_name -> tari.rpc.UserPaymentId
	30, // 14: tari.rpc.GetCompletedTransactionsRequest.block_hash:type_name -> tari.rpc.BlockHashHex
	87, // 15: tari.rpc.GetCompletedTransactionsRequest.block_height:type_name -> tari.rpc.BlockHeight
	28, // 16: tari.rpc.GetCompletedTransactionsResponse.transaction:type_name -> tari.rpc.TransactionInfo
	33, // 17: tari.rpc.GetBalanceRequest.payment_id:type_name -> tari.rpc.UserPaymentId
	35, // 18: tari.rpc.GetStateResponse.balance:type_name -> tari.rpc.GetBalanceResponse
	88, // 19: tari.rpc.GetStateResponse.network:type_name -> tari.rpc.NetworkStatusResponse
	89, // 20: tari.rpc.ImportUtxosRequest.outputs:type_name -> tari.rpc.UnblindedOutput
	90, // 21: tari.rpc.CreateTemplateRegistrationRequest.template_type:type_name -> tari.rpc.TemplateType
	91, // 22: tari.rpc.CreateTemplateRegistrationRequest.build_info:type_name -> tari.rpc.BuildInfo
	4,  // 23: tari.rpc.CheckConnectivityResponse.status:type_name -> tari.rpc.CheckConnectivityResponse.OnlineStatus
	55, // 24: tari.rpc.TransactionEventResponse.transaction:type_name -> tari.rpc.TransactionEvent
	92, // 25: tari.rpc.RegisterValidatorNodeRequest.validator_node_signature:type_name -> tari.rpc.Signature
	93, // 26: tari.rpc.SubmitValidatorEvictionProofRequest.proof:type_name -> tari.rpc.EvictionProof
	92, // 27: tari.rpc.SubmitValidatorNodeExitRequest.validator_node_signature:type_name -> tari.rpc.Signature
	28, // 28: tari.rpc.GetAllCompletedTransactionsResponse.transactions:type_name -> tari.rpc.TransactionInfo
	28, // 29: tari.rpc.GetBlockHeightTransactionsResponse.transactions:type_name -> tari.rpc.TransactionInfo
	28, // 30: tari.rpc.GetTransactionsWithPayRefsResponse.transaction:type_name -> tari.rpc.TransactionInfo
	28, // 31: tari.rpc.GetPaymentByReferenceResponse.transaction:type_name -> tari.rpc.TransactionInfo
	83, // 32: tari.rpc.GetFeePerGramStatsResponse.fee_per_gram_stats:type_name -> tari.rpc.FeePerGramStat
	81, // 33: tari.rpc.UserPayForFeeRequest.recipients:type_name -> tari.rpc.TxOutputsToSpendTransfer
	21, // 34: tari.rpc.UserPayForFeeResponse.results:type_name -> tari.rpc.TransferResult
	5,  // 35: tari.rpc.Wallet.GetVersion:input_type -> tari.rpc.GetVersionRequest
	34, // 36: tari.rpc.Wallet.GetState:input_type -> tari.rpc.GetStateRequest
	52, // 37: tari.rpc.Wallet.CheckConnectivity:input_type -> tari.rpc.GetConnectivityRequest
	94, // 38: tari.rpc.Wallet.CheckForUpdates:input_type -> tari.rpc.Empty
	95, // 39: tari.rpc.Wallet.Identify:input_type -> tari.rpc.GetIdentityRequest
	94, // 40: tari.rpc.Wallet.GetAddress:input_type -> tari.rpc.Empty
	8,  // 41: tari.rpc.Wallet.GetPaymentIdAddress:input_type -> tari.rpc.GetPaymentIdAddressRequest
	94, // 42: tari.rpc.Wallet.GetCompleteAddress:input_type -> tari.rpc.Empty
	10, // 43: tari.rpc.Wallet.PrepareOneSidedTransactionForSigning:input_type -> tari.rpc.PrepareOneSidedTransactionForSigningRequest
	12, // 44: tari.rpc.Wallet.BroadcastSignedOneSidedTransaction:input_type -> tari.rpc.BroadcastSignedOneSidedTransactionRequest
	14, // 45: tari.rpc.Wallet.Transfer:input_type -> tari.rpc.TransferRequest
	26, // 46: tari.rpc.Wallet.GetTransactionInfo:input_type -> tari.rpc.GetTransactionInfoRequest
	29, // 47: tari.rpc.Wallet.GetCompletedTransactions:input_type -> tari.rpc.GetCompletedTransactionsRequest
	67, // 48: tari.rpc.Wallet.GetBlockHeightTransactions:input_type -> tari.rpc.GetBlockHeightTransactionsRequest
	69, // 49: tari.rpc.Wallet.GetTransactionPayRefs:input_type -> tari.rpc.GetTransactionPayRefsRequest
	32, // 50: tari.rpc.Wallet.GetBalance:input_type -> tari.rpc.GetBalanceRequest
	94, // 51: tari.rpc.Wallet.GetUnspentAmounts:input_type -> tari.rpc.Empty
	38, // 52: tari.rpc.Wallet.CoinSplit:input_type -> tari.rpc.CoinSplitRequest
	40, // 53: tari.rpc.Wallet.ImportUtxos:input_type -> tari.rpc.ImportUtxosRequest
	94, // 54: tari.rpc.Wallet.GetNetworkStatus:input_type -> tari.rpc.Empty
	94, // 55: tari.rpc.Wallet.ListConnectedPeers:input_type -> tari.rpc.Empty
	44, // 56: tari.rpc.Wallet.CancelTransaction:input_type -> tari.rpc.CancelTransactionRequest
	46, // 57: tari.rpc.Wallet.RevalidateAllTransactions:input_type -> tari.rpc.RevalidateRequest
	48, // 58: tari.rpc.Wallet.ValidateAllTransactions:input_type -> tari.rpc.ValidateRequest
	15, // 59: tari.rpc.Wallet.SendShaAtomicSwapTransaction:input_type -> tari.rpc.SendShaAtomicSwapRequest
	16, // 60: tari.rpc.Wallet.CreateBurnTransaction:input_type -> tari.rpc.CreateBurnTransactionRequest
	22, // 61: tari.rpc.Wallet.ClaimShaAtomicSwapTransaction:input_type -> tari.rpc.ClaimShaAtomicSwapRequest
	24, // 62: tari.rpc.Wallet.ClaimHtlcRefundTransaction:input_type -> tari.rpc.ClaimHtlcRefundRequest
	42, // 63: tari.rpc.Wallet.CreateTemplateRegistration:input_type -> tari.rpc.CreateTemplateRegistrationRequest
	84, // 64: tari.rpc.Wallet.SignMessage:input_type -> tari.rpc.SignMessageRequest
	54, // 65: tari.rpc.Wallet.StreamTransactionEvents:input_type -> tari.rpc.TransactionEventRequest
	63, // 66: tari.rpc.Wallet.ImportTransactions:input_type -> tari.rpc.ImportTransactionsRequest
	65, // 67: tari.rpc.Wallet.GetAllCompletedTransactions:input_type -> tari.rpc.GetAllCompletedTransactionsRequest
	72, // 68: tari.rpc.Wallet.GetPaymentByReference:input_type -> tari.rpc.GetPaymentByReferenceRequest
	74, // 69: tari.rpc.Wallet.GetFeeEstimate:input_type -> tari.rpc.GetFeeEstimateRequest
	76, // 70: tari.rpc.Wallet.GetFeePerGramStats:input_type -> tari.rpc.GetFeePerGramStatsRequest
	78, // 71: tari.rpc.Wallet.ReplaceByFee:input_type -> tari.rpc.ReplaceByFeeRequest
	80, // 72: tari.rpc.Wallet.UserPayForFee:input_type -> tari.rpc.UserPayForFeeRequest
	57, // 73: tari.rpc.Wallet.RegisterValidatorNode:input_type -> tari.rpc.RegisterValidatorNodeRequest
	59, // 74: tari.rpc.Wallet.SubmitValidatorEvictionProof:input_type -> tari.rpc.SubmitValidatorEvictionProofRequest
	61, // 75: tari.rpc.Wallet.SubmitValidatorNodeExit:input_type -> tari.rpc.SubmitValidatorNodeExitRequest
	6,  // 76: tari.rpc.Wallet.GetVersion:output_type -> tari.rpc.GetVersionResponse
	36, // 77: tari.rpc.Wallet.GetState:output_type -> tari.rpc.GetStateResponse
	53, // 78: tari.rpc.Wallet.CheckConnectivity:output_type -> tari.rpc.CheckConnectivityResponse
	96, // 79: tari.rpc.Wallet.CheckForUpdates:output_type -> tari.rpc.SoftwareUpdate
	97, // 80: tari.rpc.Wallet.Identify:output_type -> tari.rpc.GetIdentityResponse
	7,  // 81: tari.rpc.Wallet.GetAddress:output_type -> tari.rpc.GetAddressResponse
	9,  // 82: tari.rpc.Wallet.GetPaymentIdAddress:output_type -> tari.rpc.GetCompleteAddressResponse
	9,  // 83: tari.rpc.Wallet.GetCompleteAddress:output_type -> tari.rpc.GetCompleteAddressResponse
	11, // 84: tari.rpc.Wallet.PrepareOneSidedTransactionForSigning:output_type -> tari.rpc.PrepareOneSidedTransactionForSigningResponse
	13, // 85: tari.rpc.Wallet.BroadcastSignedOneSidedTransaction:output_type -> tari.rpc.BroadcastSignedOneSidedTransactionResponse
	18, // 86: tari.rpc.Wallet.Transfer:output_type -> tari.rpc.TransferResponse
	27, // 87: tari.rpc.Wallet.GetTransactionInfo:output_type -> tari.rpc.GetTransactionInfoResponse
	31, // 88: tari.rpc.Wallet.GetCompletedTransactions:output_type -> tari.rpc.GetCompletedTransactionsResponse
	68, // 89: tari.rpc.Wallet.GetBlockHeightTransactions:output_type -> tari.rpc.GetBlockHeightTransactionsResponse
	70, // 90: tari.rpc.Wallet.GetTransactionPayRefs:output_type -> tari.rpc.GetTransactionPayRefsResponse
	35, // 91: tari.rpc.Wallet.GetBalance:output_type -> tari.rpc.GetBalanceResponse
	37, // 92: tari.rpc.Wallet.GetUnspentAmounts:output_type -> tari.rpc.GetUnspentAmountsResponse
	39, // 93: tari.rpc.Wallet.CoinSplit:output_type -> tari.rpc.CoinSplitResponse
	41, // 94: tari.rpc.Wallet.ImportUtxos:output_type -> tari.rpc.ImportUtxosResponse
	88, // 95: tari.rpc.Wallet.GetNetworkStatus:output_type -> tari.rpc.NetworkStatusResponse
	98, // 96: tari.rpc.Wallet.ListConnectedPeers:output_type -> tari.rpc.ListConnectedPeersResponse
	45, // 97: tari.rpc.Wallet.CancelTransaction:output_type -> tari.rpc.CancelTransactionResponse
	47, // 98: tari.rpc.Wallet.RevalidateAllTransactions:output_type -> tari.rpc.RevalidateResponse
	49, // 99: tari.rpc.Wallet.ValidateAllTransactions:output_type -> tari.rpc.ValidateResponse
	19, // 100: tari.rpc.Wallet.SendShaAtomicSwapTransaction:output_type -> tari.rpc.SendShaAtomicSwapResponse
	20, // 101: tari.rpc.Wallet.CreateBurnTransaction:output_type -> tari.rpc.CreateBurnTransactionResponse
	23, // 102: tari.rpc.Wallet.ClaimShaAtomicSwapTransaction:output_type -> tari.rpc.ClaimShaAtomicSwapResponse
	25, // 103: tari.rpc.Wallet.ClaimHtlcRefundTransaction:output_type -> tari.rpc.ClaimHtlcRefundResponse
	43, // 104: tari.rpc.Wallet.CreateTemplateRegistration:output_type -> tari.rpc.CreateTemplateRegistrationResponse
	85, // 105: tari.rpc.Wallet.SignMessage:output_type -> tari.rpc.SignMessageResponse
	56, // 106: tari.rpc.Wallet.StreamTransactionEvents:output_type -> tari.rpc.TransactionEventResponse
	64, // 107: tari.rpc.Wallet.ImportTransactions:output_type -> tari.rpc.ImportTransactionsResponse
	66, // 108: tari.rpc.Wallet.GetAllCompletedTransactions:output_type -> tari.rpc.GetAllCompletedTransactionsResponse
	73, // 109: tari.rpc.Wallet.GetPaymentByReference:output_type -> tari.rpc.GetPaymentByReferenceResponse
	75, // 110: tari.rpc.Wallet.GetFeeEstimate:output_type -> tari.rpc.GetFeeEstimateResponse
	77, // 111: tari.rpc.Wallet.GetFeePerGramStats:output_type -> tari.rpc.GetFeePerGramStatsResponse
	79, // 112: tari.rpc.Wallet.ReplaceByFee:output_type -> tari.rpc.ReplaceByFeeResponse
	82, // 113: tari.rpc.Wallet.UserPayForFee:output_type -> tari.rpc.UserPayForFeeResponse
	58, // 114: tari.rpc.Wallet.RegisterValidatorNode:output_type -> tari.rpc.RegisterValidatorNodeResponse
	60, // 115: tari.rpc.Wallet.SubmitValidatorEvictionProof:output_type -> tari.rpc.SubmitValidatorEvictionProofResponse
	62, // 116: tari.rpc.Wallet.SubmitValidatorNodeExit:output_type -> tari.rpc.SubmitValidatorNodeExitResponse
	76, // [76:117] is the sub-list for method output_type
	35, // [35:76] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_wallet_proto_init() }
func file_wallet_proto_init() {
	if File_wallet_proto != nil {
		return
	}
	file_types_proto_init()
	file_transaction_proto_init()
	file_sidechain_types_proto_init()
	file_network_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wallet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentIdAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompleteAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareOneSidedTransactionForSigningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareOneSidedTransactionForSigningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastSignedOneSidedTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastSignedOneSidedTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendShaAtomicSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBurnTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentRecipient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendShaAtomicSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBurnTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimShaAtomicSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimShaAtomicSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimHtlcRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimHtlcRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompletedTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHashHex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompletedTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPaymentId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnspentAmountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinSplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinSplitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportUtxosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportUtxosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTemplateRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTemplateRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevalidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevalidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBaseNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBaseNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckConnectivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterValidatorNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterValidatorNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitValidatorEvictionProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitValidatorEvictionProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitValidatorNodeExitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitValidatorNodeExitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCompletedTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCompletedTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockHeightTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockHeightTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionPayRefsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionPayRefsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsWithPayRefsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentByReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentByReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeEstimateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeEstimateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeePerGramStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeePerGramStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceByFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceByFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayForFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutputsToSpendTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPayForFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeePerGramStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wallet_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   81,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wallet_proto_goTypes,
		DependencyIndexes: file_wallet_proto_depIdxs,
		EnumInfos:         file_wallet_proto_enumTypes,
		MessageInfos:      file_wallet_proto_msgTypes,
	}.Build()
	File_wallet_proto = out.File
	file_wallet_proto_rawDesc = nil
	file_wallet_proto_goTypes = nil
	file_wallet_proto_depIdxs = nil
}
