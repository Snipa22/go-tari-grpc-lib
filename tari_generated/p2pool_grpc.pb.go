// Copyright 2024. The Tari Project
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
// following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
// disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
// following disclaimer in the documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
// products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: p2pool.proto

package tari_generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ShaP2Pool_GetTipInfo_FullMethodName  = "/tari.rpc.ShaP2Pool/GetTipInfo"
	ShaP2Pool_GetNewBlock_FullMethodName = "/tari.rpc.ShaP2Pool/GetNewBlock"
	ShaP2Pool_SubmitBlock_FullMethodName = "/tari.rpc.ShaP2Pool/SubmitBlock"
)

// ShaP2PoolClient is the client API for ShaP2Pool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShaP2PoolClient interface {
	GetTipInfo(ctx context.Context, in *GetTipInfoRequest, opts ...grpc.CallOption) (*GetTipInfoResponse, error)
	GetNewBlock(ctx context.Context, in *GetNewBlockRequest, opts ...grpc.CallOption) (*GetNewBlockResponse, error)
	SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error)
}

type shaP2PoolClient struct {
	cc grpc.ClientConnInterface
}

func NewShaP2PoolClient(cc grpc.ClientConnInterface) ShaP2PoolClient {
	return &shaP2PoolClient{cc}
}

func (c *shaP2PoolClient) GetTipInfo(ctx context.Context, in *GetTipInfoRequest, opts ...grpc.CallOption) (*GetTipInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTipInfoResponse)
	err := c.cc.Invoke(ctx, ShaP2Pool_GetTipInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shaP2PoolClient) GetNewBlock(ctx context.Context, in *GetNewBlockRequest, opts ...grpc.CallOption) (*GetNewBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNewBlockResponse)
	err := c.cc.Invoke(ctx, ShaP2Pool_GetNewBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shaP2PoolClient) SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitBlockResponse)
	err := c.cc.Invoke(ctx, ShaP2Pool_SubmitBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShaP2PoolServer is the server API for ShaP2Pool service.
// All implementations must embed UnimplementedShaP2PoolServer
// for forward compatibility
type ShaP2PoolServer interface {
	GetTipInfo(context.Context, *GetTipInfoRequest) (*GetTipInfoResponse, error)
	GetNewBlock(context.Context, *GetNewBlockRequest) (*GetNewBlockResponse, error)
	SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error)
	mustEmbedUnimplementedShaP2PoolServer()
}

// UnimplementedShaP2PoolServer must be embedded to have forward compatible implementations.
type UnimplementedShaP2PoolServer struct {
}

func (UnimplementedShaP2PoolServer) GetTipInfo(context.Context, *GetTipInfoRequest) (*GetTipInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTipInfo not implemented")
}
func (UnimplementedShaP2PoolServer) GetNewBlock(context.Context, *GetNewBlockRequest) (*GetNewBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewBlock not implemented")
}
func (UnimplementedShaP2PoolServer) SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (UnimplementedShaP2PoolServer) mustEmbedUnimplementedShaP2PoolServer() {}

// UnsafeShaP2PoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShaP2PoolServer will
// result in compilation errors.
type UnsafeShaP2PoolServer interface {
	mustEmbedUnimplementedShaP2PoolServer()
}

func RegisterShaP2PoolServer(s grpc.ServiceRegistrar, srv ShaP2PoolServer) {
	s.RegisterService(&ShaP2Pool_ServiceDesc, srv)
}

func _ShaP2Pool_GetTipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTipInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShaP2PoolServer).GetTipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShaP2Pool_GetTipInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShaP2PoolServer).GetTipInfo(ctx, req.(*GetTipInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShaP2Pool_GetNewBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShaP2PoolServer).GetNewBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShaP2Pool_GetNewBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShaP2PoolServer).GetNewBlock(ctx, req.(*GetNewBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShaP2Pool_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShaP2PoolServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShaP2Pool_SubmitBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShaP2PoolServer).SubmitBlock(ctx, req.(*SubmitBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShaP2Pool_ServiceDesc is the grpc.ServiceDesc for ShaP2Pool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShaP2Pool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tari.rpc.ShaP2Pool",
	HandlerType: (*ShaP2PoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTipInfo",
			Handler:    _ShaP2Pool_GetTipInfo_Handler,
		},
		{
			MethodName: "GetNewBlock",
			Handler:    _ShaP2Pool_GetNewBlock_Handler,
		},
		{
			MethodName: "SubmitBlock",
			Handler:    _ShaP2Pool_SubmitBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "p2pool.proto",
}
