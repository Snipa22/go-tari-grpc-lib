// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tari_generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BaseNodeClient is the client API for BaseNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseNodeClient interface {
	// Lists headers in the current best chain
	ListHeaders(ctx context.Context, in *ListHeadersRequest, opts ...grpc.CallOption) (BaseNode_ListHeadersClient, error)
	// Get header by hash
	GetHeaderByHash(ctx context.Context, in *GetHeaderByHashRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error)
	// Returns blocks in the current best chain. Currently only supports querying by height
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (BaseNode_GetBlocksClient, error)
	// Returns the block timing for the chain heights
	GetBlockTiming(ctx context.Context, in *HeightRequest, opts ...grpc.CallOption) (*BlockTimingResponse, error)
	// Returns the network Constants
	GetConstants(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*ConsensusConstants, error)
	// Returns Block Sizes
	GetBlockSize(ctx context.Context, in *BlockGroupRequest, opts ...grpc.CallOption) (*BlockGroupResponse, error)
	// Returns Block Fees
	GetBlockFees(ctx context.Context, in *BlockGroupRequest, opts ...grpc.CallOption) (*BlockGroupResponse, error)
	// Get Version
	GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringValue, error)
	// Check for new updates
	CheckForUpdates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SoftwareUpdate, error)
	// Get coins in circulation
	GetTokensInCirculation(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (BaseNode_GetTokensInCirculationClient, error)
	// Get network difficulties
	GetNetworkDifficulty(ctx context.Context, in *HeightRequest, opts ...grpc.CallOption) (BaseNode_GetNetworkDifficultyClient, error)
	// Get the block template
	GetNewBlockTemplate(ctx context.Context, in *NewBlockTemplateRequest, opts ...grpc.CallOption) (*NewBlockTemplateResponse, error)
	// Construct a new block from a provided template
	GetNewBlock(ctx context.Context, in *NewBlockTemplate, opts ...grpc.CallOption) (*GetNewBlockResult, error)
	// Construct a new block from a provided template
	GetNewBlockWithCoinbases(ctx context.Context, in *GetNewBlockWithCoinbasesRequest, opts ...grpc.CallOption) (*GetNewBlockResult, error)
	// Construct a new block from a provided template
	GetNewBlockTemplateWithCoinbases(ctx context.Context, in *GetNewBlockTemplateWithCoinbasesRequest, opts ...grpc.CallOption) (*GetNewBlockResult, error)
	// Construct a new block and header blob from a provided template
	GetNewBlockBlob(ctx context.Context, in *NewBlockTemplate, opts ...grpc.CallOption) (*GetNewBlockBlobResult, error)
	// Submit a new block for propagation
	SubmitBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*SubmitBlockResponse, error)
	// Submit a new mined block blob for propagation
	SubmitBlockBlob(ctx context.Context, in *BlockBlobRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error)
	// Submit a transaction for propagation
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error)
	// Get the base node sync information
	GetSyncInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SyncInfoResponse, error)
	// Get the base node sync information
	GetSyncProgress(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SyncProgressResponse, error)
	// Get the base node tip information
	GetTipInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TipInfoResponse, error)
	// Search for blocks containing the specified kernels
	SearchKernels(ctx context.Context, in *SearchKernelsRequest, opts ...grpc.CallOption) (BaseNode_SearchKernelsClient, error)
	// Search for blocks containing the specified commitments
	SearchUtxos(ctx context.Context, in *SearchUtxosRequest, opts ...grpc.CallOption) (BaseNode_SearchUtxosClient, error)
	// Fetch any utxos that exist in the main chain
	FetchMatchingUtxos(ctx context.Context, in *FetchMatchingUtxosRequest, opts ...grpc.CallOption) (BaseNode_FetchMatchingUtxosClient, error)
	// get all peers from the base node
	GetPeers(ctx context.Context, in *GetPeersRequest, opts ...grpc.CallOption) (BaseNode_GetPeersClient, error)
	GetMempoolTransactions(ctx context.Context, in *GetMempoolTransactionsRequest, opts ...grpc.CallOption) (BaseNode_GetMempoolTransactionsClient, error)
	TransactionState(ctx context.Context, in *TransactionStateRequest, opts ...grpc.CallOption) (*TransactionStateResponse, error)
	// This returns the node's network identity
	Identify(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeIdentity, error)
	// Get Base Node network connectivity status
	GetNetworkStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetworkStatusResponse, error)
	// List currently connected peers
	ListConnectedPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListConnectedPeersResponse, error)
	// Get mempool stats
	GetMempoolStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MempoolStatsResponse, error)
	// Get VNs
	GetActiveValidatorNodes(ctx context.Context, in *GetActiveValidatorNodesRequest, opts ...grpc.CallOption) (BaseNode_GetActiveValidatorNodesClient, error)
	GetShardKey(ctx context.Context, in *GetShardKeyRequest, opts ...grpc.CallOption) (*GetShardKeyResponse, error)
	// Get templates
	GetTemplateRegistrations(ctx context.Context, in *GetTemplateRegistrationsRequest, opts ...grpc.CallOption) (BaseNode_GetTemplateRegistrationsClient, error)
	GetSideChainUtxos(ctx context.Context, in *GetSideChainUtxosRequest, opts ...grpc.CallOption) (BaseNode_GetSideChainUtxosClient, error)
	GetNetworkState(ctx context.Context, in *GetNetworkStateRequest, opts ...grpc.CallOption) (*GetNetworkStateResponse, error)
}

type baseNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseNodeClient(cc grpc.ClientConnInterface) BaseNodeClient {
	return &baseNodeClient{cc}
}

func (c *baseNodeClient) ListHeaders(ctx context.Context, in *ListHeadersRequest, opts ...grpc.CallOption) (BaseNode_ListHeadersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BaseNode_serviceDesc.Streams[0], "/tari.rpc.BaseNode/ListHeaders", opts...)
	if err != nil {
		return nil, err
	}
	x := &baseNodeListHeadersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BaseNode_ListHeadersClient interface {
	Recv() (*BlockHeaderResponse, error)
	grpc.ClientStream
}

type baseNodeListHeadersClient struct {
	grpc.ClientStream
}

func (x *baseNodeListHeadersClient) Recv() (*BlockHeaderResponse, error) {
	m := new(BlockHeaderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baseNodeClient) GetHeaderByHash(ctx context.Context, in *GetHeaderByHashRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error) {
	out := new(BlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetHeaderByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (BaseNode_GetBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BaseNode_serviceDesc.Streams[1], "/tari.rpc.BaseNode/GetBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &baseNodeGetBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BaseNode_GetBlocksClient interface {
	Recv() (*HistoricalBlock, error)
	grpc.ClientStream
}

type baseNodeGetBlocksClient struct {
	grpc.ClientStream
}

func (x *baseNodeGetBlocksClient) Recv() (*HistoricalBlock, error) {
	m := new(HistoricalBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baseNodeClient) GetBlockTiming(ctx context.Context, in *HeightRequest, opts ...grpc.CallOption) (*BlockTimingResponse, error) {
	out := new(BlockTimingResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetBlockTiming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetConstants(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*ConsensusConstants, error) {
	out := new(ConsensusConstants)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetConstants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetBlockSize(ctx context.Context, in *BlockGroupRequest, opts ...grpc.CallOption) (*BlockGroupResponse, error) {
	out := new(BlockGroupResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetBlockSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetBlockFees(ctx context.Context, in *BlockGroupRequest, opts ...grpc.CallOption) (*BlockGroupResponse, error) {
	out := new(BlockGroupResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetBlockFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringValue, error) {
	out := new(StringValue)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) CheckForUpdates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SoftwareUpdate, error) {
	out := new(SoftwareUpdate)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/CheckForUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetTokensInCirculation(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (BaseNode_GetTokensInCirculationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BaseNode_serviceDesc.Streams[2], "/tari.rpc.BaseNode/GetTokensInCirculation", opts...)
	if err != nil {
		return nil, err
	}
	x := &baseNodeGetTokensInCirculationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BaseNode_GetTokensInCirculationClient interface {
	Recv() (*ValueAtHeightResponse, error)
	grpc.ClientStream
}

type baseNodeGetTokensInCirculationClient struct {
	grpc.ClientStream
}

func (x *baseNodeGetTokensInCirculationClient) Recv() (*ValueAtHeightResponse, error) {
	m := new(ValueAtHeightResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baseNodeClient) GetNetworkDifficulty(ctx context.Context, in *HeightRequest, opts ...grpc.CallOption) (BaseNode_GetNetworkDifficultyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BaseNode_serviceDesc.Streams[3], "/tari.rpc.BaseNode/GetNetworkDifficulty", opts...)
	if err != nil {
		return nil, err
	}
	x := &baseNodeGetNetworkDifficultyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BaseNode_GetNetworkDifficultyClient interface {
	Recv() (*NetworkDifficultyResponse, error)
	grpc.ClientStream
}

type baseNodeGetNetworkDifficultyClient struct {
	grpc.ClientStream
}

func (x *baseNodeGetNetworkDifficultyClient) Recv() (*NetworkDifficultyResponse, error) {
	m := new(NetworkDifficultyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baseNodeClient) GetNewBlockTemplate(ctx context.Context, in *NewBlockTemplateRequest, opts ...grpc.CallOption) (*NewBlockTemplateResponse, error) {
	out := new(NewBlockTemplateResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetNewBlockTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetNewBlock(ctx context.Context, in *NewBlockTemplate, opts ...grpc.CallOption) (*GetNewBlockResult, error) {
	out := new(GetNewBlockResult)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetNewBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetNewBlockWithCoinbases(ctx context.Context, in *GetNewBlockWithCoinbasesRequest, opts ...grpc.CallOption) (*GetNewBlockResult, error) {
	out := new(GetNewBlockResult)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetNewBlockWithCoinbases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetNewBlockTemplateWithCoinbases(ctx context.Context, in *GetNewBlockTemplateWithCoinbasesRequest, opts ...grpc.CallOption) (*GetNewBlockResult, error) {
	out := new(GetNewBlockResult)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetNewBlockTemplateWithCoinbases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetNewBlockBlob(ctx context.Context, in *NewBlockTemplate, opts ...grpc.CallOption) (*GetNewBlockBlobResult, error) {
	out := new(GetNewBlockBlobResult)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetNewBlockBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) SubmitBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*SubmitBlockResponse, error) {
	out := new(SubmitBlockResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/SubmitBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) SubmitBlockBlob(ctx context.Context, in *BlockBlobRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error) {
	out := new(SubmitBlockResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/SubmitBlockBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error) {
	out := new(SubmitTransactionResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetSyncInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SyncInfoResponse, error) {
	out := new(SyncInfoResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetSyncInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetSyncProgress(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SyncProgressResponse, error) {
	out := new(SyncProgressResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetSyncProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetTipInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TipInfoResponse, error) {
	out := new(TipInfoResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetTipInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) SearchKernels(ctx context.Context, in *SearchKernelsRequest, opts ...grpc.CallOption) (BaseNode_SearchKernelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BaseNode_serviceDesc.Streams[4], "/tari.rpc.BaseNode/SearchKernels", opts...)
	if err != nil {
		return nil, err
	}
	x := &baseNodeSearchKernelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BaseNode_SearchKernelsClient interface {
	Recv() (*HistoricalBlock, error)
	grpc.ClientStream
}

type baseNodeSearchKernelsClient struct {
	grpc.ClientStream
}

func (x *baseNodeSearchKernelsClient) Recv() (*HistoricalBlock, error) {
	m := new(HistoricalBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baseNodeClient) SearchUtxos(ctx context.Context, in *SearchUtxosRequest, opts ...grpc.CallOption) (BaseNode_SearchUtxosClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BaseNode_serviceDesc.Streams[5], "/tari.rpc.BaseNode/SearchUtxos", opts...)
	if err != nil {
		return nil, err
	}
	x := &baseNodeSearchUtxosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BaseNode_SearchUtxosClient interface {
	Recv() (*HistoricalBlock, error)
	grpc.ClientStream
}

type baseNodeSearchUtxosClient struct {
	grpc.ClientStream
}

func (x *baseNodeSearchUtxosClient) Recv() (*HistoricalBlock, error) {
	m := new(HistoricalBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baseNodeClient) FetchMatchingUtxos(ctx context.Context, in *FetchMatchingUtxosRequest, opts ...grpc.CallOption) (BaseNode_FetchMatchingUtxosClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BaseNode_serviceDesc.Streams[6], "/tari.rpc.BaseNode/FetchMatchingUtxos", opts...)
	if err != nil {
		return nil, err
	}
	x := &baseNodeFetchMatchingUtxosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BaseNode_FetchMatchingUtxosClient interface {
	Recv() (*FetchMatchingUtxosResponse, error)
	grpc.ClientStream
}

type baseNodeFetchMatchingUtxosClient struct {
	grpc.ClientStream
}

func (x *baseNodeFetchMatchingUtxosClient) Recv() (*FetchMatchingUtxosResponse, error) {
	m := new(FetchMatchingUtxosResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baseNodeClient) GetPeers(ctx context.Context, in *GetPeersRequest, opts ...grpc.CallOption) (BaseNode_GetPeersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BaseNode_serviceDesc.Streams[7], "/tari.rpc.BaseNode/GetPeers", opts...)
	if err != nil {
		return nil, err
	}
	x := &baseNodeGetPeersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BaseNode_GetPeersClient interface {
	Recv() (*GetPeersResponse, error)
	grpc.ClientStream
}

type baseNodeGetPeersClient struct {
	grpc.ClientStream
}

func (x *baseNodeGetPeersClient) Recv() (*GetPeersResponse, error) {
	m := new(GetPeersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baseNodeClient) GetMempoolTransactions(ctx context.Context, in *GetMempoolTransactionsRequest, opts ...grpc.CallOption) (BaseNode_GetMempoolTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BaseNode_serviceDesc.Streams[8], "/tari.rpc.BaseNode/GetMempoolTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &baseNodeGetMempoolTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BaseNode_GetMempoolTransactionsClient interface {
	Recv() (*GetMempoolTransactionsResponse, error)
	grpc.ClientStream
}

type baseNodeGetMempoolTransactionsClient struct {
	grpc.ClientStream
}

func (x *baseNodeGetMempoolTransactionsClient) Recv() (*GetMempoolTransactionsResponse, error) {
	m := new(GetMempoolTransactionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baseNodeClient) TransactionState(ctx context.Context, in *TransactionStateRequest, opts ...grpc.CallOption) (*TransactionStateResponse, error) {
	out := new(TransactionStateResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/TransactionState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) Identify(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeIdentity, error) {
	out := new(NodeIdentity)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/Identify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetNetworkStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetworkStatusResponse, error) {
	out := new(NetworkStatusResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetNetworkStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) ListConnectedPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListConnectedPeersResponse, error) {
	out := new(ListConnectedPeersResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/ListConnectedPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetMempoolStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MempoolStatsResponse, error) {
	out := new(MempoolStatsResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetMempoolStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetActiveValidatorNodes(ctx context.Context, in *GetActiveValidatorNodesRequest, opts ...grpc.CallOption) (BaseNode_GetActiveValidatorNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BaseNode_serviceDesc.Streams[9], "/tari.rpc.BaseNode/GetActiveValidatorNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &baseNodeGetActiveValidatorNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BaseNode_GetActiveValidatorNodesClient interface {
	Recv() (*GetActiveValidatorNodesResponse, error)
	grpc.ClientStream
}

type baseNodeGetActiveValidatorNodesClient struct {
	grpc.ClientStream
}

func (x *baseNodeGetActiveValidatorNodesClient) Recv() (*GetActiveValidatorNodesResponse, error) {
	m := new(GetActiveValidatorNodesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baseNodeClient) GetShardKey(ctx context.Context, in *GetShardKeyRequest, opts ...grpc.CallOption) (*GetShardKeyResponse, error) {
	out := new(GetShardKeyResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetShardKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) GetTemplateRegistrations(ctx context.Context, in *GetTemplateRegistrationsRequest, opts ...grpc.CallOption) (BaseNode_GetTemplateRegistrationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BaseNode_serviceDesc.Streams[10], "/tari.rpc.BaseNode/GetTemplateRegistrations", opts...)
	if err != nil {
		return nil, err
	}
	x := &baseNodeGetTemplateRegistrationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BaseNode_GetTemplateRegistrationsClient interface {
	Recv() (*GetTemplateRegistrationResponse, error)
	grpc.ClientStream
}

type baseNodeGetTemplateRegistrationsClient struct {
	grpc.ClientStream
}

func (x *baseNodeGetTemplateRegistrationsClient) Recv() (*GetTemplateRegistrationResponse, error) {
	m := new(GetTemplateRegistrationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baseNodeClient) GetSideChainUtxos(ctx context.Context, in *GetSideChainUtxosRequest, opts ...grpc.CallOption) (BaseNode_GetSideChainUtxosClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BaseNode_serviceDesc.Streams[11], "/tari.rpc.BaseNode/GetSideChainUtxos", opts...)
	if err != nil {
		return nil, err
	}
	x := &baseNodeGetSideChainUtxosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BaseNode_GetSideChainUtxosClient interface {
	Recv() (*GetSideChainUtxosResponse, error)
	grpc.ClientStream
}

type baseNodeGetSideChainUtxosClient struct {
	grpc.ClientStream
}

func (x *baseNodeGetSideChainUtxosClient) Recv() (*GetSideChainUtxosResponse, error) {
	m := new(GetSideChainUtxosResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *baseNodeClient) GetNetworkState(ctx context.Context, in *GetNetworkStateRequest, opts ...grpc.CallOption) (*GetNetworkStateResponse, error) {
	out := new(GetNetworkStateResponse)
	err := c.cc.Invoke(ctx, "/tari.rpc.BaseNode/GetNetworkState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseNodeServer is the server API for BaseNode service.
// All implementations must embed UnimplementedBaseNodeServer
// for forward compatibility
type BaseNodeServer interface {
	// Lists headers in the current best chain
	ListHeaders(*ListHeadersRequest, BaseNode_ListHeadersServer) error
	// Get header by hash
	GetHeaderByHash(context.Context, *GetHeaderByHashRequest) (*BlockHeaderResponse, error)
	// Returns blocks in the current best chain. Currently only supports querying by height
	GetBlocks(*GetBlocksRequest, BaseNode_GetBlocksServer) error
	// Returns the block timing for the chain heights
	GetBlockTiming(context.Context, *HeightRequest) (*BlockTimingResponse, error)
	// Returns the network Constants
	GetConstants(context.Context, *BlockHeight) (*ConsensusConstants, error)
	// Returns Block Sizes
	GetBlockSize(context.Context, *BlockGroupRequest) (*BlockGroupResponse, error)
	// Returns Block Fees
	GetBlockFees(context.Context, *BlockGroupRequest) (*BlockGroupResponse, error)
	// Get Version
	GetVersion(context.Context, *Empty) (*StringValue, error)
	// Check for new updates
	CheckForUpdates(context.Context, *Empty) (*SoftwareUpdate, error)
	// Get coins in circulation
	GetTokensInCirculation(*GetBlocksRequest, BaseNode_GetTokensInCirculationServer) error
	// Get network difficulties
	GetNetworkDifficulty(*HeightRequest, BaseNode_GetNetworkDifficultyServer) error
	// Get the block template
	GetNewBlockTemplate(context.Context, *NewBlockTemplateRequest) (*NewBlockTemplateResponse, error)
	// Construct a new block from a provided template
	GetNewBlock(context.Context, *NewBlockTemplate) (*GetNewBlockResult, error)
	// Construct a new block from a provided template
	GetNewBlockWithCoinbases(context.Context, *GetNewBlockWithCoinbasesRequest) (*GetNewBlockResult, error)
	// Construct a new block from a provided template
	GetNewBlockTemplateWithCoinbases(context.Context, *GetNewBlockTemplateWithCoinbasesRequest) (*GetNewBlockResult, error)
	// Construct a new block and header blob from a provided template
	GetNewBlockBlob(context.Context, *NewBlockTemplate) (*GetNewBlockBlobResult, error)
	// Submit a new block for propagation
	SubmitBlock(context.Context, *Block) (*SubmitBlockResponse, error)
	// Submit a new mined block blob for propagation
	SubmitBlockBlob(context.Context, *BlockBlobRequest) (*SubmitBlockResponse, error)
	// Submit a transaction for propagation
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error)
	// Get the base node sync information
	GetSyncInfo(context.Context, *Empty) (*SyncInfoResponse, error)
	// Get the base node sync information
	GetSyncProgress(context.Context, *Empty) (*SyncProgressResponse, error)
	// Get the base node tip information
	GetTipInfo(context.Context, *Empty) (*TipInfoResponse, error)
	// Search for blocks containing the specified kernels
	SearchKernels(*SearchKernelsRequest, BaseNode_SearchKernelsServer) error
	// Search for blocks containing the specified commitments
	SearchUtxos(*SearchUtxosRequest, BaseNode_SearchUtxosServer) error
	// Fetch any utxos that exist in the main chain
	FetchMatchingUtxos(*FetchMatchingUtxosRequest, BaseNode_FetchMatchingUtxosServer) error
	// get all peers from the base node
	GetPeers(*GetPeersRequest, BaseNode_GetPeersServer) error
	GetMempoolTransactions(*GetMempoolTransactionsRequest, BaseNode_GetMempoolTransactionsServer) error
	TransactionState(context.Context, *TransactionStateRequest) (*TransactionStateResponse, error)
	// This returns the node's network identity
	Identify(context.Context, *Empty) (*NodeIdentity, error)
	// Get Base Node network connectivity status
	GetNetworkStatus(context.Context, *Empty) (*NetworkStatusResponse, error)
	// List currently connected peers
	ListConnectedPeers(context.Context, *Empty) (*ListConnectedPeersResponse, error)
	// Get mempool stats
	GetMempoolStats(context.Context, *Empty) (*MempoolStatsResponse, error)
	// Get VNs
	GetActiveValidatorNodes(*GetActiveValidatorNodesRequest, BaseNode_GetActiveValidatorNodesServer) error
	GetShardKey(context.Context, *GetShardKeyRequest) (*GetShardKeyResponse, error)
	// Get templates
	GetTemplateRegistrations(*GetTemplateRegistrationsRequest, BaseNode_GetTemplateRegistrationsServer) error
	GetSideChainUtxos(*GetSideChainUtxosRequest, BaseNode_GetSideChainUtxosServer) error
	GetNetworkState(context.Context, *GetNetworkStateRequest) (*GetNetworkStateResponse, error)
	mustEmbedUnimplementedBaseNodeServer()
}

// UnimplementedBaseNodeServer must be embedded to have forward compatible implementations.
type UnimplementedBaseNodeServer struct {
}

func (UnimplementedBaseNodeServer) ListHeaders(*ListHeadersRequest, BaseNode_ListHeadersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListHeaders not implemented")
}
func (UnimplementedBaseNodeServer) GetHeaderByHash(context.Context, *GetHeaderByHashRequest) (*BlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeaderByHash not implemented")
}
func (UnimplementedBaseNodeServer) GetBlocks(*GetBlocksRequest, BaseNode_GetBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedBaseNodeServer) GetBlockTiming(context.Context, *HeightRequest) (*BlockTimingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockTiming not implemented")
}
func (UnimplementedBaseNodeServer) GetConstants(context.Context, *BlockHeight) (*ConsensusConstants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConstants not implemented")
}
func (UnimplementedBaseNodeServer) GetBlockSize(context.Context, *BlockGroupRequest) (*BlockGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockSize not implemented")
}
func (UnimplementedBaseNodeServer) GetBlockFees(context.Context, *BlockGroupRequest) (*BlockGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockFees not implemented")
}
func (UnimplementedBaseNodeServer) GetVersion(context.Context, *Empty) (*StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedBaseNodeServer) CheckForUpdates(context.Context, *Empty) (*SoftwareUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForUpdates not implemented")
}
func (UnimplementedBaseNodeServer) GetTokensInCirculation(*GetBlocksRequest, BaseNode_GetTokensInCirculationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTokensInCirculation not implemented")
}
func (UnimplementedBaseNodeServer) GetNetworkDifficulty(*HeightRequest, BaseNode_GetNetworkDifficultyServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNetworkDifficulty not implemented")
}
func (UnimplementedBaseNodeServer) GetNewBlockTemplate(context.Context, *NewBlockTemplateRequest) (*NewBlockTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewBlockTemplate not implemented")
}
func (UnimplementedBaseNodeServer) GetNewBlock(context.Context, *NewBlockTemplate) (*GetNewBlockResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewBlock not implemented")
}
func (UnimplementedBaseNodeServer) GetNewBlockWithCoinbases(context.Context, *GetNewBlockWithCoinbasesRequest) (*GetNewBlockResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewBlockWithCoinbases not implemented")
}
func (UnimplementedBaseNodeServer) GetNewBlockTemplateWithCoinbases(context.Context, *GetNewBlockTemplateWithCoinbasesRequest) (*GetNewBlockResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewBlockTemplateWithCoinbases not implemented")
}
func (UnimplementedBaseNodeServer) GetNewBlockBlob(context.Context, *NewBlockTemplate) (*GetNewBlockBlobResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewBlockBlob not implemented")
}
func (UnimplementedBaseNodeServer) SubmitBlock(context.Context, *Block) (*SubmitBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (UnimplementedBaseNodeServer) SubmitBlockBlob(context.Context, *BlockBlobRequest) (*SubmitBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlockBlob not implemented")
}
func (UnimplementedBaseNodeServer) SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (UnimplementedBaseNodeServer) GetSyncInfo(context.Context, *Empty) (*SyncInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncInfo not implemented")
}
func (UnimplementedBaseNodeServer) GetSyncProgress(context.Context, *Empty) (*SyncProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncProgress not implemented")
}
func (UnimplementedBaseNodeServer) GetTipInfo(context.Context, *Empty) (*TipInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTipInfo not implemented")
}
func (UnimplementedBaseNodeServer) SearchKernels(*SearchKernelsRequest, BaseNode_SearchKernelsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchKernels not implemented")
}
func (UnimplementedBaseNodeServer) SearchUtxos(*SearchUtxosRequest, BaseNode_SearchUtxosServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchUtxos not implemented")
}
func (UnimplementedBaseNodeServer) FetchMatchingUtxos(*FetchMatchingUtxosRequest, BaseNode_FetchMatchingUtxosServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchMatchingUtxos not implemented")
}
func (UnimplementedBaseNodeServer) GetPeers(*GetPeersRequest, BaseNode_GetPeersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPeers not implemented")
}
func (UnimplementedBaseNodeServer) GetMempoolTransactions(*GetMempoolTransactionsRequest, BaseNode_GetMempoolTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMempoolTransactions not implemented")
}
func (UnimplementedBaseNodeServer) TransactionState(context.Context, *TransactionStateRequest) (*TransactionStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionState not implemented")
}
func (UnimplementedBaseNodeServer) Identify(context.Context, *Empty) (*NodeIdentity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Identify not implemented")
}
func (UnimplementedBaseNodeServer) GetNetworkStatus(context.Context, *Empty) (*NetworkStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkStatus not implemented")
}
func (UnimplementedBaseNodeServer) ListConnectedPeers(context.Context, *Empty) (*ListConnectedPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectedPeers not implemented")
}
func (UnimplementedBaseNodeServer) GetMempoolStats(context.Context, *Empty) (*MempoolStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMempoolStats not implemented")
}
func (UnimplementedBaseNodeServer) GetActiveValidatorNodes(*GetActiveValidatorNodesRequest, BaseNode_GetActiveValidatorNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetActiveValidatorNodes not implemented")
}
func (UnimplementedBaseNodeServer) GetShardKey(context.Context, *GetShardKeyRequest) (*GetShardKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardKey not implemented")
}
func (UnimplementedBaseNodeServer) GetTemplateRegistrations(*GetTemplateRegistrationsRequest, BaseNode_GetTemplateRegistrationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTemplateRegistrations not implemented")
}
func (UnimplementedBaseNodeServer) GetSideChainUtxos(*GetSideChainUtxosRequest, BaseNode_GetSideChainUtxosServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSideChainUtxos not implemented")
}
func (UnimplementedBaseNodeServer) GetNetworkState(context.Context, *GetNetworkStateRequest) (*GetNetworkStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkState not implemented")
}
func (UnimplementedBaseNodeServer) mustEmbedUnimplementedBaseNodeServer() {}

// UnsafeBaseNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseNodeServer will
// result in compilation errors.
type UnsafeBaseNodeServer interface {
	mustEmbedUnimplementedBaseNodeServer()
}

func RegisterBaseNodeServer(s *grpc.Server, srv BaseNodeServer) {
	s.RegisterService(&_BaseNode_serviceDesc, srv)
}

func _BaseNode_ListHeaders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListHeadersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseNodeServer).ListHeaders(m, &baseNodeListHeadersServer{stream})
}

type BaseNode_ListHeadersServer interface {
	Send(*BlockHeaderResponse) error
	grpc.ServerStream
}

type baseNodeListHeadersServer struct {
	grpc.ServerStream
}

func (x *baseNodeListHeadersServer) Send(m *BlockHeaderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BaseNode_GetHeaderByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeaderByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetHeaderByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetHeaderByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetHeaderByHash(ctx, req.(*GetHeaderByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseNodeServer).GetBlocks(m, &baseNodeGetBlocksServer{stream})
}

type BaseNode_GetBlocksServer interface {
	Send(*HistoricalBlock) error
	grpc.ServerStream
}

type baseNodeGetBlocksServer struct {
	grpc.ServerStream
}

func (x *baseNodeGetBlocksServer) Send(m *HistoricalBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _BaseNode_GetBlockTiming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetBlockTiming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetBlockTiming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetBlockTiming(ctx, req.(*HeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetConstants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetConstants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetConstants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetConstants(ctx, req.(*BlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetBlockSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetBlockSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetBlockSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetBlockSize(ctx, req.(*BlockGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetBlockFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetBlockFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetBlockFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetBlockFees(ctx, req.(*BlockGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_CheckForUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).CheckForUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/CheckForUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).CheckForUpdates(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetTokensInCirculation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseNodeServer).GetTokensInCirculation(m, &baseNodeGetTokensInCirculationServer{stream})
}

type BaseNode_GetTokensInCirculationServer interface {
	Send(*ValueAtHeightResponse) error
	grpc.ServerStream
}

type baseNodeGetTokensInCirculationServer struct {
	grpc.ServerStream
}

func (x *baseNodeGetTokensInCirculationServer) Send(m *ValueAtHeightResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BaseNode_GetNetworkDifficulty_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HeightRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseNodeServer).GetNetworkDifficulty(m, &baseNodeGetNetworkDifficultyServer{stream})
}

type BaseNode_GetNetworkDifficultyServer interface {
	Send(*NetworkDifficultyResponse) error
	grpc.ServerStream
}

type baseNodeGetNetworkDifficultyServer struct {
	grpc.ServerStream
}

func (x *baseNodeGetNetworkDifficultyServer) Send(m *NetworkDifficultyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BaseNode_GetNewBlockTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBlockTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetNewBlockTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetNewBlockTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetNewBlockTemplate(ctx, req.(*NewBlockTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetNewBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBlockTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetNewBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetNewBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetNewBlock(ctx, req.(*NewBlockTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetNewBlockWithCoinbases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewBlockWithCoinbasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetNewBlockWithCoinbases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetNewBlockWithCoinbases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetNewBlockWithCoinbases(ctx, req.(*GetNewBlockWithCoinbasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetNewBlockTemplateWithCoinbases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewBlockTemplateWithCoinbasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetNewBlockTemplateWithCoinbases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetNewBlockTemplateWithCoinbases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetNewBlockTemplateWithCoinbases(ctx, req.(*GetNewBlockTemplateWithCoinbasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetNewBlockBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBlockTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetNewBlockBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetNewBlockBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetNewBlockBlob(ctx, req.(*NewBlockTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/SubmitBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).SubmitBlock(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_SubmitBlockBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).SubmitBlockBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/SubmitBlockBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).SubmitBlockBlob(ctx, req.(*BlockBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetSyncInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetSyncInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetSyncInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetSyncInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetSyncProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetSyncProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetSyncProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetSyncProgress(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetTipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetTipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetTipInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetTipInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_SearchKernels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchKernelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseNodeServer).SearchKernels(m, &baseNodeSearchKernelsServer{stream})
}

type BaseNode_SearchKernelsServer interface {
	Send(*HistoricalBlock) error
	grpc.ServerStream
}

type baseNodeSearchKernelsServer struct {
	grpc.ServerStream
}

func (x *baseNodeSearchKernelsServer) Send(m *HistoricalBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _BaseNode_SearchUtxos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchUtxosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseNodeServer).SearchUtxos(m, &baseNodeSearchUtxosServer{stream})
}

type BaseNode_SearchUtxosServer interface {
	Send(*HistoricalBlock) error
	grpc.ServerStream
}

type baseNodeSearchUtxosServer struct {
	grpc.ServerStream
}

func (x *baseNodeSearchUtxosServer) Send(m *HistoricalBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _BaseNode_FetchMatchingUtxos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchMatchingUtxosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseNodeServer).FetchMatchingUtxos(m, &baseNodeFetchMatchingUtxosServer{stream})
}

type BaseNode_FetchMatchingUtxosServer interface {
	Send(*FetchMatchingUtxosResponse) error
	grpc.ServerStream
}

type baseNodeFetchMatchingUtxosServer struct {
	grpc.ServerStream
}

func (x *baseNodeFetchMatchingUtxosServer) Send(m *FetchMatchingUtxosResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BaseNode_GetPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPeersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseNodeServer).GetPeers(m, &baseNodeGetPeersServer{stream})
}

type BaseNode_GetPeersServer interface {
	Send(*GetPeersResponse) error
	grpc.ServerStream
}

type baseNodeGetPeersServer struct {
	grpc.ServerStream
}

func (x *baseNodeGetPeersServer) Send(m *GetPeersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BaseNode_GetMempoolTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMempoolTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseNodeServer).GetMempoolTransactions(m, &baseNodeGetMempoolTransactionsServer{stream})
}

type BaseNode_GetMempoolTransactionsServer interface {
	Send(*GetMempoolTransactionsResponse) error
	grpc.ServerStream
}

type baseNodeGetMempoolTransactionsServer struct {
	grpc.ServerStream
}

func (x *baseNodeGetMempoolTransactionsServer) Send(m *GetMempoolTransactionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BaseNode_TransactionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).TransactionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/TransactionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).TransactionState(ctx, req.(*TransactionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_Identify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).Identify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/Identify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).Identify(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetNetworkStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetNetworkStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetNetworkStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetNetworkStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_ListConnectedPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).ListConnectedPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/ListConnectedPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).ListConnectedPeers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetMempoolStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetMempoolStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetMempoolStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetMempoolStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetActiveValidatorNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetActiveValidatorNodesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseNodeServer).GetActiveValidatorNodes(m, &baseNodeGetActiveValidatorNodesServer{stream})
}

type BaseNode_GetActiveValidatorNodesServer interface {
	Send(*GetActiveValidatorNodesResponse) error
	grpc.ServerStream
}

type baseNodeGetActiveValidatorNodesServer struct {
	grpc.ServerStream
}

func (x *baseNodeGetActiveValidatorNodesServer) Send(m *GetActiveValidatorNodesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BaseNode_GetShardKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetShardKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetShardKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetShardKey(ctx, req.(*GetShardKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_GetTemplateRegistrations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTemplateRegistrationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseNodeServer).GetTemplateRegistrations(m, &baseNodeGetTemplateRegistrationsServer{stream})
}

type BaseNode_GetTemplateRegistrationsServer interface {
	Send(*GetTemplateRegistrationResponse) error
	grpc.ServerStream
}

type baseNodeGetTemplateRegistrationsServer struct {
	grpc.ServerStream
}

func (x *baseNodeGetTemplateRegistrationsServer) Send(m *GetTemplateRegistrationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BaseNode_GetSideChainUtxos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSideChainUtxosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseNodeServer).GetSideChainUtxos(m, &baseNodeGetSideChainUtxosServer{stream})
}

type BaseNode_GetSideChainUtxosServer interface {
	Send(*GetSideChainUtxosResponse) error
	grpc.ServerStream
}

type baseNodeGetSideChainUtxosServer struct {
	grpc.ServerStream
}

func (x *baseNodeGetSideChainUtxosServer) Send(m *GetSideChainUtxosResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BaseNode_GetNetworkState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).GetNetworkState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tari.rpc.BaseNode/GetNetworkState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).GetNetworkState(ctx, req.(*GetNetworkStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BaseNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tari.rpc.BaseNode",
	HandlerType: (*BaseNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHeaderByHash",
			Handler:    _BaseNode_GetHeaderByHash_Handler,
		},
		{
			MethodName: "GetBlockTiming",
			Handler:    _BaseNode_GetBlockTiming_Handler,
		},
		{
			MethodName: "GetConstants",
			Handler:    _BaseNode_GetConstants_Handler,
		},
		{
			MethodName: "GetBlockSize",
			Handler:    _BaseNode_GetBlockSize_Handler,
		},
		{
			MethodName: "GetBlockFees",
			Handler:    _BaseNode_GetBlockFees_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _BaseNode_GetVersion_Handler,
		},
		{
			MethodName: "CheckForUpdates",
			Handler:    _BaseNode_CheckForUpdates_Handler,
		},
		{
			MethodName: "GetNewBlockTemplate",
			Handler:    _BaseNode_GetNewBlockTemplate_Handler,
		},
		{
			MethodName: "GetNewBlock",
			Handler:    _BaseNode_GetNewBlock_Handler,
		},
		{
			MethodName: "GetNewBlockWithCoinbases",
			Handler:    _BaseNode_GetNewBlockWithCoinbases_Handler,
		},
		{
			MethodName: "GetNewBlockTemplateWithCoinbases",
			Handler:    _BaseNode_GetNewBlockTemplateWithCoinbases_Handler,
		},
		{
			MethodName: "GetNewBlockBlob",
			Handler:    _BaseNode_GetNewBlockBlob_Handler,
		},
		{
			MethodName: "SubmitBlock",
			Handler:    _BaseNode_SubmitBlock_Handler,
		},
		{
			MethodName: "SubmitBlockBlob",
			Handler:    _BaseNode_SubmitBlockBlob_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _BaseNode_SubmitTransaction_Handler,
		},
		{
			MethodName: "GetSyncInfo",
			Handler:    _BaseNode_GetSyncInfo_Handler,
		},
		{
			MethodName: "GetSyncProgress",
			Handler:    _BaseNode_GetSyncProgress_Handler,
		},
		{
			MethodName: "GetTipInfo",
			Handler:    _BaseNode_GetTipInfo_Handler,
		},
		{
			MethodName: "TransactionState",
			Handler:    _BaseNode_TransactionState_Handler,
		},
		{
			MethodName: "Identify",
			Handler:    _BaseNode_Identify_Handler,
		},
		{
			MethodName: "GetNetworkStatus",
			Handler:    _BaseNode_GetNetworkStatus_Handler,
		},
		{
			MethodName: "ListConnectedPeers",
			Handler:    _BaseNode_ListConnectedPeers_Handler,
		},
		{
			MethodName: "GetMempoolStats",
			Handler:    _BaseNode_GetMempoolStats_Handler,
		},
		{
			MethodName: "GetShardKey",
			Handler:    _BaseNode_GetShardKey_Handler,
		},
		{
			MethodName: "GetNetworkState",
			Handler:    _BaseNode_GetNetworkState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListHeaders",
			Handler:       _BaseNode_ListHeaders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBlocks",
			Handler:       _BaseNode_GetBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTokensInCirculation",
			Handler:       _BaseNode_GetTokensInCirculation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetNetworkDifficulty",
			Handler:       _BaseNode_GetNetworkDifficulty_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchKernels",
			Handler:       _BaseNode_SearchKernels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchUtxos",
			Handler:       _BaseNode_SearchUtxos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchMatchingUtxos",
			Handler:       _BaseNode_FetchMatchingUtxos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPeers",
			Handler:       _BaseNode_GetPeers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMempoolTransactions",
			Handler:       _BaseNode_GetMempoolTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetActiveValidatorNodes",
			Handler:       _BaseNode_GetActiveValidatorNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTemplateRegistrations",
			Handler:       _BaseNode_GetTemplateRegistrations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSideChainUtxos",
			Handler:       _BaseNode_GetSideChainUtxos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "base_node.proto",
}
